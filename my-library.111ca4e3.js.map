{"mappings":"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","sources":["src/js/api-service/filmoteka-api.js","node_modules/handlebars/lib/index.js","node_modules/handlebars/lib/handlebars.js","node_modules/handlebars/lib/handlebars.runtime.js","node_modules/handlebars/lib/handlebars/base.js","node_modules/handlebars/lib/handlebars/utils.js","node_modules/handlebars/lib/handlebars/exception.js","node_modules/handlebars/lib/handlebars/helpers.js","node_modules/handlebars/lib/handlebars/helpers/block-helper-missing.js","node_modules/handlebars/lib/handlebars/helpers/each.js","node_modules/handlebars/lib/handlebars/helpers/helper-missing.js","node_modules/handlebars/lib/handlebars/helpers/if.js","node_modules/handlebars/lib/handlebars/helpers/log.js","node_modules/handlebars/lib/handlebars/helpers/lookup.js","node_modules/handlebars/lib/handlebars/helpers/with.js","node_modules/handlebars/lib/handlebars/decorators.js","node_modules/handlebars/lib/handlebars/decorators/inline.js","node_modules/handlebars/lib/handlebars/logger.js","node_modules/handlebars/lib/handlebars/internal/proto-access.js","node_modules/handlebars/lib/handlebars/internal/create-new-lookup-object.js","node_modules/handlebars/lib/handlebars/safe-string.js","node_modules/handlebars/lib/handlebars/runtime.js","node_modules/handlebars/lib/handlebars/internal/wrapHelper.js","node_modules/handlebars/lib/handlebars/no-conflict.js","node_modules/handlebars/lib/handlebars/compiler/ast.js","node_modules/handlebars/lib/handlebars/compiler/base.js","node_modules/handlebars/lib/handlebars/compiler/parser.js","node_modules/handlebars/lib/handlebars/compiler/whitespace-control.js","node_modules/handlebars/lib/handlebars/compiler/visitor.js","node_modules/handlebars/lib/handlebars/compiler/helpers.js","node_modules/handlebars/lib/handlebars/compiler/compiler.js","node_modules/handlebars/lib/handlebars/compiler/javascript-compiler.js","node_modules/handlebars/lib/handlebars/compiler/code-gen.js","node_modules/source-map/source-map.js","node_modules/source-map/lib/source-map-generator.js","node_modules/source-map/lib/base64-vlq.js","node_modules/source-map/lib/base64.js","node_modules/source-map/lib/util.js","node_modules/source-map/lib/array-set.js","node_modules/source-map/lib/mapping-list.js","node_modules/source-map/lib/source-map-consumer.js","node_modules/source-map/lib/binary-search.js","node_modules/source-map/lib/quick-sort.js","node_modules/source-map/lib/source-node.js","node_modules/handlebars/lib/handlebars/compiler/printer.js","src/templates/card-films.hbs","src/js/closeModal.js","src/js/api-service/firebase-api-database.js","node_modules/@firebase/database/src/core/storage/DOMStorageWrapper.ts","node_modules/@firebase/database/src/core/storage/MemoryStorage.ts","node_modules/@firebase/database/src/core/storage/storage.ts","node_modules/@firebase/database/src/core/util/util.ts","node_modules/@firebase/database/src/core/AppCheckTokenProvider.ts","node_modules/@firebase/database/src/core/AuthTokenProvider.ts","node_modules/@firebase/database/src/core/RepoInfo.ts","node_modules/@firebase/database/src/core/stats/StatsManager.ts","node_modules/@firebase/database/src/realtime/polling/PacketReceiver.ts","node_modules/@firebase/database/src/realtime/BrowserPollConnection.ts","node_modules/@firebase/database/src/realtime/WebSocketConnection.ts","node_modules/@firebase/database/src/realtime/TransportManager.ts","node_modules/@firebase/database/src/realtime/Connection.ts","node_modules/@firebase/database/src/core/ServerActions.ts","node_modules/@firebase/database/src/core/util/EventEmitter.ts","node_modules/@firebase/database/src/core/util/OnlineMonitor.ts","node_modules/@firebase/database/src/core/util/Path.ts","node_modules/@firebase/database/src/core/util/VisibilityMonitor.ts","node_modules/@firebase/database/src/core/PersistentConnection.ts","node_modules/@firebase/database/src/core/snap/indexes/Index.ts","node_modules/@firebase/database/src/core/snap/indexes/KeyIndex.ts","node_modules/@firebase/database/src/core/util/SortedMap.ts","node_modules/@firebase/database/src/core/snap/comparators.ts","node_modules/@firebase/database/src/core/snap/snap.ts","node_modules/@firebase/database/src/core/snap/LeafNode.ts","node_modules/@firebase/database/src/core/snap/indexes/PriorityIndex.ts","node_modules/@firebase/database/src/core/snap/childSet.ts","node_modules/@firebase/database/src/core/snap/IndexMap.ts","node_modules/@firebase/database/src/core/snap/ChildrenNode.ts","node_modules/@firebase/database/src/core/snap/nodeFromJSON.ts","node_modules/@firebase/database/src/core/snap/indexes/PathIndex.ts","node_modules/@firebase/database/src/core/snap/indexes/ValueIndex.ts","node_modules/@firebase/database/src/core/view/Change.ts","node_modules/@firebase/database/src/core/view/filter/IndexedFilter.ts","node_modules/@firebase/database/src/core/view/filter/RangedFilter.ts","node_modules/@firebase/database/src/core/view/filter/LimitedFilter.ts","node_modules/@firebase/database/src/core/view/QueryParams.ts","node_modules/@firebase/database/src/core/ReadonlyRestClient.ts","node_modules/@firebase/database/src/core/SparseSnapshotTree.ts","node_modules/@firebase/database/src/core/SnapshotHolder.ts","node_modules/@firebase/database/src/core/stats/StatsListener.ts","node_modules/@firebase/database/src/core/stats/StatsReporter.ts","node_modules/@firebase/database/src/core/operation/Operation.ts","node_modules/@firebase/database/src/core/operation/ListenComplete.ts","node_modules/@firebase/database/src/core/operation/Overwrite.ts","node_modules/@firebase/database/src/core/operation/Merge.ts","node_modules/@firebase/database/src/core/view/CacheNode.ts","node_modules/@firebase/database/src/core/view/EventGenerator.ts","node_modules/@firebase/database/src/core/view/ViewCache.ts","node_modules/@firebase/database/src/core/util/ImmutableTree.ts","node_modules/@firebase/database/src/core/CompoundWrite.ts","node_modules/@firebase/database/src/core/WriteTree.ts","node_modules/@firebase/database/src/core/view/ChildChangeAccumulator.ts","node_modules/@firebase/database/src/core/view/CompleteChildSource.ts","node_modules/@firebase/database/src/core/view/ViewProcessor.ts","node_modules/@firebase/database/src/core/view/View.ts","node_modules/@firebase/database/src/core/SyncPoint.ts","node_modules/@firebase/database/src/core/SyncTree.ts","node_modules/@firebase/database/src/core/util/ServerValues.ts","node_modules/@firebase/database/src/core/util/Tree.ts","node_modules/@firebase/database/src/core/util/validation.ts","node_modules/@firebase/database/src/core/view/EventQueue.ts","node_modules/@firebase/database/src/core/Repo.ts","node_modules/@firebase/database/src/core/util/libs/parser.ts","node_modules/@firebase/database/src/core/view/Event.ts","node_modules/@firebase/database/src/core/view/EventRegistration.ts","node_modules/@firebase/database/src/api/Reference_impl.ts","node_modules/@firebase/database/src/api/OnDisconnect.ts","node_modules/@firebase/database/src/core/util/NextPushId.ts","node_modules/@firebase/database/src/api/Database.ts","node_modules/@firebase/database/src/register.ts","node_modules/@firebase/database/src/api/ServerValue.ts","node_modules/@firebase/database/src/api/Transaction.ts","node_modules/@firebase/database/src/api/test_access.ts","node_modules/@firebase/database/src/realtime/Constants.ts","node_modules/@firebase/database/src/core/snap/Node.ts","node_modules/@firebase/database/src/core/stats/StatsCollection.ts","src/js/modal-info/modalInfoFilm.js","src/js/modal-info/modal-creat-element.js","src/js/modal-info/footer-modal.js","src/js/theme-change.js"],"sourcesContent":["const API_KEY = '431ab85139813dba3796c445694ce723';\nconst BASE_URL = 'https://api.themoviedb.org/3';\n\nexport default class FilmotekaApi {\n  constructor() {\n    this.searchQuery = '';\n    this.page = 1;\n  }\n\n  globalFetch(url) {\n    return fetch(url)\n      .then(response => response.json())\n      .then(date => {\n        this.incrementPage();\n        return date.results;\n      });\n  }\n  fetchGenres() {\n    const url = `${BASE_URL}/genre/movie/list?api_key=${API_KEY}`;\n    return fetch(url)\n      .then(response => response.json())\n      .then(data => {\n        return data.genres;\n      });\n  }\n\n  fetchInTrendFilmWithGenres() {\n    return this.fetchTrendFilm().then(data => {\n      return this.fetchGenres().then(genresList => {\n        return data.map(movie => ({\n          ...movie,\n          release_date: movie.release_date.split('-')[0],\n          genres: movie.genre_ids\n            .map(id => genresList.filter(el => el.id === id))\n            .flat(),\n        }));\n      });\n    });\n  }\n\n  fetchSearchFilmWithGenres() {\n    return this.fetchSearchFilm().then(data => {\n      return this.fetchGenres().then(genresList => {\n        return data.map(movie => ({\n          ...movie,\n          release_date: movie.release_date.split('-')[0],\n          genres: movie.genre_ids\n            .map(id => genresList.filter(el => el.id === id))\n            .flat(),\n        }));\n      });\n    });\n  }\n\n  fetchTrendFilm() {\n    const url = `${BASE_URL}/movie/popular?api_key=${API_KEY}&language=en-US&page=${this.page}`;\n    return this.globalFetch(url);\n  }\n\n  fetchSearchFilm() {\n    const url = `${BASE_URL}/search/movie?api_key=${API_KEY}&language=en-US&query=${this.searchQuery}&page=${this.page}&include_adult=false`;\n    return this.globalFetch(url);\n  }\n  fetchSearchTotalFilm() {\n    const url = `${BASE_URL}/search/movie?api_key=${API_KEY}&language=en-US&query=${this.searchQuery}&page=${this.page}&include_adult=false`;\n    return fetch(url)\n      .then(response => response.json())\n      .then(data => {\n        this.incrementPage();\n        return data;\n      });\n  }\n\n  // fetchInfoFilm() {\n  //   const movie_id = 1031653;\n  //   const url = ` https://api.themoviedb.org/3/movie/${movie_id}?api_key=${API_KEY}&language=en-US`;\n  //   return this.globalFetch(url);\n  // }\n\n  fetchInfoFilm(movie_id) {\n    const url = ` https://api.themoviedb.org/3/movie/${movie_id}?api_key=${API_KEY}&language=en-US`;\n    return fetch(url)\n      .then(response => response.json())\n      .then(data => {\n        return data;\n        // console.log(data);\n      });\n  }\n\n  fetchTrailreFilm(movie_id, lang) {\n    const url = ` https://api.themoviedb.org/3/movie/${movie_id}/videos?api_key=${API_KEY}&language=${lang}`;\n    return fetch(url)\n      .then(response => response.json())\n      .then(data => {\n        return data;\n        // console.log(data);\n      });\n  }\n\n  incrementPage() {\n    this.page += 1;\n  }\n\n  decrementPage() {\n    this.page -= 1;\n  }\n\n  resetPage() {\n    this.page = 1;\n  }\n\n  get query() {\n    return this.searchQuery;\n  }\n\n  set query(newQuery) {\n    this.searchQuery = newQuery;\n  }\n  get pageNum() {\n    return this.page;\n  }\n  set pageNum(newPage) {\n    this.page = newPage;\n  }\n}\n","// USAGE:\n// var handlebars = require('handlebars');\n/* eslint-disable no-var */\n\n// var local = handlebars.create();\n\nvar handlebars = require('../dist/cjs/handlebars')['default'];\n\nvar printer = require('../dist/cjs/handlebars/compiler/printer');\nhandlebars.PrintVisitor = printer.PrintVisitor;\nhandlebars.print = printer.print;\n\nmodule.exports = handlebars;\n\n// Publish a Node.js require() handler for .handlebars and .hbs files\nfunction extension(module, filename) {\n  var fs = require('fs');\n  var templateString = fs.readFileSync(filename, 'utf8');\n  module.exports = handlebars.compile(templateString);\n}\n/* istanbul ignore else */\nif (typeof require !== 'undefined' && require.extensions) {\n  require.extensions['.handlebars'] = extension;\n  require.extensions['.hbs'] = extension;\n}\n","import runtime from './handlebars.runtime';\n\n// Compiler imports\nimport AST from './handlebars/compiler/ast';\nimport {\n  parser as Parser,\n  parse,\n  parseWithoutProcessing\n} from './handlebars/compiler/base';\nimport { Compiler, compile, precompile } from './handlebars/compiler/compiler';\nimport JavaScriptCompiler from './handlebars/compiler/javascript-compiler';\nimport Visitor from './handlebars/compiler/visitor';\n\nimport noConflict from './handlebars/no-conflict';\n\nlet _create = runtime.create;\nfunction create() {\n  let hb = _create();\n\n  hb.compile = function(input, options) {\n    return compile(input, options, hb);\n  };\n  hb.precompile = function(input, options) {\n    return precompile(input, options, hb);\n  };\n\n  hb.AST = AST;\n  hb.Compiler = Compiler;\n  hb.JavaScriptCompiler = JavaScriptCompiler;\n  hb.Parser = Parser;\n  hb.parse = parse;\n  hb.parseWithoutProcessing = parseWithoutProcessing;\n\n  return hb;\n}\n\nlet inst = create();\ninst.create = create;\n\nnoConflict(inst);\n\ninst.Visitor = Visitor;\n\ninst['default'] = inst;\n\nexport default inst;\n","import * as base from './handlebars/base';\n\n// Each of these augment the Handlebars object. No need to setup here.\n// (This is done to easily share code between commonjs and browse envs)\nimport SafeString from './handlebars/safe-string';\nimport Exception from './handlebars/exception';\nimport * as Utils from './handlebars/utils';\nimport * as runtime from './handlebars/runtime';\n\nimport noConflict from './handlebars/no-conflict';\n\n// For compatibility and usage outside of module systems, make the Handlebars object a namespace\nfunction create() {\n  let hb = new base.HandlebarsEnvironment();\n\n  Utils.extend(hb, base);\n  hb.SafeString = SafeString;\n  hb.Exception = Exception;\n  hb.Utils = Utils;\n  hb.escapeExpression = Utils.escapeExpression;\n\n  hb.VM = runtime;\n  hb.template = function(spec) {\n    return runtime.template(spec, hb);\n  };\n\n  return hb;\n}\n\nlet inst = create();\ninst.create = create;\n\nnoConflict(inst);\n\ninst['default'] = inst;\n\nexport default inst;\n","import { createFrame, extend, toString } from './utils';\nimport Exception from './exception';\nimport { registerDefaultHelpers } from './helpers';\nimport { registerDefaultDecorators } from './decorators';\nimport logger from './logger';\nimport { resetLoggedProperties } from './internal/proto-access';\n\nexport const VERSION = '4.7.7';\nexport const COMPILER_REVISION = 8;\nexport const LAST_COMPATIBLE_COMPILER_REVISION = 7;\n\nexport const REVISION_CHANGES = {\n  1: '<= 1.0.rc.2', // 1.0.rc.2 is actually rev2 but doesn't report it\n  2: '== 1.0.0-rc.3',\n  3: '== 1.0.0-rc.4',\n  4: '== 1.x.x',\n  5: '== 2.0.0-alpha.x',\n  6: '>= 2.0.0-beta.1',\n  7: '>= 4.0.0 <4.3.0',\n  8: '>= 4.3.0'\n};\n\nconst objectType = '[object Object]';\n\nexport function HandlebarsEnvironment(helpers, partials, decorators) {\n  this.helpers = helpers || {};\n  this.partials = partials || {};\n  this.decorators = decorators || {};\n\n  registerDefaultHelpers(this);\n  registerDefaultDecorators(this);\n}\n\nHandlebarsEnvironment.prototype = {\n  constructor: HandlebarsEnvironment,\n\n  logger: logger,\n  log: logger.log,\n\n  registerHelper: function(name, fn) {\n    if (toString.call(name) === objectType) {\n      if (fn) {\n        throw new Exception('Arg not supported with multiple helpers');\n      }\n      extend(this.helpers, name);\n    } else {\n      this.helpers[name] = fn;\n    }\n  },\n  unregisterHelper: function(name) {\n    delete this.helpers[name];\n  },\n\n  registerPartial: function(name, partial) {\n    if (toString.call(name) === objectType) {\n      extend(this.partials, name);\n    } else {\n      if (typeof partial === 'undefined') {\n        throw new Exception(\n          `Attempting to register a partial called \"${name}\" as undefined`\n        );\n      }\n      this.partials[name] = partial;\n    }\n  },\n  unregisterPartial: function(name) {\n    delete this.partials[name];\n  },\n\n  registerDecorator: function(name, fn) {\n    if (toString.call(name) === objectType) {\n      if (fn) {\n        throw new Exception('Arg not supported with multiple decorators');\n      }\n      extend(this.decorators, name);\n    } else {\n      this.decorators[name] = fn;\n    }\n  },\n  unregisterDecorator: function(name) {\n    delete this.decorators[name];\n  },\n  /**\n   * Reset the memory of illegal property accesses that have already been logged.\n   * @deprecated should only be used in handlebars test-cases\n   */\n  resetLoggedPropertyAccesses() {\n    resetLoggedProperties();\n  }\n};\n\nexport let log = logger.log;\n\nexport { createFrame, logger };\n","const escape = {\n  '&': '&amp;',\n  '<': '&lt;',\n  '>': '&gt;',\n  '\"': '&quot;',\n  \"'\": '&#x27;',\n  '`': '&#x60;',\n  '=': '&#x3D;'\n};\n\nconst badChars = /[&<>\"'`=]/g,\n  possible = /[&<>\"'`=]/;\n\nfunction escapeChar(chr) {\n  return escape[chr];\n}\n\nexport function extend(obj /* , ...source */) {\n  for (let i = 1; i < arguments.length; i++) {\n    for (let key in arguments[i]) {\n      if (Object.prototype.hasOwnProperty.call(arguments[i], key)) {\n        obj[key] = arguments[i][key];\n      }\n    }\n  }\n\n  return obj;\n}\n\nexport let toString = Object.prototype.toString;\n\n// Sourced from lodash\n// https://github.com/bestiejs/lodash/blob/master/LICENSE.txt\n/* eslint-disable func-style */\nlet isFunction = function(value) {\n  return typeof value === 'function';\n};\n// fallback for older versions of Chrome and Safari\n/* istanbul ignore next */\nif (isFunction(/x/)) {\n  isFunction = function(value) {\n    return (\n      typeof value === 'function' &&\n      toString.call(value) === '[object Function]'\n    );\n  };\n}\nexport { isFunction };\n/* eslint-enable func-style */\n\n/* istanbul ignore next */\nexport const isArray =\n  Array.isArray ||\n  function(value) {\n    return value && typeof value === 'object'\n      ? toString.call(value) === '[object Array]'\n      : false;\n  };\n\n// Older IE versions do not directly support indexOf so we must implement our own, sadly.\nexport function indexOf(array, value) {\n  for (let i = 0, len = array.length; i < len; i++) {\n    if (array[i] === value) {\n      return i;\n    }\n  }\n  return -1;\n}\n\nexport function escapeExpression(string) {\n  if (typeof string !== 'string') {\n    // don't escape SafeStrings, since they're already safe\n    if (string && string.toHTML) {\n      return string.toHTML();\n    } else if (string == null) {\n      return '';\n    } else if (!string) {\n      return string + '';\n    }\n\n    // Force a string conversion as this will be done by the append regardless and\n    // the regex test will do this transparently behind the scenes, causing issues if\n    // an object's to string has escaped characters in it.\n    string = '' + string;\n  }\n\n  if (!possible.test(string)) {\n    return string;\n  }\n  return string.replace(badChars, escapeChar);\n}\n\nexport function isEmpty(value) {\n  if (!value && value !== 0) {\n    return true;\n  } else if (isArray(value) && value.length === 0) {\n    return true;\n  } else {\n    return false;\n  }\n}\n\nexport function createFrame(object) {\n  let frame = extend({}, object);\n  frame._parent = object;\n  return frame;\n}\n\nexport function blockParams(params, ids) {\n  params.path = ids;\n  return params;\n}\n\nexport function appendContextPath(contextPath, id) {\n  return (contextPath ? contextPath + '.' : '') + id;\n}\n","const errorProps = [\n  'description',\n  'fileName',\n  'lineNumber',\n  'endLineNumber',\n  'message',\n  'name',\n  'number',\n  'stack'\n];\n\nfunction Exception(message, node) {\n  let loc = node && node.loc,\n    line,\n    endLineNumber,\n    column,\n    endColumn;\n\n  if (loc) {\n    line = loc.start.line;\n    endLineNumber = loc.end.line;\n    column = loc.start.column;\n    endColumn = loc.end.column;\n\n    message += ' - ' + line + ':' + column;\n  }\n\n  let tmp = Error.prototype.constructor.call(this, message);\n\n  // Unfortunately errors are not enumerable in Chrome (at least), so `for prop in tmp` doesn't work.\n  for (let idx = 0; idx < errorProps.length; idx++) {\n    this[errorProps[idx]] = tmp[errorProps[idx]];\n  }\n\n  /* istanbul ignore else */\n  if (Error.captureStackTrace) {\n    Error.captureStackTrace(this, Exception);\n  }\n\n  try {\n    if (loc) {\n      this.lineNumber = line;\n      this.endLineNumber = endLineNumber;\n\n      // Work around issue under safari where we can't directly set the column value\n      /* istanbul ignore next */\n      if (Object.defineProperty) {\n        Object.defineProperty(this, 'column', {\n          value: column,\n          enumerable: true\n        });\n        Object.defineProperty(this, 'endColumn', {\n          value: endColumn,\n          enumerable: true\n        });\n      } else {\n        this.column = column;\n        this.endColumn = endColumn;\n      }\n    }\n  } catch (nop) {\n    /* Ignore if the browser is very particular */\n  }\n}\n\nException.prototype = new Error();\n\nexport default Exception;\n","import registerBlockHelperMissing from './helpers/block-helper-missing';\nimport registerEach from './helpers/each';\nimport registerHelperMissing from './helpers/helper-missing';\nimport registerIf from './helpers/if';\nimport registerLog from './helpers/log';\nimport registerLookup from './helpers/lookup';\nimport registerWith from './helpers/with';\n\nexport function registerDefaultHelpers(instance) {\n  registerBlockHelperMissing(instance);\n  registerEach(instance);\n  registerHelperMissing(instance);\n  registerIf(instance);\n  registerLog(instance);\n  registerLookup(instance);\n  registerWith(instance);\n}\n\nexport function moveHelperToHooks(instance, helperName, keepHelper) {\n  if (instance.helpers[helperName]) {\n    instance.hooks[helperName] = instance.helpers[helperName];\n    if (!keepHelper) {\n      delete instance.helpers[helperName];\n    }\n  }\n}\n","import { appendContextPath, createFrame, isArray } from '../utils';\n\nexport default function(instance) {\n  instance.registerHelper('blockHelperMissing', function(context, options) {\n    let inverse = options.inverse,\n      fn = options.fn;\n\n    if (context === true) {\n      return fn(this);\n    } else if (context === false || context == null) {\n      return inverse(this);\n    } else if (isArray(context)) {\n      if (context.length > 0) {\n        if (options.ids) {\n          options.ids = [options.name];\n        }\n\n        return instance.helpers.each(context, options);\n      } else {\n        return inverse(this);\n      }\n    } else {\n      if (options.data && options.ids) {\n        let data = createFrame(options.data);\n        data.contextPath = appendContextPath(\n          options.data.contextPath,\n          options.name\n        );\n        options = { data: data };\n      }\n\n      return fn(context, options);\n    }\n  });\n}\n","import {\n  appendContextPath,\n  blockParams,\n  createFrame,\n  isArray,\n  isFunction\n} from '../utils';\nimport Exception from '../exception';\n\nexport default function(instance) {\n  instance.registerHelper('each', function(context, options) {\n    if (!options) {\n      throw new Exception('Must pass iterator to #each');\n    }\n\n    let fn = options.fn,\n      inverse = options.inverse,\n      i = 0,\n      ret = '',\n      data,\n      contextPath;\n\n    if (options.data && options.ids) {\n      contextPath =\n        appendContextPath(options.data.contextPath, options.ids[0]) + '.';\n    }\n\n    if (isFunction(context)) {\n      context = context.call(this);\n    }\n\n    if (options.data) {\n      data = createFrame(options.data);\n    }\n\n    function execIteration(field, index, last) {\n      if (data) {\n        data.key = field;\n        data.index = index;\n        data.first = index === 0;\n        data.last = !!last;\n\n        if (contextPath) {\n          data.contextPath = contextPath + field;\n        }\n      }\n\n      ret =\n        ret +\n        fn(context[field], {\n          data: data,\n          blockParams: blockParams(\n            [context[field], field],\n            [contextPath + field, null]\n          )\n        });\n    }\n\n    if (context && typeof context === 'object') {\n      if (isArray(context)) {\n        for (let j = context.length; i < j; i++) {\n          if (i in context) {\n            execIteration(i, i, i === context.length - 1);\n          }\n        }\n      } else if (global.Symbol && context[global.Symbol.iterator]) {\n        const newContext = [];\n        const iterator = context[global.Symbol.iterator]();\n        for (let it = iterator.next(); !it.done; it = iterator.next()) {\n          newContext.push(it.value);\n        }\n        context = newContext;\n        for (let j = context.length; i < j; i++) {\n          execIteration(i, i, i === context.length - 1);\n        }\n      } else {\n        let priorKey;\n\n        Object.keys(context).forEach(key => {\n          // We're running the iterations one step out of sync so we can detect\n          // the last iteration without have to scan the object twice and create\n          // an itermediate keys array.\n          if (priorKey !== undefined) {\n            execIteration(priorKey, i - 1);\n          }\n          priorKey = key;\n          i++;\n        });\n        if (priorKey !== undefined) {\n          execIteration(priorKey, i - 1, true);\n        }\n      }\n    }\n\n    if (i === 0) {\n      ret = inverse(this);\n    }\n\n    return ret;\n  });\n}\n","import Exception from '../exception';\n\nexport default function(instance) {\n  instance.registerHelper('helperMissing', function(/* [args, ]options */) {\n    if (arguments.length === 1) {\n      // A missing field in a {{foo}} construct.\n      return undefined;\n    } else {\n      // Someone is actually trying to call something, blow up.\n      throw new Exception(\n        'Missing helper: \"' + arguments[arguments.length - 1].name + '\"'\n      );\n    }\n  });\n}\n","import { isEmpty, isFunction } from '../utils';\nimport Exception from '../exception';\n\nexport default function(instance) {\n  instance.registerHelper('if', function(conditional, options) {\n    if (arguments.length != 2) {\n      throw new Exception('#if requires exactly one argument');\n    }\n    if (isFunction(conditional)) {\n      conditional = conditional.call(this);\n    }\n\n    // Default behavior is to render the positive path if the value is truthy and not empty.\n    // The `includeZero` option may be set to treat the condtional as purely not empty based on the\n    // behavior of isEmpty. Effectively this determines if 0 is handled by the positive path or negative.\n    if ((!options.hash.includeZero && !conditional) || isEmpty(conditional)) {\n      return options.inverse(this);\n    } else {\n      return options.fn(this);\n    }\n  });\n\n  instance.registerHelper('unless', function(conditional, options) {\n    if (arguments.length != 2) {\n      throw new Exception('#unless requires exactly one argument');\n    }\n    return instance.helpers['if'].call(this, conditional, {\n      fn: options.inverse,\n      inverse: options.fn,\n      hash: options.hash\n    });\n  });\n}\n","export default function(instance) {\n  instance.registerHelper('log', function(/* message, options */) {\n    let args = [undefined],\n      options = arguments[arguments.length - 1];\n    for (let i = 0; i < arguments.length - 1; i++) {\n      args.push(arguments[i]);\n    }\n\n    let level = 1;\n    if (options.hash.level != null) {\n      level = options.hash.level;\n    } else if (options.data && options.data.level != null) {\n      level = options.data.level;\n    }\n    args[0] = level;\n\n    instance.log(...args);\n  });\n}\n","export default function(instance) {\n  instance.registerHelper('lookup', function(obj, field, options) {\n    if (!obj) {\n      // Note for 5.0: Change to \"obj == null\" in 5.0\n      return obj;\n    }\n    return options.lookupProperty(obj, field);\n  });\n}\n","import {\n  appendContextPath,\n  blockParams,\n  createFrame,\n  isEmpty,\n  isFunction\n} from '../utils';\nimport Exception from '../exception';\n\nexport default function(instance) {\n  instance.registerHelper('with', function(context, options) {\n    if (arguments.length != 2) {\n      throw new Exception('#with requires exactly one argument');\n    }\n    if (isFunction(context)) {\n      context = context.call(this);\n    }\n\n    let fn = options.fn;\n\n    if (!isEmpty(context)) {\n      let data = options.data;\n      if (options.data && options.ids) {\n        data = createFrame(options.data);\n        data.contextPath = appendContextPath(\n          options.data.contextPath,\n          options.ids[0]\n        );\n      }\n\n      return fn(context, {\n        data: data,\n        blockParams: blockParams([context], [data && data.contextPath])\n      });\n    } else {\n      return options.inverse(this);\n    }\n  });\n}\n","import registerInline from './decorators/inline';\n\nexport function registerDefaultDecorators(instance) {\n  registerInline(instance);\n}\n","import { extend } from '../utils';\n\nexport default function(instance) {\n  instance.registerDecorator('inline', function(fn, props, container, options) {\n    let ret = fn;\n    if (!props.partials) {\n      props.partials = {};\n      ret = function(context, options) {\n        // Create a new partials stack frame prior to exec.\n        let original = container.partials;\n        container.partials = extend({}, original, props.partials);\n        let ret = fn(context, options);\n        container.partials = original;\n        return ret;\n      };\n    }\n\n    props.partials[options.args[0]] = options.fn;\n\n    return ret;\n  });\n}\n","import { indexOf } from './utils';\n\nlet logger = {\n  methodMap: ['debug', 'info', 'warn', 'error'],\n  level: 'info',\n\n  // Maps a given level value to the `methodMap` indexes above.\n  lookupLevel: function(level) {\n    if (typeof level === 'string') {\n      let levelMap = indexOf(logger.methodMap, level.toLowerCase());\n      if (levelMap >= 0) {\n        level = levelMap;\n      } else {\n        level = parseInt(level, 10);\n      }\n    }\n\n    return level;\n  },\n\n  // Can be overridden in the host environment\n  log: function(level, ...message) {\n    level = logger.lookupLevel(level);\n\n    if (\n      typeof console !== 'undefined' &&\n      logger.lookupLevel(logger.level) <= level\n    ) {\n      let method = logger.methodMap[level];\n      // eslint-disable-next-line no-console\n      if (!console[method]) {\n        method = 'log';\n      }\n      console[method](...message); // eslint-disable-line no-console\n    }\n  }\n};\n\nexport default logger;\n","import { createNewLookupObject } from './create-new-lookup-object';\nimport * as logger from '../logger';\n\nconst loggedProperties = Object.create(null);\n\nexport function createProtoAccessControl(runtimeOptions) {\n  let defaultMethodWhiteList = Object.create(null);\n  defaultMethodWhiteList['constructor'] = false;\n  defaultMethodWhiteList['__defineGetter__'] = false;\n  defaultMethodWhiteList['__defineSetter__'] = false;\n  defaultMethodWhiteList['__lookupGetter__'] = false;\n\n  let defaultPropertyWhiteList = Object.create(null);\n  // eslint-disable-next-line no-proto\n  defaultPropertyWhiteList['__proto__'] = false;\n\n  return {\n    properties: {\n      whitelist: createNewLookupObject(\n        defaultPropertyWhiteList,\n        runtimeOptions.allowedProtoProperties\n      ),\n      defaultValue: runtimeOptions.allowProtoPropertiesByDefault\n    },\n    methods: {\n      whitelist: createNewLookupObject(\n        defaultMethodWhiteList,\n        runtimeOptions.allowedProtoMethods\n      ),\n      defaultValue: runtimeOptions.allowProtoMethodsByDefault\n    }\n  };\n}\n\nexport function resultIsAllowed(result, protoAccessControl, propertyName) {\n  if (typeof result === 'function') {\n    return checkWhiteList(protoAccessControl.methods, propertyName);\n  } else {\n    return checkWhiteList(protoAccessControl.properties, propertyName);\n  }\n}\n\nfunction checkWhiteList(protoAccessControlForType, propertyName) {\n  if (protoAccessControlForType.whitelist[propertyName] !== undefined) {\n    return protoAccessControlForType.whitelist[propertyName] === true;\n  }\n  if (protoAccessControlForType.defaultValue !== undefined) {\n    return protoAccessControlForType.defaultValue;\n  }\n  logUnexpecedPropertyAccessOnce(propertyName);\n  return false;\n}\n\nfunction logUnexpecedPropertyAccessOnce(propertyName) {\n  if (loggedProperties[propertyName] !== true) {\n    loggedProperties[propertyName] = true;\n    logger.log(\n      'error',\n      `Handlebars: Access has been denied to resolve the property \"${propertyName}\" because it is not an \"own property\" of its parent.\\n` +\n        `You can add a runtime option to disable the check or this warning:\\n` +\n        `See https://handlebarsjs.com/api-reference/runtime-options.html#options-to-control-prototype-access for details`\n    );\n  }\n}\n\nexport function resetLoggedProperties() {\n  Object.keys(loggedProperties).forEach(propertyName => {\n    delete loggedProperties[propertyName];\n  });\n}\n","import { extend } from '../utils';\n\n/**\n * Create a new object with \"null\"-prototype to avoid truthy results on prototype properties.\n * The resulting object can be used with \"object[property]\" to check if a property exists\n * @param {...object} sources a varargs parameter of source objects that will be merged\n * @returns {object}\n */\nexport function createNewLookupObject(...sources) {\n  return extend(Object.create(null), ...sources);\n}\n","// Build out our basic SafeString type\nfunction SafeString(string) {\n  this.string = string;\n}\n\nSafeString.prototype.toString = SafeString.prototype.toHTML = function() {\n  return '' + this.string;\n};\n\nexport default SafeString;\n","import * as Utils from './utils';\nimport Exception from './exception';\nimport {\n  COMPILER_REVISION,\n  createFrame,\n  LAST_COMPATIBLE_COMPILER_REVISION,\n  REVISION_CHANGES\n} from './base';\nimport { moveHelperToHooks } from './helpers';\nimport { wrapHelper } from './internal/wrapHelper';\nimport {\n  createProtoAccessControl,\n  resultIsAllowed\n} from './internal/proto-access';\n\nexport function checkRevision(compilerInfo) {\n  const compilerRevision = (compilerInfo && compilerInfo[0]) || 1,\n    currentRevision = COMPILER_REVISION;\n\n  if (\n    compilerRevision >= LAST_COMPATIBLE_COMPILER_REVISION &&\n    compilerRevision <= COMPILER_REVISION\n  ) {\n    return;\n  }\n\n  if (compilerRevision < LAST_COMPATIBLE_COMPILER_REVISION) {\n    const runtimeVersions = REVISION_CHANGES[currentRevision],\n      compilerVersions = REVISION_CHANGES[compilerRevision];\n    throw new Exception(\n      'Template was precompiled with an older version of Handlebars than the current runtime. ' +\n        'Please update your precompiler to a newer version (' +\n        runtimeVersions +\n        ') or downgrade your runtime to an older version (' +\n        compilerVersions +\n        ').'\n    );\n  } else {\n    // Use the embedded version info since the runtime doesn't know about this revision yet\n    throw new Exception(\n      'Template was precompiled with a newer version of Handlebars than the current runtime. ' +\n        'Please update your runtime to a newer version (' +\n        compilerInfo[1] +\n        ').'\n    );\n  }\n}\n\nexport function template(templateSpec, env) {\n  /* istanbul ignore next */\n  if (!env) {\n    throw new Exception('No environment passed to template');\n  }\n  if (!templateSpec || !templateSpec.main) {\n    throw new Exception('Unknown template object: ' + typeof templateSpec);\n  }\n\n  templateSpec.main.decorator = templateSpec.main_d;\n\n  // Note: Using env.VM references rather than local var references throughout this section to allow\n  // for external users to override these as pseudo-supported APIs.\n  env.VM.checkRevision(templateSpec.compiler);\n\n  // backwards compatibility for precompiled templates with compiler-version 7 (<4.3.0)\n  const templateWasPrecompiledWithCompilerV7 =\n    templateSpec.compiler && templateSpec.compiler[0] === 7;\n\n  function invokePartialWrapper(partial, context, options) {\n    if (options.hash) {\n      context = Utils.extend({}, context, options.hash);\n      if (options.ids) {\n        options.ids[0] = true;\n      }\n    }\n    partial = env.VM.resolvePartial.call(this, partial, context, options);\n\n    let extendedOptions = Utils.extend({}, options, {\n      hooks: this.hooks,\n      protoAccessControl: this.protoAccessControl\n    });\n\n    let result = env.VM.invokePartial.call(\n      this,\n      partial,\n      context,\n      extendedOptions\n    );\n\n    if (result == null && env.compile) {\n      options.partials[options.name] = env.compile(\n        partial,\n        templateSpec.compilerOptions,\n        env\n      );\n      result = options.partials[options.name](context, extendedOptions);\n    }\n    if (result != null) {\n      if (options.indent) {\n        let lines = result.split('\\n');\n        for (let i = 0, l = lines.length; i < l; i++) {\n          if (!lines[i] && i + 1 === l) {\n            break;\n          }\n\n          lines[i] = options.indent + lines[i];\n        }\n        result = lines.join('\\n');\n      }\n      return result;\n    } else {\n      throw new Exception(\n        'The partial ' +\n          options.name +\n          ' could not be compiled when running in runtime-only mode'\n      );\n    }\n  }\n\n  // Just add water\n  let container = {\n    strict: function(obj, name, loc) {\n      if (!obj || !(name in obj)) {\n        throw new Exception('\"' + name + '\" not defined in ' + obj, {\n          loc: loc\n        });\n      }\n      return container.lookupProperty(obj, name);\n    },\n    lookupProperty: function(parent, propertyName) {\n      let result = parent[propertyName];\n      if (result == null) {\n        return result;\n      }\n      if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {\n        return result;\n      }\n\n      if (resultIsAllowed(result, container.protoAccessControl, propertyName)) {\n        return result;\n      }\n      return undefined;\n    },\n    lookup: function(depths, name) {\n      const len = depths.length;\n      for (let i = 0; i < len; i++) {\n        let result = depths[i] && container.lookupProperty(depths[i], name);\n        if (result != null) {\n          return depths[i][name];\n        }\n      }\n    },\n    lambda: function(current, context) {\n      return typeof current === 'function' ? current.call(context) : current;\n    },\n\n    escapeExpression: Utils.escapeExpression,\n    invokePartial: invokePartialWrapper,\n\n    fn: function(i) {\n      let ret = templateSpec[i];\n      ret.decorator = templateSpec[i + '_d'];\n      return ret;\n    },\n\n    programs: [],\n    program: function(i, data, declaredBlockParams, blockParams, depths) {\n      let programWrapper = this.programs[i],\n        fn = this.fn(i);\n      if (data || depths || blockParams || declaredBlockParams) {\n        programWrapper = wrapProgram(\n          this,\n          i,\n          fn,\n          data,\n          declaredBlockParams,\n          blockParams,\n          depths\n        );\n      } else if (!programWrapper) {\n        programWrapper = this.programs[i] = wrapProgram(this, i, fn);\n      }\n      return programWrapper;\n    },\n\n    data: function(value, depth) {\n      while (value && depth--) {\n        value = value._parent;\n      }\n      return value;\n    },\n    mergeIfNeeded: function(param, common) {\n      let obj = param || common;\n\n      if (param && common && param !== common) {\n        obj = Utils.extend({}, common, param);\n      }\n\n      return obj;\n    },\n    // An empty object to use as replacement for null-contexts\n    nullContext: Object.seal({}),\n\n    noop: env.VM.noop,\n    compilerInfo: templateSpec.compiler\n  };\n\n  function ret(context, options = {}) {\n    let data = options.data;\n\n    ret._setup(options);\n    if (!options.partial && templateSpec.useData) {\n      data = initData(context, data);\n    }\n    let depths,\n      blockParams = templateSpec.useBlockParams ? [] : undefined;\n    if (templateSpec.useDepths) {\n      if (options.depths) {\n        depths =\n          context != options.depths[0]\n            ? [context].concat(options.depths)\n            : options.depths;\n      } else {\n        depths = [context];\n      }\n    }\n\n    function main(context /*, options*/) {\n      return (\n        '' +\n        templateSpec.main(\n          container,\n          context,\n          container.helpers,\n          container.partials,\n          data,\n          blockParams,\n          depths\n        )\n      );\n    }\n\n    main = executeDecorators(\n      templateSpec.main,\n      main,\n      container,\n      options.depths || [],\n      data,\n      blockParams\n    );\n    return main(context, options);\n  }\n\n  ret.isTop = true;\n\n  ret._setup = function(options) {\n    if (!options.partial) {\n      let mergedHelpers = Utils.extend({}, env.helpers, options.helpers);\n      wrapHelpersToPassLookupProperty(mergedHelpers, container);\n      container.helpers = mergedHelpers;\n\n      if (templateSpec.usePartial) {\n        // Use mergeIfNeeded here to prevent compiling global partials multiple times\n        container.partials = container.mergeIfNeeded(\n          options.partials,\n          env.partials\n        );\n      }\n      if (templateSpec.usePartial || templateSpec.useDecorators) {\n        container.decorators = Utils.extend(\n          {},\n          env.decorators,\n          options.decorators\n        );\n      }\n\n      container.hooks = {};\n      container.protoAccessControl = createProtoAccessControl(options);\n\n      let keepHelperInHelpers =\n        options.allowCallsToHelperMissing ||\n        templateWasPrecompiledWithCompilerV7;\n      moveHelperToHooks(container, 'helperMissing', keepHelperInHelpers);\n      moveHelperToHooks(container, 'blockHelperMissing', keepHelperInHelpers);\n    } else {\n      container.protoAccessControl = options.protoAccessControl; // internal option\n      container.helpers = options.helpers;\n      container.partials = options.partials;\n      container.decorators = options.decorators;\n      container.hooks = options.hooks;\n    }\n  };\n\n  ret._child = function(i, data, blockParams, depths) {\n    if (templateSpec.useBlockParams && !blockParams) {\n      throw new Exception('must pass block params');\n    }\n    if (templateSpec.useDepths && !depths) {\n      throw new Exception('must pass parent depths');\n    }\n\n    return wrapProgram(\n      container,\n      i,\n      templateSpec[i],\n      data,\n      0,\n      blockParams,\n      depths\n    );\n  };\n  return ret;\n}\n\nexport function wrapProgram(\n  container,\n  i,\n  fn,\n  data,\n  declaredBlockParams,\n  blockParams,\n  depths\n) {\n  function prog(context, options = {}) {\n    let currentDepths = depths;\n    if (\n      depths &&\n      context != depths[0] &&\n      !(context === container.nullContext && depths[0] === null)\n    ) {\n      currentDepths = [context].concat(depths);\n    }\n\n    return fn(\n      container,\n      context,\n      container.helpers,\n      container.partials,\n      options.data || data,\n      blockParams && [options.blockParams].concat(blockParams),\n      currentDepths\n    );\n  }\n\n  prog = executeDecorators(fn, prog, container, depths, data, blockParams);\n\n  prog.program = i;\n  prog.depth = depths ? depths.length : 0;\n  prog.blockParams = declaredBlockParams || 0;\n  return prog;\n}\n\n/**\n * This is currently part of the official API, therefore implementation details should not be changed.\n */\nexport function resolvePartial(partial, context, options) {\n  if (!partial) {\n    if (options.name === '@partial-block') {\n      partial = options.data['partial-block'];\n    } else {\n      partial = options.partials[options.name];\n    }\n  } else if (!partial.call && !options.name) {\n    // This is a dynamic partial that returned a string\n    options.name = partial;\n    partial = options.partials[partial];\n  }\n  return partial;\n}\n\nexport function invokePartial(partial, context, options) {\n  // Use the current closure context to save the partial-block if this partial\n  const currentPartialBlock = options.data && options.data['partial-block'];\n  options.partial = true;\n  if (options.ids) {\n    options.data.contextPath = options.ids[0] || options.data.contextPath;\n  }\n\n  let partialBlock;\n  if (options.fn && options.fn !== noop) {\n    options.data = createFrame(options.data);\n    // Wrapper function to get access to currentPartialBlock from the closure\n    let fn = options.fn;\n    partialBlock = options.data['partial-block'] = function partialBlockWrapper(\n      context,\n      options = {}\n    ) {\n      // Restore the partial-block from the closure for the execution of the block\n      // i.e. the part inside the block of the partial call.\n      options.data = createFrame(options.data);\n      options.data['partial-block'] = currentPartialBlock;\n      return fn(context, options);\n    };\n    if (fn.partials) {\n      options.partials = Utils.extend({}, options.partials, fn.partials);\n    }\n  }\n\n  if (partial === undefined && partialBlock) {\n    partial = partialBlock;\n  }\n\n  if (partial === undefined) {\n    throw new Exception('The partial ' + options.name + ' could not be found');\n  } else if (partial instanceof Function) {\n    return partial(context, options);\n  }\n}\n\nexport function noop() {\n  return '';\n}\n\nfunction initData(context, data) {\n  if (!data || !('root' in data)) {\n    data = data ? createFrame(data) : {};\n    data.root = context;\n  }\n  return data;\n}\n\nfunction executeDecorators(fn, prog, container, depths, data, blockParams) {\n  if (fn.decorator) {\n    let props = {};\n    prog = fn.decorator(\n      prog,\n      props,\n      container,\n      depths && depths[0],\n      data,\n      blockParams,\n      depths\n    );\n    Utils.extend(prog, props);\n  }\n  return prog;\n}\n\nfunction wrapHelpersToPassLookupProperty(mergedHelpers, container) {\n  Object.keys(mergedHelpers).forEach(helperName => {\n    let helper = mergedHelpers[helperName];\n    mergedHelpers[helperName] = passLookupPropertyOption(helper, container);\n  });\n}\n\nfunction passLookupPropertyOption(helper, container) {\n  const lookupProperty = container.lookupProperty;\n  return wrapHelper(helper, options => {\n    return Utils.extend({ lookupProperty }, options);\n  });\n}\n","export function wrapHelper(helper, transformOptionsFn) {\n  if (typeof helper !== 'function') {\n    // This should not happen, but apparently it does in https://github.com/wycats/handlebars.js/issues/1639\n    // We try to make the wrapper least-invasive by not wrapping it, if the helper is not a function.\n    return helper;\n  }\n  let wrapper = function(/* dynamic arguments */) {\n    const options = arguments[arguments.length - 1];\n    arguments[arguments.length - 1] = transformOptionsFn(options);\n    return helper.apply(this, arguments);\n  };\n  return wrapper;\n}\n","export default function(Handlebars) {\n  /* istanbul ignore next */\n  let root = typeof global !== 'undefined' ? global : window,\n    $Handlebars = root.Handlebars;\n  /* istanbul ignore next */\n  Handlebars.noConflict = function() {\n    if (root.Handlebars === Handlebars) {\n      root.Handlebars = $Handlebars;\n    }\n    return Handlebars;\n  };\n}\n","let AST = {\n  // Public API used to evaluate derived attributes regarding AST nodes\n  helpers: {\n    // a mustache is definitely a helper if:\n    // * it is an eligible helper, and\n    // * it has at least one parameter or hash segment\n    helperExpression: function(node) {\n      return (\n        node.type === 'SubExpression' ||\n        ((node.type === 'MustacheStatement' ||\n          node.type === 'BlockStatement') &&\n          !!((node.params && node.params.length) || node.hash))\n      );\n    },\n\n    scopedId: function(path) {\n      return /^\\.|this\\b/.test(path.original);\n    },\n\n    // an ID is simple if it only has one part, and that part is not\n    // `..` or `this`.\n    simpleId: function(path) {\n      return (\n        path.parts.length === 1 && !AST.helpers.scopedId(path) && !path.depth\n      );\n    }\n  }\n};\n\n// Must be exported as an object rather than the root of the module as the jison lexer\n// must modify the object to operate properly.\nexport default AST;\n","import parser from './parser';\nimport WhitespaceControl from './whitespace-control';\nimport * as Helpers from './helpers';\nimport { extend } from '../utils';\n\nexport { parser };\n\nlet yy = {};\nextend(yy, Helpers);\n\nexport function parseWithoutProcessing(input, options) {\n  // Just return if an already-compiled AST was passed in.\n  if (input.type === 'Program') {\n    return input;\n  }\n\n  parser.yy = yy;\n\n  // Altering the shared object here, but this is ok as parser is a sync operation\n  yy.locInfo = function(locInfo) {\n    return new yy.SourceLocation(options && options.srcName, locInfo);\n  };\n\n  let ast = parser.parse(input);\n\n  return ast;\n}\n\nexport function parse(input, options) {\n  let ast = parseWithoutProcessing(input, options);\n  let strip = new WhitespaceControl(options);\n\n  return strip.accept(ast);\n}\n","// File ignored in coverage tests via setting in .istanbul.yml\n/* Jison generated parser */\nvar handlebars = (function(){\nvar parser = {trace: function trace () { },\nyy: {},\nsymbols_: {\"error\":2,\"root\":3,\"program\":4,\"EOF\":5,\"program_repetition0\":6,\"statement\":7,\"mustache\":8,\"block\":9,\"rawBlock\":10,\"partial\":11,\"partialBlock\":12,\"content\":13,\"COMMENT\":14,\"CONTENT\":15,\"openRawBlock\":16,\"rawBlock_repetition0\":17,\"END_RAW_BLOCK\":18,\"OPEN_RAW_BLOCK\":19,\"helperName\":20,\"openRawBlock_repetition0\":21,\"openRawBlock_option0\":22,\"CLOSE_RAW_BLOCK\":23,\"openBlock\":24,\"block_option0\":25,\"closeBlock\":26,\"openInverse\":27,\"block_option1\":28,\"OPEN_BLOCK\":29,\"openBlock_repetition0\":30,\"openBlock_option0\":31,\"openBlock_option1\":32,\"CLOSE\":33,\"OPEN_INVERSE\":34,\"openInverse_repetition0\":35,\"openInverse_option0\":36,\"openInverse_option1\":37,\"openInverseChain\":38,\"OPEN_INVERSE_CHAIN\":39,\"openInverseChain_repetition0\":40,\"openInverseChain_option0\":41,\"openInverseChain_option1\":42,\"inverseAndProgram\":43,\"INVERSE\":44,\"inverseChain\":45,\"inverseChain_option0\":46,\"OPEN_ENDBLOCK\":47,\"OPEN\":48,\"mustache_repetition0\":49,\"mustache_option0\":50,\"OPEN_UNESCAPED\":51,\"mustache_repetition1\":52,\"mustache_option1\":53,\"CLOSE_UNESCAPED\":54,\"OPEN_PARTIAL\":55,\"partialName\":56,\"partial_repetition0\":57,\"partial_option0\":58,\"openPartialBlock\":59,\"OPEN_PARTIAL_BLOCK\":60,\"openPartialBlock_repetition0\":61,\"openPartialBlock_option0\":62,\"param\":63,\"sexpr\":64,\"OPEN_SEXPR\":65,\"sexpr_repetition0\":66,\"sexpr_option0\":67,\"CLOSE_SEXPR\":68,\"hash\":69,\"hash_repetition_plus0\":70,\"hashSegment\":71,\"ID\":72,\"EQUALS\":73,\"blockParams\":74,\"OPEN_BLOCK_PARAMS\":75,\"blockParams_repetition_plus0\":76,\"CLOSE_BLOCK_PARAMS\":77,\"path\":78,\"dataName\":79,\"STRING\":80,\"NUMBER\":81,\"BOOLEAN\":82,\"UNDEFINED\":83,\"NULL\":84,\"DATA\":85,\"pathSegments\":86,\"SEP\":87,\"$accept\":0,\"$end\":1},\nterminals_: {2:\"error\",5:\"EOF\",14:\"COMMENT\",15:\"CONTENT\",18:\"END_RAW_BLOCK\",19:\"OPEN_RAW_BLOCK\",23:\"CLOSE_RAW_BLOCK\",29:\"OPEN_BLOCK\",33:\"CLOSE\",34:\"OPEN_INVERSE\",39:\"OPEN_INVERSE_CHAIN\",44:\"INVERSE\",47:\"OPEN_ENDBLOCK\",48:\"OPEN\",51:\"OPEN_UNESCAPED\",54:\"CLOSE_UNESCAPED\",55:\"OPEN_PARTIAL\",60:\"OPEN_PARTIAL_BLOCK\",65:\"OPEN_SEXPR\",68:\"CLOSE_SEXPR\",72:\"ID\",73:\"EQUALS\",75:\"OPEN_BLOCK_PARAMS\",77:\"CLOSE_BLOCK_PARAMS\",80:\"STRING\",81:\"NUMBER\",82:\"BOOLEAN\",83:\"UNDEFINED\",84:\"NULL\",85:\"DATA\",87:\"SEP\"},\nproductions_: [0,[3,2],[4,1],[7,1],[7,1],[7,1],[7,1],[7,1],[7,1],[7,1],[13,1],[10,3],[16,5],[9,4],[9,4],[24,6],[27,6],[38,6],[43,2],[45,3],[45,1],[26,3],[8,5],[8,5],[11,5],[12,3],[59,5],[63,1],[63,1],[64,5],[69,1],[71,3],[74,3],[20,1],[20,1],[20,1],[20,1],[20,1],[20,1],[20,1],[56,1],[56,1],[79,2],[78,1],[86,3],[86,1],[6,0],[6,2],[17,0],[17,2],[21,0],[21,2],[22,0],[22,1],[25,0],[25,1],[28,0],[28,1],[30,0],[30,2],[31,0],[31,1],[32,0],[32,1],[35,0],[35,2],[36,0],[36,1],[37,0],[37,1],[40,0],[40,2],[41,0],[41,1],[42,0],[42,1],[46,0],[46,1],[49,0],[49,2],[50,0],[50,1],[52,0],[52,2],[53,0],[53,1],[57,0],[57,2],[58,0],[58,1],[61,0],[61,2],[62,0],[62,1],[66,0],[66,2],[67,0],[67,1],[70,1],[70,2],[76,1],[76,2]],\nperformAction: function anonymous(yytext,yyleng,yylineno,yy,yystate,$$,_$\n) {\n\nvar $0 = $$.length - 1;\nswitch (yystate) {\ncase 1: return $$[$0-1]; \nbreak;\ncase 2:this.$ = yy.prepareProgram($$[$0]);\nbreak;\ncase 3:this.$ = $$[$0];\nbreak;\ncase 4:this.$ = $$[$0];\nbreak;\ncase 5:this.$ = $$[$0];\nbreak;\ncase 6:this.$ = $$[$0];\nbreak;\ncase 7:this.$ = $$[$0];\nbreak;\ncase 8:this.$ = $$[$0];\nbreak;\ncase 9:\n    this.$ = {\n      type: 'CommentStatement',\n      value: yy.stripComment($$[$0]),\n      strip: yy.stripFlags($$[$0], $$[$0]),\n      loc: yy.locInfo(this._$)\n    };\n  \nbreak;\ncase 10:\n    this.$ = {\n      type: 'ContentStatement',\n      original: $$[$0],\n      value: $$[$0],\n      loc: yy.locInfo(this._$)\n    };\n  \nbreak;\ncase 11:this.$ = yy.prepareRawBlock($$[$0-2], $$[$0-1], $$[$0], this._$);\nbreak;\ncase 12:this.$ = { path: $$[$0-3], params: $$[$0-2], hash: $$[$0-1] };\nbreak;\ncase 13:this.$ = yy.prepareBlock($$[$0-3], $$[$0-2], $$[$0-1], $$[$0], false, this._$);\nbreak;\ncase 14:this.$ = yy.prepareBlock($$[$0-3], $$[$0-2], $$[$0-1], $$[$0], true, this._$);\nbreak;\ncase 15:this.$ = { open: $$[$0-5], path: $$[$0-4], params: $$[$0-3], hash: $$[$0-2], blockParams: $$[$0-1], strip: yy.stripFlags($$[$0-5], $$[$0]) };\nbreak;\ncase 16:this.$ = { path: $$[$0-4], params: $$[$0-3], hash: $$[$0-2], blockParams: $$[$0-1], strip: yy.stripFlags($$[$0-5], $$[$0]) };\nbreak;\ncase 17:this.$ = { path: $$[$0-4], params: $$[$0-3], hash: $$[$0-2], blockParams: $$[$0-1], strip: yy.stripFlags($$[$0-5], $$[$0]) };\nbreak;\ncase 18:this.$ = { strip: yy.stripFlags($$[$0-1], $$[$0-1]), program: $$[$0] };\nbreak;\ncase 19:\n    var inverse = yy.prepareBlock($$[$0-2], $$[$0-1], $$[$0], $$[$0], false, this._$),\n        program = yy.prepareProgram([inverse], $$[$0-1].loc);\n    program.chained = true;\n\n    this.$ = { strip: $$[$0-2].strip, program: program, chain: true };\n  \nbreak;\ncase 20:this.$ = $$[$0];\nbreak;\ncase 21:this.$ = {path: $$[$0-1], strip: yy.stripFlags($$[$0-2], $$[$0])};\nbreak;\ncase 22:this.$ = yy.prepareMustache($$[$0-3], $$[$0-2], $$[$0-1], $$[$0-4], yy.stripFlags($$[$0-4], $$[$0]), this._$);\nbreak;\ncase 23:this.$ = yy.prepareMustache($$[$0-3], $$[$0-2], $$[$0-1], $$[$0-4], yy.stripFlags($$[$0-4], $$[$0]), this._$);\nbreak;\ncase 24:\n    this.$ = {\n      type: 'PartialStatement',\n      name: $$[$0-3],\n      params: $$[$0-2],\n      hash: $$[$0-1],\n      indent: '',\n      strip: yy.stripFlags($$[$0-4], $$[$0]),\n      loc: yy.locInfo(this._$)\n    };\n  \nbreak;\ncase 25:this.$ = yy.preparePartialBlock($$[$0-2], $$[$0-1], $$[$0], this._$);\nbreak;\ncase 26:this.$ = { path: $$[$0-3], params: $$[$0-2], hash: $$[$0-1], strip: yy.stripFlags($$[$0-4], $$[$0]) };\nbreak;\ncase 27:this.$ = $$[$0];\nbreak;\ncase 28:this.$ = $$[$0];\nbreak;\ncase 29:\n    this.$ = {\n      type: 'SubExpression',\n      path: $$[$0-3],\n      params: $$[$0-2],\n      hash: $$[$0-1],\n      loc: yy.locInfo(this._$)\n    };\n  \nbreak;\ncase 30:this.$ = {type: 'Hash', pairs: $$[$0], loc: yy.locInfo(this._$)};\nbreak;\ncase 31:this.$ = {type: 'HashPair', key: yy.id($$[$0-2]), value: $$[$0], loc: yy.locInfo(this._$)};\nbreak;\ncase 32:this.$ = yy.id($$[$0-1]);\nbreak;\ncase 33:this.$ = $$[$0];\nbreak;\ncase 34:this.$ = $$[$0];\nbreak;\ncase 35:this.$ = {type: 'StringLiteral', value: $$[$0], original: $$[$0], loc: yy.locInfo(this._$)};\nbreak;\ncase 36:this.$ = {type: 'NumberLiteral', value: Number($$[$0]), original: Number($$[$0]), loc: yy.locInfo(this._$)};\nbreak;\ncase 37:this.$ = {type: 'BooleanLiteral', value: $$[$0] === 'true', original: $$[$0] === 'true', loc: yy.locInfo(this._$)};\nbreak;\ncase 38:this.$ = {type: 'UndefinedLiteral', original: undefined, value: undefined, loc: yy.locInfo(this._$)};\nbreak;\ncase 39:this.$ = {type: 'NullLiteral', original: null, value: null, loc: yy.locInfo(this._$)};\nbreak;\ncase 40:this.$ = $$[$0];\nbreak;\ncase 41:this.$ = $$[$0];\nbreak;\ncase 42:this.$ = yy.preparePath(true, $$[$0], this._$);\nbreak;\ncase 43:this.$ = yy.preparePath(false, $$[$0], this._$);\nbreak;\ncase 44: $$[$0-2].push({part: yy.id($$[$0]), original: $$[$0], separator: $$[$0-1]}); this.$ = $$[$0-2]; \nbreak;\ncase 45:this.$ = [{part: yy.id($$[$0]), original: $$[$0]}];\nbreak;\ncase 46:this.$ = [];\nbreak;\ncase 47:$$[$0-1].push($$[$0]);\nbreak;\ncase 48:this.$ = [];\nbreak;\ncase 49:$$[$0-1].push($$[$0]);\nbreak;\ncase 50:this.$ = [];\nbreak;\ncase 51:$$[$0-1].push($$[$0]);\nbreak;\ncase 58:this.$ = [];\nbreak;\ncase 59:$$[$0-1].push($$[$0]);\nbreak;\ncase 64:this.$ = [];\nbreak;\ncase 65:$$[$0-1].push($$[$0]);\nbreak;\ncase 70:this.$ = [];\nbreak;\ncase 71:$$[$0-1].push($$[$0]);\nbreak;\ncase 78:this.$ = [];\nbreak;\ncase 79:$$[$0-1].push($$[$0]);\nbreak;\ncase 82:this.$ = [];\nbreak;\ncase 83:$$[$0-1].push($$[$0]);\nbreak;\ncase 86:this.$ = [];\nbreak;\ncase 87:$$[$0-1].push($$[$0]);\nbreak;\ncase 90:this.$ = [];\nbreak;\ncase 91:$$[$0-1].push($$[$0]);\nbreak;\ncase 94:this.$ = [];\nbreak;\ncase 95:$$[$0-1].push($$[$0]);\nbreak;\ncase 98:this.$ = [$$[$0]];\nbreak;\ncase 99:$$[$0-1].push($$[$0]);\nbreak;\ncase 100:this.$ = [$$[$0]];\nbreak;\ncase 101:$$[$0-1].push($$[$0]);\nbreak;\n}\n},\ntable: [{3:1,4:2,5:[2,46],6:3,14:[2,46],15:[2,46],19:[2,46],29:[2,46],34:[2,46],48:[2,46],51:[2,46],55:[2,46],60:[2,46]},{1:[3]},{5:[1,4]},{5:[2,2],7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:[1,12],15:[1,20],16:17,19:[1,23],24:15,27:16,29:[1,21],34:[1,22],39:[2,2],44:[2,2],47:[2,2],48:[1,13],51:[1,14],55:[1,18],59:19,60:[1,24]},{1:[2,1]},{5:[2,47],14:[2,47],15:[2,47],19:[2,47],29:[2,47],34:[2,47],39:[2,47],44:[2,47],47:[2,47],48:[2,47],51:[2,47],55:[2,47],60:[2,47]},{5:[2,3],14:[2,3],15:[2,3],19:[2,3],29:[2,3],34:[2,3],39:[2,3],44:[2,3],47:[2,3],48:[2,3],51:[2,3],55:[2,3],60:[2,3]},{5:[2,4],14:[2,4],15:[2,4],19:[2,4],29:[2,4],34:[2,4],39:[2,4],44:[2,4],47:[2,4],48:[2,4],51:[2,4],55:[2,4],60:[2,4]},{5:[2,5],14:[2,5],15:[2,5],19:[2,5],29:[2,5],34:[2,5],39:[2,5],44:[2,5],47:[2,5],48:[2,5],51:[2,5],55:[2,5],60:[2,5]},{5:[2,6],14:[2,6],15:[2,6],19:[2,6],29:[2,6],34:[2,6],39:[2,6],44:[2,6],47:[2,6],48:[2,6],51:[2,6],55:[2,6],60:[2,6]},{5:[2,7],14:[2,7],15:[2,7],19:[2,7],29:[2,7],34:[2,7],39:[2,7],44:[2,7],47:[2,7],48:[2,7],51:[2,7],55:[2,7],60:[2,7]},{5:[2,8],14:[2,8],15:[2,8],19:[2,8],29:[2,8],34:[2,8],39:[2,8],44:[2,8],47:[2,8],48:[2,8],51:[2,8],55:[2,8],60:[2,8]},{5:[2,9],14:[2,9],15:[2,9],19:[2,9],29:[2,9],34:[2,9],39:[2,9],44:[2,9],47:[2,9],48:[2,9],51:[2,9],55:[2,9],60:[2,9]},{20:25,72:[1,35],78:26,79:27,80:[1,28],81:[1,29],82:[1,30],83:[1,31],84:[1,32],85:[1,34],86:33},{20:36,72:[1,35],78:26,79:27,80:[1,28],81:[1,29],82:[1,30],83:[1,31],84:[1,32],85:[1,34],86:33},{4:37,6:3,14:[2,46],15:[2,46],19:[2,46],29:[2,46],34:[2,46],39:[2,46],44:[2,46],47:[2,46],48:[2,46],51:[2,46],55:[2,46],60:[2,46]},{4:38,6:3,14:[2,46],15:[2,46],19:[2,46],29:[2,46],34:[2,46],44:[2,46],47:[2,46],48:[2,46],51:[2,46],55:[2,46],60:[2,46]},{15:[2,48],17:39,18:[2,48]},{20:41,56:40,64:42,65:[1,43],72:[1,35],78:26,79:27,80:[1,28],81:[1,29],82:[1,30],83:[1,31],84:[1,32],85:[1,34],86:33},{4:44,6:3,14:[2,46],15:[2,46],19:[2,46],29:[2,46],34:[2,46],47:[2,46],48:[2,46],51:[2,46],55:[2,46],60:[2,46]},{5:[2,10],14:[2,10],15:[2,10],18:[2,10],19:[2,10],29:[2,10],34:[2,10],39:[2,10],44:[2,10],47:[2,10],48:[2,10],51:[2,10],55:[2,10],60:[2,10]},{20:45,72:[1,35],78:26,79:27,80:[1,28],81:[1,29],82:[1,30],83:[1,31],84:[1,32],85:[1,34],86:33},{20:46,72:[1,35],78:26,79:27,80:[1,28],81:[1,29],82:[1,30],83:[1,31],84:[1,32],85:[1,34],86:33},{20:47,72:[1,35],78:26,79:27,80:[1,28],81:[1,29],82:[1,30],83:[1,31],84:[1,32],85:[1,34],86:33},{20:41,56:48,64:42,65:[1,43],72:[1,35],78:26,79:27,80:[1,28],81:[1,29],82:[1,30],83:[1,31],84:[1,32],85:[1,34],86:33},{33:[2,78],49:49,65:[2,78],72:[2,78],80:[2,78],81:[2,78],82:[2,78],83:[2,78],84:[2,78],85:[2,78]},{23:[2,33],33:[2,33],54:[2,33],65:[2,33],68:[2,33],72:[2,33],75:[2,33],80:[2,33],81:[2,33],82:[2,33],83:[2,33],84:[2,33],85:[2,33]},{23:[2,34],33:[2,34],54:[2,34],65:[2,34],68:[2,34],72:[2,34],75:[2,34],80:[2,34],81:[2,34],82:[2,34],83:[2,34],84:[2,34],85:[2,34]},{23:[2,35],33:[2,35],54:[2,35],65:[2,35],68:[2,35],72:[2,35],75:[2,35],80:[2,35],81:[2,35],82:[2,35],83:[2,35],84:[2,35],85:[2,35]},{23:[2,36],33:[2,36],54:[2,36],65:[2,36],68:[2,36],72:[2,36],75:[2,36],80:[2,36],81:[2,36],82:[2,36],83:[2,36],84:[2,36],85:[2,36]},{23:[2,37],33:[2,37],54:[2,37],65:[2,37],68:[2,37],72:[2,37],75:[2,37],80:[2,37],81:[2,37],82:[2,37],83:[2,37],84:[2,37],85:[2,37]},{23:[2,38],33:[2,38],54:[2,38],65:[2,38],68:[2,38],72:[2,38],75:[2,38],80:[2,38],81:[2,38],82:[2,38],83:[2,38],84:[2,38],85:[2,38]},{23:[2,39],33:[2,39],54:[2,39],65:[2,39],68:[2,39],72:[2,39],75:[2,39],80:[2,39],81:[2,39],82:[2,39],83:[2,39],84:[2,39],85:[2,39]},{23:[2,43],33:[2,43],54:[2,43],65:[2,43],68:[2,43],72:[2,43],75:[2,43],80:[2,43],81:[2,43],82:[2,43],83:[2,43],84:[2,43],85:[2,43],87:[1,50]},{72:[1,35],86:51},{23:[2,45],33:[2,45],54:[2,45],65:[2,45],68:[2,45],72:[2,45],75:[2,45],80:[2,45],81:[2,45],82:[2,45],83:[2,45],84:[2,45],85:[2,45],87:[2,45]},{52:52,54:[2,82],65:[2,82],72:[2,82],80:[2,82],81:[2,82],82:[2,82],83:[2,82],84:[2,82],85:[2,82]},{25:53,38:55,39:[1,57],43:56,44:[1,58],45:54,47:[2,54]},{28:59,43:60,44:[1,58],47:[2,56]},{13:62,15:[1,20],18:[1,61]},{33:[2,86],57:63,65:[2,86],72:[2,86],80:[2,86],81:[2,86],82:[2,86],83:[2,86],84:[2,86],85:[2,86]},{33:[2,40],65:[2,40],72:[2,40],80:[2,40],81:[2,40],82:[2,40],83:[2,40],84:[2,40],85:[2,40]},{33:[2,41],65:[2,41],72:[2,41],80:[2,41],81:[2,41],82:[2,41],83:[2,41],84:[2,41],85:[2,41]},{20:64,72:[1,35],78:26,79:27,80:[1,28],81:[1,29],82:[1,30],83:[1,31],84:[1,32],85:[1,34],86:33},{26:65,47:[1,66]},{30:67,33:[2,58],65:[2,58],72:[2,58],75:[2,58],80:[2,58],81:[2,58],82:[2,58],83:[2,58],84:[2,58],85:[2,58]},{33:[2,64],35:68,65:[2,64],72:[2,64],75:[2,64],80:[2,64],81:[2,64],82:[2,64],83:[2,64],84:[2,64],85:[2,64]},{21:69,23:[2,50],65:[2,50],72:[2,50],80:[2,50],81:[2,50],82:[2,50],83:[2,50],84:[2,50],85:[2,50]},{33:[2,90],61:70,65:[2,90],72:[2,90],80:[2,90],81:[2,90],82:[2,90],83:[2,90],84:[2,90],85:[2,90]},{20:74,33:[2,80],50:71,63:72,64:75,65:[1,43],69:73,70:76,71:77,72:[1,78],78:26,79:27,80:[1,28],81:[1,29],82:[1,30],83:[1,31],84:[1,32],85:[1,34],86:33},{72:[1,79]},{23:[2,42],33:[2,42],54:[2,42],65:[2,42],68:[2,42],72:[2,42],75:[2,42],80:[2,42],81:[2,42],82:[2,42],83:[2,42],84:[2,42],85:[2,42],87:[1,50]},{20:74,53:80,54:[2,84],63:81,64:75,65:[1,43],69:82,70:76,71:77,72:[1,78],78:26,79:27,80:[1,28],81:[1,29],82:[1,30],83:[1,31],84:[1,32],85:[1,34],86:33},{26:83,47:[1,66]},{47:[2,55]},{4:84,6:3,14:[2,46],15:[2,46],19:[2,46],29:[2,46],34:[2,46],39:[2,46],44:[2,46],47:[2,46],48:[2,46],51:[2,46],55:[2,46],60:[2,46]},{47:[2,20]},{20:85,72:[1,35],78:26,79:27,80:[1,28],81:[1,29],82:[1,30],83:[1,31],84:[1,32],85:[1,34],86:33},{4:86,6:3,14:[2,46],15:[2,46],19:[2,46],29:[2,46],34:[2,46],47:[2,46],48:[2,46],51:[2,46],55:[2,46],60:[2,46]},{26:87,47:[1,66]},{47:[2,57]},{5:[2,11],14:[2,11],15:[2,11],19:[2,11],29:[2,11],34:[2,11],39:[2,11],44:[2,11],47:[2,11],48:[2,11],51:[2,11],55:[2,11],60:[2,11]},{15:[2,49],18:[2,49]},{20:74,33:[2,88],58:88,63:89,64:75,65:[1,43],69:90,70:76,71:77,72:[1,78],78:26,79:27,80:[1,28],81:[1,29],82:[1,30],83:[1,31],84:[1,32],85:[1,34],86:33},{65:[2,94],66:91,68:[2,94],72:[2,94],80:[2,94],81:[2,94],82:[2,94],83:[2,94],84:[2,94],85:[2,94]},{5:[2,25],14:[2,25],15:[2,25],19:[2,25],29:[2,25],34:[2,25],39:[2,25],44:[2,25],47:[2,25],48:[2,25],51:[2,25],55:[2,25],60:[2,25]},{20:92,72:[1,35],78:26,79:27,80:[1,28],81:[1,29],82:[1,30],83:[1,31],84:[1,32],85:[1,34],86:33},{20:74,31:93,33:[2,60],63:94,64:75,65:[1,43],69:95,70:76,71:77,72:[1,78],75:[2,60],78:26,79:27,80:[1,28],81:[1,29],82:[1,30],83:[1,31],84:[1,32],85:[1,34],86:33},{20:74,33:[2,66],36:96,63:97,64:75,65:[1,43],69:98,70:76,71:77,72:[1,78],75:[2,66],78:26,79:27,80:[1,28],81:[1,29],82:[1,30],83:[1,31],84:[1,32],85:[1,34],86:33},{20:74,22:99,23:[2,52],63:100,64:75,65:[1,43],69:101,70:76,71:77,72:[1,78],78:26,79:27,80:[1,28],81:[1,29],82:[1,30],83:[1,31],84:[1,32],85:[1,34],86:33},{20:74,33:[2,92],62:102,63:103,64:75,65:[1,43],69:104,70:76,71:77,72:[1,78],78:26,79:27,80:[1,28],81:[1,29],82:[1,30],83:[1,31],84:[1,32],85:[1,34],86:33},{33:[1,105]},{33:[2,79],65:[2,79],72:[2,79],80:[2,79],81:[2,79],82:[2,79],83:[2,79],84:[2,79],85:[2,79]},{33:[2,81]},{23:[2,27],33:[2,27],54:[2,27],65:[2,27],68:[2,27],72:[2,27],75:[2,27],80:[2,27],81:[2,27],82:[2,27],83:[2,27],84:[2,27],85:[2,27]},{23:[2,28],33:[2,28],54:[2,28],65:[2,28],68:[2,28],72:[2,28],75:[2,28],80:[2,28],81:[2,28],82:[2,28],83:[2,28],84:[2,28],85:[2,28]},{23:[2,30],33:[2,30],54:[2,30],68:[2,30],71:106,72:[1,107],75:[2,30]},{23:[2,98],33:[2,98],54:[2,98],68:[2,98],72:[2,98],75:[2,98]},{23:[2,45],33:[2,45],54:[2,45],65:[2,45],68:[2,45],72:[2,45],73:[1,108],75:[2,45],80:[2,45],81:[2,45],82:[2,45],83:[2,45],84:[2,45],85:[2,45],87:[2,45]},{23:[2,44],33:[2,44],54:[2,44],65:[2,44],68:[2,44],72:[2,44],75:[2,44],80:[2,44],81:[2,44],82:[2,44],83:[2,44],84:[2,44],85:[2,44],87:[2,44]},{54:[1,109]},{54:[2,83],65:[2,83],72:[2,83],80:[2,83],81:[2,83],82:[2,83],83:[2,83],84:[2,83],85:[2,83]},{54:[2,85]},{5:[2,13],14:[2,13],15:[2,13],19:[2,13],29:[2,13],34:[2,13],39:[2,13],44:[2,13],47:[2,13],48:[2,13],51:[2,13],55:[2,13],60:[2,13]},{38:55,39:[1,57],43:56,44:[1,58],45:111,46:110,47:[2,76]},{33:[2,70],40:112,65:[2,70],72:[2,70],75:[2,70],80:[2,70],81:[2,70],82:[2,70],83:[2,70],84:[2,70],85:[2,70]},{47:[2,18]},{5:[2,14],14:[2,14],15:[2,14],19:[2,14],29:[2,14],34:[2,14],39:[2,14],44:[2,14],47:[2,14],48:[2,14],51:[2,14],55:[2,14],60:[2,14]},{33:[1,113]},{33:[2,87],65:[2,87],72:[2,87],80:[2,87],81:[2,87],82:[2,87],83:[2,87],84:[2,87],85:[2,87]},{33:[2,89]},{20:74,63:115,64:75,65:[1,43],67:114,68:[2,96],69:116,70:76,71:77,72:[1,78],78:26,79:27,80:[1,28],81:[1,29],82:[1,30],83:[1,31],84:[1,32],85:[1,34],86:33},{33:[1,117]},{32:118,33:[2,62],74:119,75:[1,120]},{33:[2,59],65:[2,59],72:[2,59],75:[2,59],80:[2,59],81:[2,59],82:[2,59],83:[2,59],84:[2,59],85:[2,59]},{33:[2,61],75:[2,61]},{33:[2,68],37:121,74:122,75:[1,120]},{33:[2,65],65:[2,65],72:[2,65],75:[2,65],80:[2,65],81:[2,65],82:[2,65],83:[2,65],84:[2,65],85:[2,65]},{33:[2,67],75:[2,67]},{23:[1,123]},{23:[2,51],65:[2,51],72:[2,51],80:[2,51],81:[2,51],82:[2,51],83:[2,51],84:[2,51],85:[2,51]},{23:[2,53]},{33:[1,124]},{33:[2,91],65:[2,91],72:[2,91],80:[2,91],81:[2,91],82:[2,91],83:[2,91],84:[2,91],85:[2,91]},{33:[2,93]},{5:[2,22],14:[2,22],15:[2,22],19:[2,22],29:[2,22],34:[2,22],39:[2,22],44:[2,22],47:[2,22],48:[2,22],51:[2,22],55:[2,22],60:[2,22]},{23:[2,99],33:[2,99],54:[2,99],68:[2,99],72:[2,99],75:[2,99]},{73:[1,108]},{20:74,63:125,64:75,65:[1,43],72:[1,35],78:26,79:27,80:[1,28],81:[1,29],82:[1,30],83:[1,31],84:[1,32],85:[1,34],86:33},{5:[2,23],14:[2,23],15:[2,23],19:[2,23],29:[2,23],34:[2,23],39:[2,23],44:[2,23],47:[2,23],48:[2,23],51:[2,23],55:[2,23],60:[2,23]},{47:[2,19]},{47:[2,77]},{20:74,33:[2,72],41:126,63:127,64:75,65:[1,43],69:128,70:76,71:77,72:[1,78],75:[2,72],78:26,79:27,80:[1,28],81:[1,29],82:[1,30],83:[1,31],84:[1,32],85:[1,34],86:33},{5:[2,24],14:[2,24],15:[2,24],19:[2,24],29:[2,24],34:[2,24],39:[2,24],44:[2,24],47:[2,24],48:[2,24],51:[2,24],55:[2,24],60:[2,24]},{68:[1,129]},{65:[2,95],68:[2,95],72:[2,95],80:[2,95],81:[2,95],82:[2,95],83:[2,95],84:[2,95],85:[2,95]},{68:[2,97]},{5:[2,21],14:[2,21],15:[2,21],19:[2,21],29:[2,21],34:[2,21],39:[2,21],44:[2,21],47:[2,21],48:[2,21],51:[2,21],55:[2,21],60:[2,21]},{33:[1,130]},{33:[2,63]},{72:[1,132],76:131},{33:[1,133]},{33:[2,69]},{15:[2,12],18:[2,12]},{14:[2,26],15:[2,26],19:[2,26],29:[2,26],34:[2,26],47:[2,26],48:[2,26],51:[2,26],55:[2,26],60:[2,26]},{23:[2,31],33:[2,31],54:[2,31],68:[2,31],72:[2,31],75:[2,31]},{33:[2,74],42:134,74:135,75:[1,120]},{33:[2,71],65:[2,71],72:[2,71],75:[2,71],80:[2,71],81:[2,71],82:[2,71],83:[2,71],84:[2,71],85:[2,71]},{33:[2,73],75:[2,73]},{23:[2,29],33:[2,29],54:[2,29],65:[2,29],68:[2,29],72:[2,29],75:[2,29],80:[2,29],81:[2,29],82:[2,29],83:[2,29],84:[2,29],85:[2,29]},{14:[2,15],15:[2,15],19:[2,15],29:[2,15],34:[2,15],39:[2,15],44:[2,15],47:[2,15],48:[2,15],51:[2,15],55:[2,15],60:[2,15]},{72:[1,137],77:[1,136]},{72:[2,100],77:[2,100]},{14:[2,16],15:[2,16],19:[2,16],29:[2,16],34:[2,16],44:[2,16],47:[2,16],48:[2,16],51:[2,16],55:[2,16],60:[2,16]},{33:[1,138]},{33:[2,75]},{33:[2,32]},{72:[2,101],77:[2,101]},{14:[2,17],15:[2,17],19:[2,17],29:[2,17],34:[2,17],39:[2,17],44:[2,17],47:[2,17],48:[2,17],51:[2,17],55:[2,17],60:[2,17]}],\ndefaultActions: {4:[2,1],54:[2,55],56:[2,20],60:[2,57],73:[2,81],82:[2,85],86:[2,18],90:[2,89],101:[2,53],104:[2,93],110:[2,19],111:[2,77],116:[2,97],119:[2,63],122:[2,69],135:[2,75],136:[2,32]},\nparseError: function parseError (str, hash) {\n    throw new Error(str);\n},\nparse: function parse(input) {\n    var self = this, stack = [0], vstack = [null], lstack = [], table = this.table, yytext = \"\", yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;\n    this.lexer.setInput(input);\n    this.lexer.yy = this.yy;\n    this.yy.lexer = this.lexer;\n    this.yy.parser = this;\n    if (typeof this.lexer.yylloc == \"undefined\")\n        this.lexer.yylloc = {};\n    var yyloc = this.lexer.yylloc;\n    lstack.push(yyloc);\n    var ranges = this.lexer.options && this.lexer.options.ranges;\n    if (typeof this.yy.parseError === \"function\")\n        this.parseError = this.yy.parseError;\n    function popStack(n) {\n        stack.length = stack.length - 2 * n;\n        vstack.length = vstack.length - n;\n        lstack.length = lstack.length - n;\n    }\n    function lex() {\n        var token;\n        token = self.lexer.lex() || 1;\n        if (typeof token !== \"number\") {\n            token = self.symbols_[token] || token;\n        }\n        return token;\n    }\n    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;\n    while (true) {\n        state = stack[stack.length - 1];\n        if (this.defaultActions[state]) {\n            action = this.defaultActions[state];\n        } else {\n            if (symbol === null || typeof symbol == \"undefined\") {\n                symbol = lex();\n            }\n            action = table[state] && table[state][symbol];\n        }\n        if (typeof action === \"undefined\" || !action.length || !action[0]) {\n            var errStr = \"\";\n            if (!recovering) {\n                expected = [];\n                for (p in table[state])\n                    if (this.terminals_[p] && p > 2) {\n                        expected.push(\"'\" + this.terminals_[p] + \"'\");\n                    }\n                if (this.lexer.showPosition) {\n                    errStr = \"Parse error on line \" + (yylineno + 1) + \":\\n\" + this.lexer.showPosition() + \"\\nExpecting \" + expected.join(\", \") + \", got '\" + (this.terminals_[symbol] || symbol) + \"'\";\n                } else {\n                    errStr = \"Parse error on line \" + (yylineno + 1) + \": Unexpected \" + (symbol == 1?\"end of input\":\"'\" + (this.terminals_[symbol] || symbol) + \"'\");\n                }\n                this.parseError(errStr, {text: this.lexer.match, token: this.terminals_[symbol] || symbol, line: this.lexer.yylineno, loc: yyloc, expected: expected});\n            }\n        }\n        if (action[0] instanceof Array && action.length > 1) {\n            throw new Error(\"Parse Error: multiple actions possible at state: \" + state + \", token: \" + symbol);\n        }\n        switch (action[0]) {\n        case 1:\n            stack.push(symbol);\n            vstack.push(this.lexer.yytext);\n            lstack.push(this.lexer.yylloc);\n            stack.push(action[1]);\n            symbol = null;\n            if (!preErrorSymbol) {\n                yyleng = this.lexer.yyleng;\n                yytext = this.lexer.yytext;\n                yylineno = this.lexer.yylineno;\n                yyloc = this.lexer.yylloc;\n                if (recovering > 0)\n                    recovering--;\n            } else {\n                symbol = preErrorSymbol;\n                preErrorSymbol = null;\n            }\n            break;\n        case 2:\n            len = this.productions_[action[1]][1];\n            yyval.$ = vstack[vstack.length - len];\n            yyval._$ = {first_line: lstack[lstack.length - (len || 1)].first_line, last_line: lstack[lstack.length - 1].last_line, first_column: lstack[lstack.length - (len || 1)].first_column, last_column: lstack[lstack.length - 1].last_column};\n            if (ranges) {\n                yyval._$.range = [lstack[lstack.length - (len || 1)].range[0], lstack[lstack.length - 1].range[1]];\n            }\n            r = this.performAction.call(yyval, yytext, yyleng, yylineno, this.yy, action[1], vstack, lstack);\n            if (typeof r !== \"undefined\") {\n                return r;\n            }\n            if (len) {\n                stack = stack.slice(0, -1 * len * 2);\n                vstack = vstack.slice(0, -1 * len);\n                lstack = lstack.slice(0, -1 * len);\n            }\n            stack.push(this.productions_[action[1]][0]);\n            vstack.push(yyval.$);\n            lstack.push(yyval._$);\n            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];\n            stack.push(newState);\n            break;\n        case 3:\n            return true;\n        }\n    }\n    return true;\n}\n};\n/* Jison generated lexer */\nvar lexer = (function(){\nvar lexer = ({EOF:1,\nparseError:function parseError(str, hash) {\n        if (this.yy.parser) {\n            this.yy.parser.parseError(str, hash);\n        } else {\n            throw new Error(str);\n        }\n    },\nsetInput:function (input) {\n        this._input = input;\n        this._more = this._less = this.done = false;\n        this.yylineno = this.yyleng = 0;\n        this.yytext = this.matched = this.match = '';\n        this.conditionStack = ['INITIAL'];\n        this.yylloc = {first_line:1,first_column:0,last_line:1,last_column:0};\n        if (this.options.ranges) this.yylloc.range = [0,0];\n        this.offset = 0;\n        return this;\n    },\ninput:function () {\n        var ch = this._input[0];\n        this.yytext += ch;\n        this.yyleng++;\n        this.offset++;\n        this.match += ch;\n        this.matched += ch;\n        var lines = ch.match(/(?:\\r\\n?|\\n).*/g);\n        if (lines) {\n            this.yylineno++;\n            this.yylloc.last_line++;\n        } else {\n            this.yylloc.last_column++;\n        }\n        if (this.options.ranges) this.yylloc.range[1]++;\n\n        this._input = this._input.slice(1);\n        return ch;\n    },\nunput:function (ch) {\n        var len = ch.length;\n        var lines = ch.split(/(?:\\r\\n?|\\n)/g);\n\n        this._input = ch + this._input;\n        this.yytext = this.yytext.substr(0, this.yytext.length-len-1);\n        //this.yyleng -= len;\n        this.offset -= len;\n        var oldLines = this.match.split(/(?:\\r\\n?|\\n)/g);\n        this.match = this.match.substr(0, this.match.length-1);\n        this.matched = this.matched.substr(0, this.matched.length-1);\n\n        if (lines.length-1) this.yylineno -= lines.length-1;\n        var r = this.yylloc.range;\n\n        this.yylloc = {first_line: this.yylloc.first_line,\n          last_line: this.yylineno+1,\n          first_column: this.yylloc.first_column,\n          last_column: lines ?\n              (lines.length === oldLines.length ? this.yylloc.first_column : 0) + oldLines[oldLines.length - lines.length].length - lines[0].length:\n              this.yylloc.first_column - len\n          };\n\n        if (this.options.ranges) {\n            this.yylloc.range = [r[0], r[0] + this.yyleng - len];\n        }\n        return this;\n    },\nmore:function () {\n        this._more = true;\n        return this;\n    },\nless:function (n) {\n        this.unput(this.match.slice(n));\n    },\npastInput:function () {\n        var past = this.matched.substr(0, this.matched.length - this.match.length);\n        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\\n/g, \"\");\n    },\nupcomingInput:function () {\n        var next = this.match;\n        if (next.length < 20) {\n            next += this._input.substr(0, 20-next.length);\n        }\n        return (next.substr(0,20)+(next.length > 20 ? '...':'')).replace(/\\n/g, \"\");\n    },\nshowPosition:function () {\n        var pre = this.pastInput();\n        var c = new Array(pre.length + 1).join(\"-\");\n        return pre + this.upcomingInput() + \"\\n\" + c+\"^\";\n    },\nnext:function () {\n        if (this.done) {\n            return this.EOF;\n        }\n        if (!this._input) this.done = true;\n\n        var token,\n            match,\n            tempMatch,\n            index,\n            col,\n            lines;\n        if (!this._more) {\n            this.yytext = '';\n            this.match = '';\n        }\n        var rules = this._currentRules();\n        for (var i=0;i < rules.length; i++) {\n            tempMatch = this._input.match(this.rules[rules[i]]);\n            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {\n                match = tempMatch;\n                index = i;\n                if (!this.options.flex) break;\n            }\n        }\n        if (match) {\n            lines = match[0].match(/(?:\\r\\n?|\\n).*/g);\n            if (lines) this.yylineno += lines.length;\n            this.yylloc = {first_line: this.yylloc.last_line,\n                           last_line: this.yylineno+1,\n                           first_column: this.yylloc.last_column,\n                           last_column: lines ? lines[lines.length-1].length-lines[lines.length-1].match(/\\r?\\n?/)[0].length : this.yylloc.last_column + match[0].length};\n            this.yytext += match[0];\n            this.match += match[0];\n            this.matches = match;\n            this.yyleng = this.yytext.length;\n            if (this.options.ranges) {\n                this.yylloc.range = [this.offset, this.offset += this.yyleng];\n            }\n            this._more = false;\n            this._input = this._input.slice(match[0].length);\n            this.matched += match[0];\n            token = this.performAction.call(this, this.yy, this, rules[index],this.conditionStack[this.conditionStack.length-1]);\n            if (this.done && this._input) this.done = false;\n            if (token) return token;\n            else return;\n        }\n        if (this._input === \"\") {\n            return this.EOF;\n        } else {\n            return this.parseError('Lexical error on line '+(this.yylineno+1)+'. Unrecognized text.\\n'+this.showPosition(),\n                    {text: \"\", token: null, line: this.yylineno});\n        }\n    },\nlex:function lex () {\n        var r = this.next();\n        if (typeof r !== 'undefined') {\n            return r;\n        } else {\n            return this.lex();\n        }\n    },\nbegin:function begin (condition) {\n        this.conditionStack.push(condition);\n    },\npopState:function popState () {\n        return this.conditionStack.pop();\n    },\n_currentRules:function _currentRules () {\n        return this.conditions[this.conditionStack[this.conditionStack.length-1]].rules;\n    },\ntopState:function () {\n        return this.conditionStack[this.conditionStack.length-2];\n    },\npushState:function begin (condition) {\n        this.begin(condition);\n    }});\nlexer.options = {};\nlexer.performAction = function anonymous(yy,yy_,$avoiding_name_collisions,YY_START\n) {\n\n\nfunction strip(start, end) {\n  return yy_.yytext = yy_.yytext.substring(start, yy_.yyleng - end + start);\n}\n\n\nvar YYSTATE=YY_START\nswitch($avoiding_name_collisions) {\ncase 0:\n                                   if(yy_.yytext.slice(-2) === \"\\\\\\\\\") {\n                                     strip(0,1);\n                                     this.begin(\"mu\");\n                                   } else if(yy_.yytext.slice(-1) === \"\\\\\") {\n                                     strip(0,1);\n                                     this.begin(\"emu\");\n                                   } else {\n                                     this.begin(\"mu\");\n                                   }\n                                   if(yy_.yytext) return 15;\n                                 \nbreak;\ncase 1:return 15;\nbreak;\ncase 2:\n                                   this.popState();\n                                   return 15;\n                                 \nbreak;\ncase 3:this.begin('raw'); return 15;\nbreak;\ncase 4:\n                                  this.popState();\n                                  // Should be using `this.topState()` below, but it currently\n                                  // returns the second top instead of the first top. Opened an\n                                  // issue about it at https://github.com/zaach/jison/issues/291\n                                  if (this.conditionStack[this.conditionStack.length-1] === 'raw') {\n                                    return 15;\n                                  } else {\n                                    strip(5, 9);\n                                    return 'END_RAW_BLOCK';\n                                  }\n                                 \nbreak;\ncase 5: return 15; \nbreak;\ncase 6:\n  this.popState();\n  return 14;\n\nbreak;\ncase 7:return 65;\nbreak;\ncase 8:return 68;\nbreak;\ncase 9: return 19; \nbreak;\ncase 10:\n                                  this.popState();\n                                  this.begin('raw');\n                                  return 23;\n                                 \nbreak;\ncase 11:return 55;\nbreak;\ncase 12:return 60;\nbreak;\ncase 13:return 29;\nbreak;\ncase 14:return 47;\nbreak;\ncase 15:this.popState(); return 44;\nbreak;\ncase 16:this.popState(); return 44;\nbreak;\ncase 17:return 34;\nbreak;\ncase 18:return 39;\nbreak;\ncase 19:return 51;\nbreak;\ncase 20:return 48;\nbreak;\ncase 21:\n  this.unput(yy_.yytext);\n  this.popState();\n  this.begin('com');\n\nbreak;\ncase 22:\n  this.popState();\n  return 14;\n\nbreak;\ncase 23:return 48;\nbreak;\ncase 24:return 73;\nbreak;\ncase 25:return 72;\nbreak;\ncase 26:return 72;\nbreak;\ncase 27:return 87;\nbreak;\ncase 28:// ignore whitespace\nbreak;\ncase 29:this.popState(); return 54;\nbreak;\ncase 30:this.popState(); return 33;\nbreak;\ncase 31:yy_.yytext = strip(1,2).replace(/\\\\\"/g,'\"'); return 80;\nbreak;\ncase 32:yy_.yytext = strip(1,2).replace(/\\\\'/g,\"'\"); return 80;\nbreak;\ncase 33:return 85;\nbreak;\ncase 34:return 82;\nbreak;\ncase 35:return 82;\nbreak;\ncase 36:return 83;\nbreak;\ncase 37:return 84;\nbreak;\ncase 38:return 81;\nbreak;\ncase 39:return 75;\nbreak;\ncase 40:return 77;\nbreak;\ncase 41:return 72;\nbreak;\ncase 42:yy_.yytext = yy_.yytext.replace(/\\\\([\\\\\\]])/g,'$1'); return 72;\nbreak;\ncase 43:return 'INVALID';\nbreak;\ncase 44:return 5;\nbreak;\n}\n};\nlexer.rules = [/^(?:[^\\x00]*?(?=(\\{\\{)))/,/^(?:[^\\x00]+)/,/^(?:[^\\x00]{2,}?(?=(\\{\\{|\\\\\\{\\{|\\\\\\\\\\{\\{|$)))/,/^(?:\\{\\{\\{\\{(?=[^\\/]))/,/^(?:\\{\\{\\{\\{\\/[^\\s!\"#%-,\\.\\/;->@\\[-\\^`\\{-~]+(?=[=}\\s\\/.])\\}\\}\\}\\})/,/^(?:[^\\x00]+?(?=(\\{\\{\\{\\{)))/,/^(?:[\\s\\S]*?--(~)?\\}\\})/,/^(?:\\()/,/^(?:\\))/,/^(?:\\{\\{\\{\\{)/,/^(?:\\}\\}\\}\\})/,/^(?:\\{\\{(~)?>)/,/^(?:\\{\\{(~)?#>)/,/^(?:\\{\\{(~)?#\\*?)/,/^(?:\\{\\{(~)?\\/)/,/^(?:\\{\\{(~)?\\^\\s*(~)?\\}\\})/,/^(?:\\{\\{(~)?\\s*else\\s*(~)?\\}\\})/,/^(?:\\{\\{(~)?\\^)/,/^(?:\\{\\{(~)?\\s*else\\b)/,/^(?:\\{\\{(~)?\\{)/,/^(?:\\{\\{(~)?&)/,/^(?:\\{\\{(~)?!--)/,/^(?:\\{\\{(~)?![\\s\\S]*?\\}\\})/,/^(?:\\{\\{(~)?\\*?)/,/^(?:=)/,/^(?:\\.\\.)/,/^(?:\\.(?=([=~}\\s\\/.)|])))/,/^(?:[\\/.])/,/^(?:\\s+)/,/^(?:\\}(~)?\\}\\})/,/^(?:(~)?\\}\\})/,/^(?:\"(\\\\[\"]|[^\"])*\")/,/^(?:'(\\\\[']|[^'])*')/,/^(?:@)/,/^(?:true(?=([~}\\s)])))/,/^(?:false(?=([~}\\s)])))/,/^(?:undefined(?=([~}\\s)])))/,/^(?:null(?=([~}\\s)])))/,/^(?:-?[0-9]+(?:\\.[0-9]+)?(?=([~}\\s)])))/,/^(?:as\\s+\\|)/,/^(?:\\|)/,/^(?:([^\\s!\"#%-,\\.\\/;->@\\[-\\^`\\{-~]+(?=([=~}\\s\\/.)|]))))/,/^(?:\\[(\\\\\\]|[^\\]])*\\])/,/^(?:.)/,/^(?:$)/];\nlexer.conditions = {\"mu\":{\"rules\":[7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44],\"inclusive\":false},\"emu\":{\"rules\":[2],\"inclusive\":false},\"com\":{\"rules\":[6],\"inclusive\":false},\"raw\":{\"rules\":[3,4,5],\"inclusive\":false},\"INITIAL\":{\"rules\":[0,1,44],\"inclusive\":true}};\nreturn lexer;})()\nparser.lexer = lexer;\nfunction Parser () { this.yy = {}; }Parser.prototype = parser;parser.Parser = Parser;\nreturn new Parser;\n})();export default handlebars;\n","import Visitor from './visitor';\n\nfunction WhitespaceControl(options = {}) {\n  this.options = options;\n}\nWhitespaceControl.prototype = new Visitor();\n\nWhitespaceControl.prototype.Program = function(program) {\n  const doStandalone = !this.options.ignoreStandalone;\n\n  let isRoot = !this.isRootSeen;\n  this.isRootSeen = true;\n\n  let body = program.body;\n  for (let i = 0, l = body.length; i < l; i++) {\n    let current = body[i],\n      strip = this.accept(current);\n\n    if (!strip) {\n      continue;\n    }\n\n    let _isPrevWhitespace = isPrevWhitespace(body, i, isRoot),\n      _isNextWhitespace = isNextWhitespace(body, i, isRoot),\n      openStandalone = strip.openStandalone && _isPrevWhitespace,\n      closeStandalone = strip.closeStandalone && _isNextWhitespace,\n      inlineStandalone =\n        strip.inlineStandalone && _isPrevWhitespace && _isNextWhitespace;\n\n    if (strip.close) {\n      omitRight(body, i, true);\n    }\n    if (strip.open) {\n      omitLeft(body, i, true);\n    }\n\n    if (doStandalone && inlineStandalone) {\n      omitRight(body, i);\n\n      if (omitLeft(body, i)) {\n        // If we are on a standalone node, save the indent info for partials\n        if (current.type === 'PartialStatement') {\n          // Pull out the whitespace from the final line\n          current.indent = /([ \\t]+$)/.exec(body[i - 1].original)[1];\n        }\n      }\n    }\n    if (doStandalone && openStandalone) {\n      omitRight((current.program || current.inverse).body);\n\n      // Strip out the previous content node if it's whitespace only\n      omitLeft(body, i);\n    }\n    if (doStandalone && closeStandalone) {\n      // Always strip the next node\n      omitRight(body, i);\n\n      omitLeft((current.inverse || current.program).body);\n    }\n  }\n\n  return program;\n};\n\nWhitespaceControl.prototype.BlockStatement = WhitespaceControl.prototype.DecoratorBlock = WhitespaceControl.prototype.PartialBlockStatement = function(\n  block\n) {\n  this.accept(block.program);\n  this.accept(block.inverse);\n\n  // Find the inverse program that is involed with whitespace stripping.\n  let program = block.program || block.inverse,\n    inverse = block.program && block.inverse,\n    firstInverse = inverse,\n    lastInverse = inverse;\n\n  if (inverse && inverse.chained) {\n    firstInverse = inverse.body[0].program;\n\n    // Walk the inverse chain to find the last inverse that is actually in the chain.\n    while (lastInverse.chained) {\n      lastInverse = lastInverse.body[lastInverse.body.length - 1].program;\n    }\n  }\n\n  let strip = {\n    open: block.openStrip.open,\n    close: block.closeStrip.close,\n\n    // Determine the standalone candiacy. Basically flag our content as being possibly standalone\n    // so our parent can determine if we actually are standalone\n    openStandalone: isNextWhitespace(program.body),\n    closeStandalone: isPrevWhitespace((firstInverse || program).body)\n  };\n\n  if (block.openStrip.close) {\n    omitRight(program.body, null, true);\n  }\n\n  if (inverse) {\n    let inverseStrip = block.inverseStrip;\n\n    if (inverseStrip.open) {\n      omitLeft(program.body, null, true);\n    }\n\n    if (inverseStrip.close) {\n      omitRight(firstInverse.body, null, true);\n    }\n    if (block.closeStrip.open) {\n      omitLeft(lastInverse.body, null, true);\n    }\n\n    // Find standalone else statments\n    if (\n      !this.options.ignoreStandalone &&\n      isPrevWhitespace(program.body) &&\n      isNextWhitespace(firstInverse.body)\n    ) {\n      omitLeft(program.body);\n      omitRight(firstInverse.body);\n    }\n  } else if (block.closeStrip.open) {\n    omitLeft(program.body, null, true);\n  }\n\n  return strip;\n};\n\nWhitespaceControl.prototype.Decorator = WhitespaceControl.prototype.MustacheStatement = function(\n  mustache\n) {\n  return mustache.strip;\n};\n\nWhitespaceControl.prototype.PartialStatement = WhitespaceControl.prototype.CommentStatement = function(\n  node\n) {\n  /* istanbul ignore next */\n  let strip = node.strip || {};\n  return {\n    inlineStandalone: true,\n    open: strip.open,\n    close: strip.close\n  };\n};\n\nfunction isPrevWhitespace(body, i, isRoot) {\n  if (i === undefined) {\n    i = body.length;\n  }\n\n  // Nodes that end with newlines are considered whitespace (but are special\n  // cased for strip operations)\n  let prev = body[i - 1],\n    sibling = body[i - 2];\n  if (!prev) {\n    return isRoot;\n  }\n\n  if (prev.type === 'ContentStatement') {\n    return (sibling || !isRoot ? /\\r?\\n\\s*?$/ : /(^|\\r?\\n)\\s*?$/).test(\n      prev.original\n    );\n  }\n}\nfunction isNextWhitespace(body, i, isRoot) {\n  if (i === undefined) {\n    i = -1;\n  }\n\n  let next = body[i + 1],\n    sibling = body[i + 2];\n  if (!next) {\n    return isRoot;\n  }\n\n  if (next.type === 'ContentStatement') {\n    return (sibling || !isRoot ? /^\\s*?\\r?\\n/ : /^\\s*?(\\r?\\n|$)/).test(\n      next.original\n    );\n  }\n}\n\n// Marks the node to the right of the position as omitted.\n// I.e. {{foo}}' ' will mark the ' ' node as omitted.\n//\n// If i is undefined, then the first child will be marked as such.\n//\n// If mulitple is truthy then all whitespace will be stripped out until non-whitespace\n// content is met.\nfunction omitRight(body, i, multiple) {\n  let current = body[i == null ? 0 : i + 1];\n  if (\n    !current ||\n    current.type !== 'ContentStatement' ||\n    (!multiple && current.rightStripped)\n  ) {\n    return;\n  }\n\n  let original = current.value;\n  current.value = current.value.replace(\n    multiple ? /^\\s+/ : /^[ \\t]*\\r?\\n?/,\n    ''\n  );\n  current.rightStripped = current.value !== original;\n}\n\n// Marks the node to the left of the position as omitted.\n// I.e. ' '{{foo}} will mark the ' ' node as omitted.\n//\n// If i is undefined then the last child will be marked as such.\n//\n// If mulitple is truthy then all whitespace will be stripped out until non-whitespace\n// content is met.\nfunction omitLeft(body, i, multiple) {\n  let current = body[i == null ? body.length - 1 : i - 1];\n  if (\n    !current ||\n    current.type !== 'ContentStatement' ||\n    (!multiple && current.leftStripped)\n  ) {\n    return;\n  }\n\n  // We omit the last node if it's whitespace only and not preceded by a non-content node.\n  let original = current.value;\n  current.value = current.value.replace(multiple ? /\\s+$/ : /[ \\t]+$/, '');\n  current.leftStripped = current.value !== original;\n  return current.leftStripped;\n}\n\nexport default WhitespaceControl;\n","import Exception from '../exception';\n\nfunction Visitor() {\n  this.parents = [];\n}\n\nVisitor.prototype = {\n  constructor: Visitor,\n  mutating: false,\n\n  // Visits a given value. If mutating, will replace the value if necessary.\n  acceptKey: function(node, name) {\n    let value = this.accept(node[name]);\n    if (this.mutating) {\n      // Hacky sanity check: This may have a few false positives for type for the helper\n      // methods but will generally do the right thing without a lot of overhead.\n      if (value && !Visitor.prototype[value.type]) {\n        throw new Exception(\n          'Unexpected node type \"' +\n            value.type +\n            '\" found when accepting ' +\n            name +\n            ' on ' +\n            node.type\n        );\n      }\n      node[name] = value;\n    }\n  },\n\n  // Performs an accept operation with added sanity check to ensure\n  // required keys are not removed.\n  acceptRequired: function(node, name) {\n    this.acceptKey(node, name);\n\n    if (!node[name]) {\n      throw new Exception(node.type + ' requires ' + name);\n    }\n  },\n\n  // Traverses a given array. If mutating, empty respnses will be removed\n  // for child elements.\n  acceptArray: function(array) {\n    for (let i = 0, l = array.length; i < l; i++) {\n      this.acceptKey(array, i);\n\n      if (!array[i]) {\n        array.splice(i, 1);\n        i--;\n        l--;\n      }\n    }\n  },\n\n  accept: function(object) {\n    if (!object) {\n      return;\n    }\n\n    /* istanbul ignore next: Sanity code */\n    if (!this[object.type]) {\n      throw new Exception('Unknown type: ' + object.type, object);\n    }\n\n    if (this.current) {\n      this.parents.unshift(this.current);\n    }\n    this.current = object;\n\n    let ret = this[object.type](object);\n\n    this.current = this.parents.shift();\n\n    if (!this.mutating || ret) {\n      return ret;\n    } else if (ret !== false) {\n      return object;\n    }\n  },\n\n  Program: function(program) {\n    this.acceptArray(program.body);\n  },\n\n  MustacheStatement: visitSubExpression,\n  Decorator: visitSubExpression,\n\n  BlockStatement: visitBlock,\n  DecoratorBlock: visitBlock,\n\n  PartialStatement: visitPartial,\n  PartialBlockStatement: function(partial) {\n    visitPartial.call(this, partial);\n\n    this.acceptKey(partial, 'program');\n  },\n\n  ContentStatement: function(/* content */) {},\n  CommentStatement: function(/* comment */) {},\n\n  SubExpression: visitSubExpression,\n\n  PathExpression: function(/* path */) {},\n\n  StringLiteral: function(/* string */) {},\n  NumberLiteral: function(/* number */) {},\n  BooleanLiteral: function(/* bool */) {},\n  UndefinedLiteral: function(/* literal */) {},\n  NullLiteral: function(/* literal */) {},\n\n  Hash: function(hash) {\n    this.acceptArray(hash.pairs);\n  },\n  HashPair: function(pair) {\n    this.acceptRequired(pair, 'value');\n  }\n};\n\nfunction visitSubExpression(mustache) {\n  this.acceptRequired(mustache, 'path');\n  this.acceptArray(mustache.params);\n  this.acceptKey(mustache, 'hash');\n}\nfunction visitBlock(block) {\n  visitSubExpression.call(this, block);\n\n  this.acceptKey(block, 'program');\n  this.acceptKey(block, 'inverse');\n}\nfunction visitPartial(partial) {\n  this.acceptRequired(partial, 'name');\n  this.acceptArray(partial.params);\n  this.acceptKey(partial, 'hash');\n}\n\nexport default Visitor;\n","import Exception from '../exception';\n\nfunction validateClose(open, close) {\n  close = close.path ? close.path.original : close;\n\n  if (open.path.original !== close) {\n    let errorNode = { loc: open.path.loc };\n\n    throw new Exception(\n      open.path.original + \" doesn't match \" + close,\n      errorNode\n    );\n  }\n}\n\nexport function SourceLocation(source, locInfo) {\n  this.source = source;\n  this.start = {\n    line: locInfo.first_line,\n    column: locInfo.first_column\n  };\n  this.end = {\n    line: locInfo.last_line,\n    column: locInfo.last_column\n  };\n}\n\nexport function id(token) {\n  if (/^\\[.*\\]$/.test(token)) {\n    return token.substring(1, token.length - 1);\n  } else {\n    return token;\n  }\n}\n\nexport function stripFlags(open, close) {\n  return {\n    open: open.charAt(2) === '~',\n    close: close.charAt(close.length - 3) === '~'\n  };\n}\n\nexport function stripComment(comment) {\n  return comment.replace(/^\\{\\{~?!-?-?/, '').replace(/-?-?~?\\}\\}$/, '');\n}\n\nexport function preparePath(data, parts, loc) {\n  loc = this.locInfo(loc);\n\n  let original = data ? '@' : '',\n    dig = [],\n    depth = 0;\n\n  for (let i = 0, l = parts.length; i < l; i++) {\n    let part = parts[i].part,\n      // If we have [] syntax then we do not treat path references as operators,\n      // i.e. foo.[this] resolves to approximately context.foo['this']\n      isLiteral = parts[i].original !== part;\n    original += (parts[i].separator || '') + part;\n\n    if (!isLiteral && (part === '..' || part === '.' || part === 'this')) {\n      if (dig.length > 0) {\n        throw new Exception('Invalid path: ' + original, { loc });\n      } else if (part === '..') {\n        depth++;\n      }\n    } else {\n      dig.push(part);\n    }\n  }\n\n  return {\n    type: 'PathExpression',\n    data,\n    depth,\n    parts: dig,\n    original,\n    loc\n  };\n}\n\nexport function prepareMustache(path, params, hash, open, strip, locInfo) {\n  // Must use charAt to support IE pre-10\n  let escapeFlag = open.charAt(3) || open.charAt(2),\n    escaped = escapeFlag !== '{' && escapeFlag !== '&';\n\n  let decorator = /\\*/.test(open);\n  return {\n    type: decorator ? 'Decorator' : 'MustacheStatement',\n    path,\n    params,\n    hash,\n    escaped,\n    strip,\n    loc: this.locInfo(locInfo)\n  };\n}\n\nexport function prepareRawBlock(openRawBlock, contents, close, locInfo) {\n  validateClose(openRawBlock, close);\n\n  locInfo = this.locInfo(locInfo);\n  let program = {\n    type: 'Program',\n    body: contents,\n    strip: {},\n    loc: locInfo\n  };\n\n  return {\n    type: 'BlockStatement',\n    path: openRawBlock.path,\n    params: openRawBlock.params,\n    hash: openRawBlock.hash,\n    program,\n    openStrip: {},\n    inverseStrip: {},\n    closeStrip: {},\n    loc: locInfo\n  };\n}\n\nexport function prepareBlock(\n  openBlock,\n  program,\n  inverseAndProgram,\n  close,\n  inverted,\n  locInfo\n) {\n  if (close && close.path) {\n    validateClose(openBlock, close);\n  }\n\n  let decorator = /\\*/.test(openBlock.open);\n\n  program.blockParams = openBlock.blockParams;\n\n  let inverse, inverseStrip;\n\n  if (inverseAndProgram) {\n    if (decorator) {\n      throw new Exception(\n        'Unexpected inverse block on decorator',\n        inverseAndProgram\n      );\n    }\n\n    if (inverseAndProgram.chain) {\n      inverseAndProgram.program.body[0].closeStrip = close.strip;\n    }\n\n    inverseStrip = inverseAndProgram.strip;\n    inverse = inverseAndProgram.program;\n  }\n\n  if (inverted) {\n    inverted = inverse;\n    inverse = program;\n    program = inverted;\n  }\n\n  return {\n    type: decorator ? 'DecoratorBlock' : 'BlockStatement',\n    path: openBlock.path,\n    params: openBlock.params,\n    hash: openBlock.hash,\n    program,\n    inverse,\n    openStrip: openBlock.strip,\n    inverseStrip,\n    closeStrip: close && close.strip,\n    loc: this.locInfo(locInfo)\n  };\n}\n\nexport function prepareProgram(statements, loc) {\n  if (!loc && statements.length) {\n    const firstLoc = statements[0].loc,\n      lastLoc = statements[statements.length - 1].loc;\n\n    /* istanbul ignore else */\n    if (firstLoc && lastLoc) {\n      loc = {\n        source: firstLoc.source,\n        start: {\n          line: firstLoc.start.line,\n          column: firstLoc.start.column\n        },\n        end: {\n          line: lastLoc.end.line,\n          column: lastLoc.end.column\n        }\n      };\n    }\n  }\n\n  return {\n    type: 'Program',\n    body: statements,\n    strip: {},\n    loc: loc\n  };\n}\n\nexport function preparePartialBlock(open, program, close, locInfo) {\n  validateClose(open, close);\n\n  return {\n    type: 'PartialBlockStatement',\n    name: open.path,\n    params: open.params,\n    hash: open.hash,\n    program,\n    openStrip: open.strip,\n    closeStrip: close && close.strip,\n    loc: this.locInfo(locInfo)\n  };\n}\n","/* eslint-disable new-cap */\n\nimport Exception from '../exception';\nimport { isArray, indexOf, extend } from '../utils';\nimport AST from './ast';\n\nconst slice = [].slice;\n\nexport function Compiler() {}\n\n// the foundHelper register will disambiguate helper lookup from finding a\n// function in a context. This is necessary for mustache compatibility, which\n// requires that context functions in blocks are evaluated by blockHelperMissing,\n// and then proceed as if the resulting value was provided to blockHelperMissing.\n\nCompiler.prototype = {\n  compiler: Compiler,\n\n  equals: function(other) {\n    let len = this.opcodes.length;\n    if (other.opcodes.length !== len) {\n      return false;\n    }\n\n    for (let i = 0; i < len; i++) {\n      let opcode = this.opcodes[i],\n        otherOpcode = other.opcodes[i];\n      if (\n        opcode.opcode !== otherOpcode.opcode ||\n        !argEquals(opcode.args, otherOpcode.args)\n      ) {\n        return false;\n      }\n    }\n\n    // We know that length is the same between the two arrays because they are directly tied\n    // to the opcode behavior above.\n    len = this.children.length;\n    for (let i = 0; i < len; i++) {\n      if (!this.children[i].equals(other.children[i])) {\n        return false;\n      }\n    }\n\n    return true;\n  },\n\n  guid: 0,\n\n  compile: function(program, options) {\n    this.sourceNode = [];\n    this.opcodes = [];\n    this.children = [];\n    this.options = options;\n    this.stringParams = options.stringParams;\n    this.trackIds = options.trackIds;\n\n    options.blockParams = options.blockParams || [];\n\n    options.knownHelpers = extend(\n      Object.create(null),\n      {\n        helperMissing: true,\n        blockHelperMissing: true,\n        each: true,\n        if: true,\n        unless: true,\n        with: true,\n        log: true,\n        lookup: true\n      },\n      options.knownHelpers\n    );\n\n    return this.accept(program);\n  },\n\n  compileProgram: function(program) {\n    let childCompiler = new this.compiler(), // eslint-disable-line new-cap\n      result = childCompiler.compile(program, this.options),\n      guid = this.guid++;\n\n    this.usePartial = this.usePartial || result.usePartial;\n\n    this.children[guid] = result;\n    this.useDepths = this.useDepths || result.useDepths;\n\n    return guid;\n  },\n\n  accept: function(node) {\n    /* istanbul ignore next: Sanity code */\n    if (!this[node.type]) {\n      throw new Exception('Unknown type: ' + node.type, node);\n    }\n\n    this.sourceNode.unshift(node);\n    let ret = this[node.type](node);\n    this.sourceNode.shift();\n    return ret;\n  },\n\n  Program: function(program) {\n    this.options.blockParams.unshift(program.blockParams);\n\n    let body = program.body,\n      bodyLength = body.length;\n    for (let i = 0; i < bodyLength; i++) {\n      this.accept(body[i]);\n    }\n\n    this.options.blockParams.shift();\n\n    this.isSimple = bodyLength === 1;\n    this.blockParams = program.blockParams ? program.blockParams.length : 0;\n\n    return this;\n  },\n\n  BlockStatement: function(block) {\n    transformLiteralToPath(block);\n\n    let program = block.program,\n      inverse = block.inverse;\n\n    program = program && this.compileProgram(program);\n    inverse = inverse && this.compileProgram(inverse);\n\n    let type = this.classifySexpr(block);\n\n    if (type === 'helper') {\n      this.helperSexpr(block, program, inverse);\n    } else if (type === 'simple') {\n      this.simpleSexpr(block);\n\n      // now that the simple mustache is resolved, we need to\n      // evaluate it by executing `blockHelperMissing`\n      this.opcode('pushProgram', program);\n      this.opcode('pushProgram', inverse);\n      this.opcode('emptyHash');\n      this.opcode('blockValue', block.path.original);\n    } else {\n      this.ambiguousSexpr(block, program, inverse);\n\n      // now that the simple mustache is resolved, we need to\n      // evaluate it by executing `blockHelperMissing`\n      this.opcode('pushProgram', program);\n      this.opcode('pushProgram', inverse);\n      this.opcode('emptyHash');\n      this.opcode('ambiguousBlockValue');\n    }\n\n    this.opcode('append');\n  },\n\n  DecoratorBlock(decorator) {\n    let program = decorator.program && this.compileProgram(decorator.program);\n    let params = this.setupFullMustacheParams(decorator, program, undefined),\n      path = decorator.path;\n\n    this.useDecorators = true;\n    this.opcode('registerDecorator', params.length, path.original);\n  },\n\n  PartialStatement: function(partial) {\n    this.usePartial = true;\n\n    let program = partial.program;\n    if (program) {\n      program = this.compileProgram(partial.program);\n    }\n\n    let params = partial.params;\n    if (params.length > 1) {\n      throw new Exception(\n        'Unsupported number of partial arguments: ' + params.length,\n        partial\n      );\n    } else if (!params.length) {\n      if (this.options.explicitPartialContext) {\n        this.opcode('pushLiteral', 'undefined');\n      } else {\n        params.push({ type: 'PathExpression', parts: [], depth: 0 });\n      }\n    }\n\n    let partialName = partial.name.original,\n      isDynamic = partial.name.type === 'SubExpression';\n    if (isDynamic) {\n      this.accept(partial.name);\n    }\n\n    this.setupFullMustacheParams(partial, program, undefined, true);\n\n    let indent = partial.indent || '';\n    if (this.options.preventIndent && indent) {\n      this.opcode('appendContent', indent);\n      indent = '';\n    }\n\n    this.opcode('invokePartial', isDynamic, partialName, indent);\n    this.opcode('append');\n  },\n  PartialBlockStatement: function(partialBlock) {\n    this.PartialStatement(partialBlock);\n  },\n\n  MustacheStatement: function(mustache) {\n    this.SubExpression(mustache);\n\n    if (mustache.escaped && !this.options.noEscape) {\n      this.opcode('appendEscaped');\n    } else {\n      this.opcode('append');\n    }\n  },\n  Decorator(decorator) {\n    this.DecoratorBlock(decorator);\n  },\n\n  ContentStatement: function(content) {\n    if (content.value) {\n      this.opcode('appendContent', content.value);\n    }\n  },\n\n  CommentStatement: function() {},\n\n  SubExpression: function(sexpr) {\n    transformLiteralToPath(sexpr);\n    let type = this.classifySexpr(sexpr);\n\n    if (type === 'simple') {\n      this.simpleSexpr(sexpr);\n    } else if (type === 'helper') {\n      this.helperSexpr(sexpr);\n    } else {\n      this.ambiguousSexpr(sexpr);\n    }\n  },\n  ambiguousSexpr: function(sexpr, program, inverse) {\n    let path = sexpr.path,\n      name = path.parts[0],\n      isBlock = program != null || inverse != null;\n\n    this.opcode('getContext', path.depth);\n\n    this.opcode('pushProgram', program);\n    this.opcode('pushProgram', inverse);\n\n    path.strict = true;\n    this.accept(path);\n\n    this.opcode('invokeAmbiguous', name, isBlock);\n  },\n\n  simpleSexpr: function(sexpr) {\n    let path = sexpr.path;\n    path.strict = true;\n    this.accept(path);\n    this.opcode('resolvePossibleLambda');\n  },\n\n  helperSexpr: function(sexpr, program, inverse) {\n    let params = this.setupFullMustacheParams(sexpr, program, inverse),\n      path = sexpr.path,\n      name = path.parts[0];\n\n    if (this.options.knownHelpers[name]) {\n      this.opcode('invokeKnownHelper', params.length, name);\n    } else if (this.options.knownHelpersOnly) {\n      throw new Exception(\n        'You specified knownHelpersOnly, but used the unknown helper ' + name,\n        sexpr\n      );\n    } else {\n      path.strict = true;\n      path.falsy = true;\n\n      this.accept(path);\n      this.opcode(\n        'invokeHelper',\n        params.length,\n        path.original,\n        AST.helpers.simpleId(path)\n      );\n    }\n  },\n\n  PathExpression: function(path) {\n    this.addDepth(path.depth);\n    this.opcode('getContext', path.depth);\n\n    let name = path.parts[0],\n      scoped = AST.helpers.scopedId(path),\n      blockParamId = !path.depth && !scoped && this.blockParamIndex(name);\n\n    if (blockParamId) {\n      this.opcode('lookupBlockParam', blockParamId, path.parts);\n    } else if (!name) {\n      // Context reference, i.e. `{{foo .}}` or `{{foo ..}}`\n      this.opcode('pushContext');\n    } else if (path.data) {\n      this.options.data = true;\n      this.opcode('lookupData', path.depth, path.parts, path.strict);\n    } else {\n      this.opcode(\n        'lookupOnContext',\n        path.parts,\n        path.falsy,\n        path.strict,\n        scoped\n      );\n    }\n  },\n\n  StringLiteral: function(string) {\n    this.opcode('pushString', string.value);\n  },\n\n  NumberLiteral: function(number) {\n    this.opcode('pushLiteral', number.value);\n  },\n\n  BooleanLiteral: function(bool) {\n    this.opcode('pushLiteral', bool.value);\n  },\n\n  UndefinedLiteral: function() {\n    this.opcode('pushLiteral', 'undefined');\n  },\n\n  NullLiteral: function() {\n    this.opcode('pushLiteral', 'null');\n  },\n\n  Hash: function(hash) {\n    let pairs = hash.pairs,\n      i = 0,\n      l = pairs.length;\n\n    this.opcode('pushHash');\n\n    for (; i < l; i++) {\n      this.pushParam(pairs[i].value);\n    }\n    while (i--) {\n      this.opcode('assignToHash', pairs[i].key);\n    }\n    this.opcode('popHash');\n  },\n\n  // HELPERS\n  opcode: function(name) {\n    this.opcodes.push({\n      opcode: name,\n      args: slice.call(arguments, 1),\n      loc: this.sourceNode[0].loc\n    });\n  },\n\n  addDepth: function(depth) {\n    if (!depth) {\n      return;\n    }\n\n    this.useDepths = true;\n  },\n\n  classifySexpr: function(sexpr) {\n    let isSimple = AST.helpers.simpleId(sexpr.path);\n\n    let isBlockParam = isSimple && !!this.blockParamIndex(sexpr.path.parts[0]);\n\n    // a mustache is an eligible helper if:\n    // * its id is simple (a single part, not `this` or `..`)\n    let isHelper = !isBlockParam && AST.helpers.helperExpression(sexpr);\n\n    // if a mustache is an eligible helper but not a definite\n    // helper, it is ambiguous, and will be resolved in a later\n    // pass or at runtime.\n    let isEligible = !isBlockParam && (isHelper || isSimple);\n\n    // if ambiguous, we can possibly resolve the ambiguity now\n    // An eligible helper is one that does not have a complex path, i.e. `this.foo`, `../foo` etc.\n    if (isEligible && !isHelper) {\n      let name = sexpr.path.parts[0],\n        options = this.options;\n      if (options.knownHelpers[name]) {\n        isHelper = true;\n      } else if (options.knownHelpersOnly) {\n        isEligible = false;\n      }\n    }\n\n    if (isHelper) {\n      return 'helper';\n    } else if (isEligible) {\n      return 'ambiguous';\n    } else {\n      return 'simple';\n    }\n  },\n\n  pushParams: function(params) {\n    for (let i = 0, l = params.length; i < l; i++) {\n      this.pushParam(params[i]);\n    }\n  },\n\n  pushParam: function(val) {\n    let value = val.value != null ? val.value : val.original || '';\n\n    if (this.stringParams) {\n      if (value.replace) {\n        value = value.replace(/^(\\.?\\.\\/)*/g, '').replace(/\\//g, '.');\n      }\n\n      if (val.depth) {\n        this.addDepth(val.depth);\n      }\n      this.opcode('getContext', val.depth || 0);\n      this.opcode('pushStringParam', value, val.type);\n\n      if (val.type === 'SubExpression') {\n        // SubExpressions get evaluated and passed in\n        // in string params mode.\n        this.accept(val);\n      }\n    } else {\n      if (this.trackIds) {\n        let blockParamIndex;\n        if (val.parts && !AST.helpers.scopedId(val) && !val.depth) {\n          blockParamIndex = this.blockParamIndex(val.parts[0]);\n        }\n        if (blockParamIndex) {\n          let blockParamChild = val.parts.slice(1).join('.');\n          this.opcode('pushId', 'BlockParam', blockParamIndex, blockParamChild);\n        } else {\n          value = val.original || value;\n          if (value.replace) {\n            value = value\n              .replace(/^this(?:\\.|$)/, '')\n              .replace(/^\\.\\//, '')\n              .replace(/^\\.$/, '');\n          }\n\n          this.opcode('pushId', val.type, value);\n        }\n      }\n      this.accept(val);\n    }\n  },\n\n  setupFullMustacheParams: function(sexpr, program, inverse, omitEmpty) {\n    let params = sexpr.params;\n    this.pushParams(params);\n\n    this.opcode('pushProgram', program);\n    this.opcode('pushProgram', inverse);\n\n    if (sexpr.hash) {\n      this.accept(sexpr.hash);\n    } else {\n      this.opcode('emptyHash', omitEmpty);\n    }\n\n    return params;\n  },\n\n  blockParamIndex: function(name) {\n    for (\n      let depth = 0, len = this.options.blockParams.length;\n      depth < len;\n      depth++\n    ) {\n      let blockParams = this.options.blockParams[depth],\n        param = blockParams && indexOf(blockParams, name);\n      if (blockParams && param >= 0) {\n        return [depth, param];\n      }\n    }\n  }\n};\n\nexport function precompile(input, options, env) {\n  if (\n    input == null ||\n    (typeof input !== 'string' && input.type !== 'Program')\n  ) {\n    throw new Exception(\n      'You must pass a string or Handlebars AST to Handlebars.precompile. You passed ' +\n        input\n    );\n  }\n\n  options = options || {};\n  if (!('data' in options)) {\n    options.data = true;\n  }\n  if (options.compat) {\n    options.useDepths = true;\n  }\n\n  let ast = env.parse(input, options),\n    environment = new env.Compiler().compile(ast, options);\n  return new env.JavaScriptCompiler().compile(environment, options);\n}\n\nexport function compile(input, options = {}, env) {\n  if (\n    input == null ||\n    (typeof input !== 'string' && input.type !== 'Program')\n  ) {\n    throw new Exception(\n      'You must pass a string or Handlebars AST to Handlebars.compile. You passed ' +\n        input\n    );\n  }\n\n  options = extend({}, options);\n  if (!('data' in options)) {\n    options.data = true;\n  }\n  if (options.compat) {\n    options.useDepths = true;\n  }\n\n  let compiled;\n\n  function compileInput() {\n    let ast = env.parse(input, options),\n      environment = new env.Compiler().compile(ast, options),\n      templateSpec = new env.JavaScriptCompiler().compile(\n        environment,\n        options,\n        undefined,\n        true\n      );\n    return env.template(templateSpec);\n  }\n\n  // Template is only compiled on first use and cached after that point.\n  function ret(context, execOptions) {\n    if (!compiled) {\n      compiled = compileInput();\n    }\n    return compiled.call(this, context, execOptions);\n  }\n  ret._setup = function(setupOptions) {\n    if (!compiled) {\n      compiled = compileInput();\n    }\n    return compiled._setup(setupOptions);\n  };\n  ret._child = function(i, data, blockParams, depths) {\n    if (!compiled) {\n      compiled = compileInput();\n    }\n    return compiled._child(i, data, blockParams, depths);\n  };\n  return ret;\n}\n\nfunction argEquals(a, b) {\n  if (a === b) {\n    return true;\n  }\n\n  if (isArray(a) && isArray(b) && a.length === b.length) {\n    for (let i = 0; i < a.length; i++) {\n      if (!argEquals(a[i], b[i])) {\n        return false;\n      }\n    }\n    return true;\n  }\n}\n\nfunction transformLiteralToPath(sexpr) {\n  if (!sexpr.path.parts) {\n    let literal = sexpr.path;\n    // Casting to string here to make false and 0 literal values play nicely with the rest\n    // of the system.\n    sexpr.path = {\n      type: 'PathExpression',\n      data: false,\n      depth: 0,\n      parts: [literal.original + ''],\n      original: literal.original + '',\n      loc: literal.loc\n    };\n  }\n}\n","import { COMPILER_REVISION, REVISION_CHANGES } from '../base';\nimport Exception from '../exception';\nimport { isArray } from '../utils';\nimport CodeGen from './code-gen';\n\nfunction Literal(value) {\n  this.value = value;\n}\n\nfunction JavaScriptCompiler() {}\n\nJavaScriptCompiler.prototype = {\n  // PUBLIC API: You can override these methods in a subclass to provide\n  // alternative compiled forms for name lookup and buffering semantics\n  nameLookup: function(parent, name /*,  type */) {\n    return this.internalNameLookup(parent, name);\n  },\n  depthedLookup: function(name) {\n    return [\n      this.aliasable('container.lookup'),\n      '(depths, ',\n      JSON.stringify(name),\n      ')'\n    ];\n  },\n\n  compilerInfo: function() {\n    const revision = COMPILER_REVISION,\n      versions = REVISION_CHANGES[revision];\n    return [revision, versions];\n  },\n\n  appendToBuffer: function(source, location, explicit) {\n    // Force a source as this simplifies the merge logic.\n    if (!isArray(source)) {\n      source = [source];\n    }\n    source = this.source.wrap(source, location);\n\n    if (this.environment.isSimple) {\n      return ['return ', source, ';'];\n    } else if (explicit) {\n      // This is a case where the buffer operation occurs as a child of another\n      // construct, generally braces. We have to explicitly output these buffer\n      // operations to ensure that the emitted code goes in the correct location.\n      return ['buffer += ', source, ';'];\n    } else {\n      source.appendToBuffer = true;\n      return source;\n    }\n  },\n\n  initializeBuffer: function() {\n    return this.quotedString('');\n  },\n  // END PUBLIC API\n  internalNameLookup: function(parent, name) {\n    this.lookupPropertyFunctionIsUsed = true;\n    return ['lookupProperty(', parent, ',', JSON.stringify(name), ')'];\n  },\n\n  lookupPropertyFunctionIsUsed: false,\n\n  compile: function(environment, options, context, asObject) {\n    this.environment = environment;\n    this.options = options;\n    this.stringParams = this.options.stringParams;\n    this.trackIds = this.options.trackIds;\n    this.precompile = !asObject;\n\n    this.name = this.environment.name;\n    this.isChild = !!context;\n    this.context = context || {\n      decorators: [],\n      programs: [],\n      environments: []\n    };\n\n    this.preamble();\n\n    this.stackSlot = 0;\n    this.stackVars = [];\n    this.aliases = {};\n    this.registers = { list: [] };\n    this.hashes = [];\n    this.compileStack = [];\n    this.inlineStack = [];\n    this.blockParams = [];\n\n    this.compileChildren(environment, options);\n\n    this.useDepths =\n      this.useDepths ||\n      environment.useDepths ||\n      environment.useDecorators ||\n      this.options.compat;\n    this.useBlockParams = this.useBlockParams || environment.useBlockParams;\n\n    let opcodes = environment.opcodes,\n      opcode,\n      firstLoc,\n      i,\n      l;\n\n    for (i = 0, l = opcodes.length; i < l; i++) {\n      opcode = opcodes[i];\n\n      this.source.currentLocation = opcode.loc;\n      firstLoc = firstLoc || opcode.loc;\n      this[opcode.opcode].apply(this, opcode.args);\n    }\n\n    // Flush any trailing content that might be pending.\n    this.source.currentLocation = firstLoc;\n    this.pushSource('');\n\n    /* istanbul ignore next */\n    if (this.stackSlot || this.inlineStack.length || this.compileStack.length) {\n      throw new Exception('Compile completed with content left on stack');\n    }\n\n    if (!this.decorators.isEmpty()) {\n      this.useDecorators = true;\n\n      this.decorators.prepend([\n        'var decorators = container.decorators, ',\n        this.lookupPropertyFunctionVarDeclaration(),\n        ';\\n'\n      ]);\n      this.decorators.push('return fn;');\n\n      if (asObject) {\n        this.decorators = Function.apply(this, [\n          'fn',\n          'props',\n          'container',\n          'depth0',\n          'data',\n          'blockParams',\n          'depths',\n          this.decorators.merge()\n        ]);\n      } else {\n        this.decorators.prepend(\n          'function(fn, props, container, depth0, data, blockParams, depths) {\\n'\n        );\n        this.decorators.push('}\\n');\n        this.decorators = this.decorators.merge();\n      }\n    } else {\n      this.decorators = undefined;\n    }\n\n    let fn = this.createFunctionContext(asObject);\n    if (!this.isChild) {\n      let ret = {\n        compiler: this.compilerInfo(),\n        main: fn\n      };\n\n      if (this.decorators) {\n        ret.main_d = this.decorators; // eslint-disable-line camelcase\n        ret.useDecorators = true;\n      }\n\n      let { programs, decorators } = this.context;\n      for (i = 0, l = programs.length; i < l; i++) {\n        if (programs[i]) {\n          ret[i] = programs[i];\n          if (decorators[i]) {\n            ret[i + '_d'] = decorators[i];\n            ret.useDecorators = true;\n          }\n        }\n      }\n\n      if (this.environment.usePartial) {\n        ret.usePartial = true;\n      }\n      if (this.options.data) {\n        ret.useData = true;\n      }\n      if (this.useDepths) {\n        ret.useDepths = true;\n      }\n      if (this.useBlockParams) {\n        ret.useBlockParams = true;\n      }\n      if (this.options.compat) {\n        ret.compat = true;\n      }\n\n      if (!asObject) {\n        ret.compiler = JSON.stringify(ret.compiler);\n\n        this.source.currentLocation = { start: { line: 1, column: 0 } };\n        ret = this.objectLiteral(ret);\n\n        if (options.srcName) {\n          ret = ret.toStringWithSourceMap({ file: options.destName });\n          ret.map = ret.map && ret.map.toString();\n        } else {\n          ret = ret.toString();\n        }\n      } else {\n        ret.compilerOptions = this.options;\n      }\n\n      return ret;\n    } else {\n      return fn;\n    }\n  },\n\n  preamble: function() {\n    // track the last context pushed into place to allow skipping the\n    // getContext opcode when it would be a noop\n    this.lastContext = 0;\n    this.source = new CodeGen(this.options.srcName);\n    this.decorators = new CodeGen(this.options.srcName);\n  },\n\n  createFunctionContext: function(asObject) {\n    let varDeclarations = '';\n\n    let locals = this.stackVars.concat(this.registers.list);\n    if (locals.length > 0) {\n      varDeclarations += ', ' + locals.join(', ');\n    }\n\n    // Generate minimizer alias mappings\n    //\n    // When using true SourceNodes, this will update all references to the given alias\n    // as the source nodes are reused in situ. For the non-source node compilation mode,\n    // aliases will not be used, but this case is already being run on the client and\n    // we aren't concern about minimizing the template size.\n    let aliasCount = 0;\n    Object.keys(this.aliases).forEach(alias => {\n      let node = this.aliases[alias];\n      if (node.children && node.referenceCount > 1) {\n        varDeclarations += ', alias' + ++aliasCount + '=' + alias;\n        node.children[0] = 'alias' + aliasCount;\n      }\n    });\n\n    if (this.lookupPropertyFunctionIsUsed) {\n      varDeclarations += ', ' + this.lookupPropertyFunctionVarDeclaration();\n    }\n\n    let params = ['container', 'depth0', 'helpers', 'partials', 'data'];\n\n    if (this.useBlockParams || this.useDepths) {\n      params.push('blockParams');\n    }\n    if (this.useDepths) {\n      params.push('depths');\n    }\n\n    // Perform a second pass over the output to merge content when possible\n    let source = this.mergeSource(varDeclarations);\n\n    if (asObject) {\n      params.push(source);\n\n      return Function.apply(this, params);\n    } else {\n      return this.source.wrap([\n        'function(',\n        params.join(','),\n        ') {\\n  ',\n        source,\n        '}'\n      ]);\n    }\n  },\n  mergeSource: function(varDeclarations) {\n    let isSimple = this.environment.isSimple,\n      appendOnly = !this.forceBuffer,\n      appendFirst,\n      sourceSeen,\n      bufferStart,\n      bufferEnd;\n    this.source.each(line => {\n      if (line.appendToBuffer) {\n        if (bufferStart) {\n          line.prepend('  + ');\n        } else {\n          bufferStart = line;\n        }\n        bufferEnd = line;\n      } else {\n        if (bufferStart) {\n          if (!sourceSeen) {\n            appendFirst = true;\n          } else {\n            bufferStart.prepend('buffer += ');\n          }\n          bufferEnd.add(';');\n          bufferStart = bufferEnd = undefined;\n        }\n\n        sourceSeen = true;\n        if (!isSimple) {\n          appendOnly = false;\n        }\n      }\n    });\n\n    if (appendOnly) {\n      if (bufferStart) {\n        bufferStart.prepend('return ');\n        bufferEnd.add(';');\n      } else if (!sourceSeen) {\n        this.source.push('return \"\";');\n      }\n    } else {\n      varDeclarations +=\n        ', buffer = ' + (appendFirst ? '' : this.initializeBuffer());\n\n      if (bufferStart) {\n        bufferStart.prepend('return buffer + ');\n        bufferEnd.add(';');\n      } else {\n        this.source.push('return buffer;');\n      }\n    }\n\n    if (varDeclarations) {\n      this.source.prepend(\n        'var ' + varDeclarations.substring(2) + (appendFirst ? '' : ';\\n')\n      );\n    }\n\n    return this.source.merge();\n  },\n\n  lookupPropertyFunctionVarDeclaration: function() {\n    return `\n      lookupProperty = container.lookupProperty || function(parent, propertyName) {\n        if (Object.prototype.hasOwnProperty.call(parent, propertyName)) {\n          return parent[propertyName];\n        }\n        return undefined\n    }\n    `.trim();\n  },\n\n  // [blockValue]\n  //\n  // On stack, before: hash, inverse, program, value\n  // On stack, after: return value of blockHelperMissing\n  //\n  // The purpose of this opcode is to take a block of the form\n  // `{{#this.foo}}...{{/this.foo}}`, resolve the value of `foo`, and\n  // replace it on the stack with the result of properly\n  // invoking blockHelperMissing.\n  blockValue: function(name) {\n    let blockHelperMissing = this.aliasable(\n        'container.hooks.blockHelperMissing'\n      ),\n      params = [this.contextName(0)];\n    this.setupHelperArgs(name, 0, params);\n\n    let blockName = this.popStack();\n    params.splice(1, 0, blockName);\n\n    this.push(this.source.functionCall(blockHelperMissing, 'call', params));\n  },\n\n  // [ambiguousBlockValue]\n  //\n  // On stack, before: hash, inverse, program, value\n  // Compiler value, before: lastHelper=value of last found helper, if any\n  // On stack, after, if no lastHelper: same as [blockValue]\n  // On stack, after, if lastHelper: value\n  ambiguousBlockValue: function() {\n    // We're being a bit cheeky and reusing the options value from the prior exec\n    let blockHelperMissing = this.aliasable(\n        'container.hooks.blockHelperMissing'\n      ),\n      params = [this.contextName(0)];\n    this.setupHelperArgs('', 0, params, true);\n\n    this.flushInline();\n\n    let current = this.topStack();\n    params.splice(1, 0, current);\n\n    this.pushSource([\n      'if (!',\n      this.lastHelper,\n      ') { ',\n      current,\n      ' = ',\n      this.source.functionCall(blockHelperMissing, 'call', params),\n      '}'\n    ]);\n  },\n\n  // [appendContent]\n  //\n  // On stack, before: ...\n  // On stack, after: ...\n  //\n  // Appends the string value of `content` to the current buffer\n  appendContent: function(content) {\n    if (this.pendingContent) {\n      content = this.pendingContent + content;\n    } else {\n      this.pendingLocation = this.source.currentLocation;\n    }\n\n    this.pendingContent = content;\n  },\n\n  // [append]\n  //\n  // On stack, before: value, ...\n  // On stack, after: ...\n  //\n  // Coerces `value` to a String and appends it to the current buffer.\n  //\n  // If `value` is truthy, or 0, it is coerced into a string and appended\n  // Otherwise, the empty string is appended\n  append: function() {\n    if (this.isInline()) {\n      this.replaceStack(current => [' != null ? ', current, ' : \"\"']);\n\n      this.pushSource(this.appendToBuffer(this.popStack()));\n    } else {\n      let local = this.popStack();\n      this.pushSource([\n        'if (',\n        local,\n        ' != null) { ',\n        this.appendToBuffer(local, undefined, true),\n        ' }'\n      ]);\n      if (this.environment.isSimple) {\n        this.pushSource([\n          'else { ',\n          this.appendToBuffer(\"''\", undefined, true),\n          ' }'\n        ]);\n      }\n    }\n  },\n\n  // [appendEscaped]\n  //\n  // On stack, before: value, ...\n  // On stack, after: ...\n  //\n  // Escape `value` and append it to the buffer\n  appendEscaped: function() {\n    this.pushSource(\n      this.appendToBuffer([\n        this.aliasable('container.escapeExpression'),\n        '(',\n        this.popStack(),\n        ')'\n      ])\n    );\n  },\n\n  // [getContext]\n  //\n  // On stack, before: ...\n  // On stack, after: ...\n  // Compiler value, after: lastContext=depth\n  //\n  // Set the value of the `lastContext` compiler value to the depth\n  getContext: function(depth) {\n    this.lastContext = depth;\n  },\n\n  // [pushContext]\n  //\n  // On stack, before: ...\n  // On stack, after: currentContext, ...\n  //\n  // Pushes the value of the current context onto the stack.\n  pushContext: function() {\n    this.pushStackLiteral(this.contextName(this.lastContext));\n  },\n\n  // [lookupOnContext]\n  //\n  // On stack, before: ...\n  // On stack, after: currentContext[name], ...\n  //\n  // Looks up the value of `name` on the current context and pushes\n  // it onto the stack.\n  lookupOnContext: function(parts, falsy, strict, scoped) {\n    let i = 0;\n\n    if (!scoped && this.options.compat && !this.lastContext) {\n      // The depthed query is expected to handle the undefined logic for the root level that\n      // is implemented below, so we evaluate that directly in compat mode\n      this.push(this.depthedLookup(parts[i++]));\n    } else {\n      this.pushContext();\n    }\n\n    this.resolvePath('context', parts, i, falsy, strict);\n  },\n\n  // [lookupBlockParam]\n  //\n  // On stack, before: ...\n  // On stack, after: blockParam[name], ...\n  //\n  // Looks up the value of `parts` on the given block param and pushes\n  // it onto the stack.\n  lookupBlockParam: function(blockParamId, parts) {\n    this.useBlockParams = true;\n\n    this.push(['blockParams[', blockParamId[0], '][', blockParamId[1], ']']);\n    this.resolvePath('context', parts, 1);\n  },\n\n  // [lookupData]\n  //\n  // On stack, before: ...\n  // On stack, after: data, ...\n  //\n  // Push the data lookup operator\n  lookupData: function(depth, parts, strict) {\n    if (!depth) {\n      this.pushStackLiteral('data');\n    } else {\n      this.pushStackLiteral('container.data(data, ' + depth + ')');\n    }\n\n    this.resolvePath('data', parts, 0, true, strict);\n  },\n\n  resolvePath: function(type, parts, i, falsy, strict) {\n    if (this.options.strict || this.options.assumeObjects) {\n      this.push(strictLookup(this.options.strict && strict, this, parts, type));\n      return;\n    }\n\n    let len = parts.length;\n    for (; i < len; i++) {\n      /* eslint-disable no-loop-func */\n      this.replaceStack(current => {\n        let lookup = this.nameLookup(current, parts[i], type);\n        // We want to ensure that zero and false are handled properly if the context (falsy flag)\n        // needs to have the special handling for these values.\n        if (!falsy) {\n          return [' != null ? ', lookup, ' : ', current];\n        } else {\n          // Otherwise we can use generic falsy handling\n          return [' && ', lookup];\n        }\n      });\n      /* eslint-enable no-loop-func */\n    }\n  },\n\n  // [resolvePossibleLambda]\n  //\n  // On stack, before: value, ...\n  // On stack, after: resolved value, ...\n  //\n  // If the `value` is a lambda, replace it on the stack by\n  // the return value of the lambda\n  resolvePossibleLambda: function() {\n    this.push([\n      this.aliasable('container.lambda'),\n      '(',\n      this.popStack(),\n      ', ',\n      this.contextName(0),\n      ')'\n    ]);\n  },\n\n  // [pushStringParam]\n  //\n  // On stack, before: ...\n  // On stack, after: string, currentContext, ...\n  //\n  // This opcode is designed for use in string mode, which\n  // provides the string value of a parameter along with its\n  // depth rather than resolving it immediately.\n  pushStringParam: function(string, type) {\n    this.pushContext();\n    this.pushString(type);\n\n    // If it's a subexpression, the string result\n    // will be pushed after this opcode.\n    if (type !== 'SubExpression') {\n      if (typeof string === 'string') {\n        this.pushString(string);\n      } else {\n        this.pushStackLiteral(string);\n      }\n    }\n  },\n\n  emptyHash: function(omitEmpty) {\n    if (this.trackIds) {\n      this.push('{}'); // hashIds\n    }\n    if (this.stringParams) {\n      this.push('{}'); // hashContexts\n      this.push('{}'); // hashTypes\n    }\n    this.pushStackLiteral(omitEmpty ? 'undefined' : '{}');\n  },\n  pushHash: function() {\n    if (this.hash) {\n      this.hashes.push(this.hash);\n    }\n    this.hash = { values: {}, types: [], contexts: [], ids: [] };\n  },\n  popHash: function() {\n    let hash = this.hash;\n    this.hash = this.hashes.pop();\n\n    if (this.trackIds) {\n      this.push(this.objectLiteral(hash.ids));\n    }\n    if (this.stringParams) {\n      this.push(this.objectLiteral(hash.contexts));\n      this.push(this.objectLiteral(hash.types));\n    }\n\n    this.push(this.objectLiteral(hash.values));\n  },\n\n  // [pushString]\n  //\n  // On stack, before: ...\n  // On stack, after: quotedString(string), ...\n  //\n  // Push a quoted version of `string` onto the stack\n  pushString: function(string) {\n    this.pushStackLiteral(this.quotedString(string));\n  },\n\n  // [pushLiteral]\n  //\n  // On stack, before: ...\n  // On stack, after: value, ...\n  //\n  // Pushes a value onto the stack. This operation prevents\n  // the compiler from creating a temporary variable to hold\n  // it.\n  pushLiteral: function(value) {\n    this.pushStackLiteral(value);\n  },\n\n  // [pushProgram]\n  //\n  // On stack, before: ...\n  // On stack, after: program(guid), ...\n  //\n  // Push a program expression onto the stack. This takes\n  // a compile-time guid and converts it into a runtime-accessible\n  // expression.\n  pushProgram: function(guid) {\n    if (guid != null) {\n      this.pushStackLiteral(this.programExpression(guid));\n    } else {\n      this.pushStackLiteral(null);\n    }\n  },\n\n  // [registerDecorator]\n  //\n  // On stack, before: hash, program, params..., ...\n  // On stack, after: ...\n  //\n  // Pops off the decorator's parameters, invokes the decorator,\n  // and inserts the decorator into the decorators list.\n  registerDecorator(paramSize, name) {\n    let foundDecorator = this.nameLookup('decorators', name, 'decorator'),\n      options = this.setupHelperArgs(name, paramSize);\n\n    this.decorators.push([\n      'fn = ',\n      this.decorators.functionCall(foundDecorator, '', [\n        'fn',\n        'props',\n        'container',\n        options\n      ]),\n      ' || fn;'\n    ]);\n  },\n\n  // [invokeHelper]\n  //\n  // On stack, before: hash, inverse, program, params..., ...\n  // On stack, after: result of helper invocation\n  //\n  // Pops off the helper's parameters, invokes the helper,\n  // and pushes the helper's return value onto the stack.\n  //\n  // If the helper is not found, `helperMissing` is called.\n  invokeHelper: function(paramSize, name, isSimple) {\n    let nonHelper = this.popStack(),\n      helper = this.setupHelper(paramSize, name);\n\n    let possibleFunctionCalls = [];\n\n    if (isSimple) {\n      // direct call to helper\n      possibleFunctionCalls.push(helper.name);\n    }\n    // call a function from the input object\n    possibleFunctionCalls.push(nonHelper);\n    if (!this.options.strict) {\n      possibleFunctionCalls.push(\n        this.aliasable('container.hooks.helperMissing')\n      );\n    }\n\n    let functionLookupCode = [\n      '(',\n      this.itemsSeparatedBy(possibleFunctionCalls, '||'),\n      ')'\n    ];\n    let functionCall = this.source.functionCall(\n      functionLookupCode,\n      'call',\n      helper.callParams\n    );\n    this.push(functionCall);\n  },\n\n  itemsSeparatedBy: function(items, separator) {\n    let result = [];\n    result.push(items[0]);\n    for (let i = 1; i < items.length; i++) {\n      result.push(separator, items[i]);\n    }\n    return result;\n  },\n  // [invokeKnownHelper]\n  //\n  // On stack, before: hash, inverse, program, params..., ...\n  // On stack, after: result of helper invocation\n  //\n  // This operation is used when the helper is known to exist,\n  // so a `helperMissing` fallback is not required.\n  invokeKnownHelper: function(paramSize, name) {\n    let helper = this.setupHelper(paramSize, name);\n    this.push(this.source.functionCall(helper.name, 'call', helper.callParams));\n  },\n\n  // [invokeAmbiguous]\n  //\n  // On stack, before: hash, inverse, program, params..., ...\n  // On stack, after: result of disambiguation\n  //\n  // This operation is used when an expression like `{{foo}}`\n  // is provided, but we don't know at compile-time whether it\n  // is a helper or a path.\n  //\n  // This operation emits more code than the other options,\n  // and can be avoided by passing the `knownHelpers` and\n  // `knownHelpersOnly` flags at compile-time.\n  invokeAmbiguous: function(name, helperCall) {\n    this.useRegister('helper');\n\n    let nonHelper = this.popStack();\n\n    this.emptyHash();\n    let helper = this.setupHelper(0, name, helperCall);\n\n    let helperName = (this.lastHelper = this.nameLookup(\n      'helpers',\n      name,\n      'helper'\n    ));\n\n    let lookup = ['(', '(helper = ', helperName, ' || ', nonHelper, ')'];\n    if (!this.options.strict) {\n      lookup[0] = '(helper = ';\n      lookup.push(\n        ' != null ? helper : ',\n        this.aliasable('container.hooks.helperMissing')\n      );\n    }\n\n    this.push([\n      '(',\n      lookup,\n      helper.paramsInit ? ['),(', helper.paramsInit] : [],\n      '),',\n      '(typeof helper === ',\n      this.aliasable('\"function\"'),\n      ' ? ',\n      this.source.functionCall('helper', 'call', helper.callParams),\n      ' : helper))'\n    ]);\n  },\n\n  // [invokePartial]\n  //\n  // On stack, before: context, ...\n  // On stack after: result of partial invocation\n  //\n  // This operation pops off a context, invokes a partial with that context,\n  // and pushes the result of the invocation back.\n  invokePartial: function(isDynamic, name, indent) {\n    let params = [],\n      options = this.setupParams(name, 1, params);\n\n    if (isDynamic) {\n      name = this.popStack();\n      delete options.name;\n    }\n\n    if (indent) {\n      options.indent = JSON.stringify(indent);\n    }\n    options.helpers = 'helpers';\n    options.partials = 'partials';\n    options.decorators = 'container.decorators';\n\n    if (!isDynamic) {\n      params.unshift(this.nameLookup('partials', name, 'partial'));\n    } else {\n      params.unshift(name);\n    }\n\n    if (this.options.compat) {\n      options.depths = 'depths';\n    }\n    options = this.objectLiteral(options);\n    params.push(options);\n\n    this.push(this.source.functionCall('container.invokePartial', '', params));\n  },\n\n  // [assignToHash]\n  //\n  // On stack, before: value, ..., hash, ...\n  // On stack, after: ..., hash, ...\n  //\n  // Pops a value off the stack and assigns it to the current hash\n  assignToHash: function(key) {\n    let value = this.popStack(),\n      context,\n      type,\n      id;\n\n    if (this.trackIds) {\n      id = this.popStack();\n    }\n    if (this.stringParams) {\n      type = this.popStack();\n      context = this.popStack();\n    }\n\n    let hash = this.hash;\n    if (context) {\n      hash.contexts[key] = context;\n    }\n    if (type) {\n      hash.types[key] = type;\n    }\n    if (id) {\n      hash.ids[key] = id;\n    }\n    hash.values[key] = value;\n  },\n\n  pushId: function(type, name, child) {\n    if (type === 'BlockParam') {\n      this.pushStackLiteral(\n        'blockParams[' +\n          name[0] +\n          '].path[' +\n          name[1] +\n          ']' +\n          (child ? ' + ' + JSON.stringify('.' + child) : '')\n      );\n    } else if (type === 'PathExpression') {\n      this.pushString(name);\n    } else if (type === 'SubExpression') {\n      this.pushStackLiteral('true');\n    } else {\n      this.pushStackLiteral('null');\n    }\n  },\n\n  // HELPERS\n\n  compiler: JavaScriptCompiler,\n\n  compileChildren: function(environment, options) {\n    let children = environment.children,\n      child,\n      compiler;\n\n    for (let i = 0, l = children.length; i < l; i++) {\n      child = children[i];\n      compiler = new this.compiler(); // eslint-disable-line new-cap\n\n      let existing = this.matchExistingProgram(child);\n\n      if (existing == null) {\n        this.context.programs.push(''); // Placeholder to prevent name conflicts for nested children\n        let index = this.context.programs.length;\n        child.index = index;\n        child.name = 'program' + index;\n        this.context.programs[index] = compiler.compile(\n          child,\n          options,\n          this.context,\n          !this.precompile\n        );\n        this.context.decorators[index] = compiler.decorators;\n        this.context.environments[index] = child;\n\n        this.useDepths = this.useDepths || compiler.useDepths;\n        this.useBlockParams = this.useBlockParams || compiler.useBlockParams;\n        child.useDepths = this.useDepths;\n        child.useBlockParams = this.useBlockParams;\n      } else {\n        child.index = existing.index;\n        child.name = 'program' + existing.index;\n\n        this.useDepths = this.useDepths || existing.useDepths;\n        this.useBlockParams = this.useBlockParams || existing.useBlockParams;\n      }\n    }\n  },\n  matchExistingProgram: function(child) {\n    for (let i = 0, len = this.context.environments.length; i < len; i++) {\n      let environment = this.context.environments[i];\n      if (environment && environment.equals(child)) {\n        return environment;\n      }\n    }\n  },\n\n  programExpression: function(guid) {\n    let child = this.environment.children[guid],\n      programParams = [child.index, 'data', child.blockParams];\n\n    if (this.useBlockParams || this.useDepths) {\n      programParams.push('blockParams');\n    }\n    if (this.useDepths) {\n      programParams.push('depths');\n    }\n\n    return 'container.program(' + programParams.join(', ') + ')';\n  },\n\n  useRegister: function(name) {\n    if (!this.registers[name]) {\n      this.registers[name] = true;\n      this.registers.list.push(name);\n    }\n  },\n\n  push: function(expr) {\n    if (!(expr instanceof Literal)) {\n      expr = this.source.wrap(expr);\n    }\n\n    this.inlineStack.push(expr);\n    return expr;\n  },\n\n  pushStackLiteral: function(item) {\n    this.push(new Literal(item));\n  },\n\n  pushSource: function(source) {\n    if (this.pendingContent) {\n      this.source.push(\n        this.appendToBuffer(\n          this.source.quotedString(this.pendingContent),\n          this.pendingLocation\n        )\n      );\n      this.pendingContent = undefined;\n    }\n\n    if (source) {\n      this.source.push(source);\n    }\n  },\n\n  replaceStack: function(callback) {\n    let prefix = ['('],\n      stack,\n      createdStack,\n      usedLiteral;\n\n    /* istanbul ignore next */\n    if (!this.isInline()) {\n      throw new Exception('replaceStack on non-inline');\n    }\n\n    // We want to merge the inline statement into the replacement statement via ','\n    let top = this.popStack(true);\n\n    if (top instanceof Literal) {\n      // Literals do not need to be inlined\n      stack = [top.value];\n      prefix = ['(', stack];\n      usedLiteral = true;\n    } else {\n      // Get or create the current stack name for use by the inline\n      createdStack = true;\n      let name = this.incrStack();\n\n      prefix = ['((', this.push(name), ' = ', top, ')'];\n      stack = this.topStack();\n    }\n\n    let item = callback.call(this, stack);\n\n    if (!usedLiteral) {\n      this.popStack();\n    }\n    if (createdStack) {\n      this.stackSlot--;\n    }\n    this.push(prefix.concat(item, ')'));\n  },\n\n  incrStack: function() {\n    this.stackSlot++;\n    if (this.stackSlot > this.stackVars.length) {\n      this.stackVars.push('stack' + this.stackSlot);\n    }\n    return this.topStackName();\n  },\n  topStackName: function() {\n    return 'stack' + this.stackSlot;\n  },\n  flushInline: function() {\n    let inlineStack = this.inlineStack;\n    this.inlineStack = [];\n    for (let i = 0, len = inlineStack.length; i < len; i++) {\n      let entry = inlineStack[i];\n      /* istanbul ignore if */\n      if (entry instanceof Literal) {\n        this.compileStack.push(entry);\n      } else {\n        let stack = this.incrStack();\n        this.pushSource([stack, ' = ', entry, ';']);\n        this.compileStack.push(stack);\n      }\n    }\n  },\n  isInline: function() {\n    return this.inlineStack.length;\n  },\n\n  popStack: function(wrapped) {\n    let inline = this.isInline(),\n      item = (inline ? this.inlineStack : this.compileStack).pop();\n\n    if (!wrapped && item instanceof Literal) {\n      return item.value;\n    } else {\n      if (!inline) {\n        /* istanbul ignore next */\n        if (!this.stackSlot) {\n          throw new Exception('Invalid stack pop');\n        }\n        this.stackSlot--;\n      }\n      return item;\n    }\n  },\n\n  topStack: function() {\n    let stack = this.isInline() ? this.inlineStack : this.compileStack,\n      item = stack[stack.length - 1];\n\n    /* istanbul ignore if */\n    if (item instanceof Literal) {\n      return item.value;\n    } else {\n      return item;\n    }\n  },\n\n  contextName: function(context) {\n    if (this.useDepths && context) {\n      return 'depths[' + context + ']';\n    } else {\n      return 'depth' + context;\n    }\n  },\n\n  quotedString: function(str) {\n    return this.source.quotedString(str);\n  },\n\n  objectLiteral: function(obj) {\n    return this.source.objectLiteral(obj);\n  },\n\n  aliasable: function(name) {\n    let ret = this.aliases[name];\n    if (ret) {\n      ret.referenceCount++;\n      return ret;\n    }\n\n    ret = this.aliases[name] = this.source.wrap(name);\n    ret.aliasable = true;\n    ret.referenceCount = 1;\n\n    return ret;\n  },\n\n  setupHelper: function(paramSize, name, blockHelper) {\n    let params = [],\n      paramsInit = this.setupHelperArgs(name, paramSize, params, blockHelper);\n    let foundHelper = this.nameLookup('helpers', name, 'helper'),\n      callContext = this.aliasable(\n        `${this.contextName(0)} != null ? ${this.contextName(\n          0\n        )} : (container.nullContext || {})`\n      );\n\n    return {\n      params: params,\n      paramsInit: paramsInit,\n      name: foundHelper,\n      callParams: [callContext].concat(params)\n    };\n  },\n\n  setupParams: function(helper, paramSize, params) {\n    let options = {},\n      contexts = [],\n      types = [],\n      ids = [],\n      objectArgs = !params,\n      param;\n\n    if (objectArgs) {\n      params = [];\n    }\n\n    options.name = this.quotedString(helper);\n    options.hash = this.popStack();\n\n    if (this.trackIds) {\n      options.hashIds = this.popStack();\n    }\n    if (this.stringParams) {\n      options.hashTypes = this.popStack();\n      options.hashContexts = this.popStack();\n    }\n\n    let inverse = this.popStack(),\n      program = this.popStack();\n\n    // Avoid setting fn and inverse if neither are set. This allows\n    // helpers to do a check for `if (options.fn)`\n    if (program || inverse) {\n      options.fn = program || 'container.noop';\n      options.inverse = inverse || 'container.noop';\n    }\n\n    // The parameters go on to the stack in order (making sure that they are evaluated in order)\n    // so we need to pop them off the stack in reverse order\n    let i = paramSize;\n    while (i--) {\n      param = this.popStack();\n      params[i] = param;\n\n      if (this.trackIds) {\n        ids[i] = this.popStack();\n      }\n      if (this.stringParams) {\n        types[i] = this.popStack();\n        contexts[i] = this.popStack();\n      }\n    }\n\n    if (objectArgs) {\n      options.args = this.source.generateArray(params);\n    }\n\n    if (this.trackIds) {\n      options.ids = this.source.generateArray(ids);\n    }\n    if (this.stringParams) {\n      options.types = this.source.generateArray(types);\n      options.contexts = this.source.generateArray(contexts);\n    }\n\n    if (this.options.data) {\n      options.data = 'data';\n    }\n    if (this.useBlockParams) {\n      options.blockParams = 'blockParams';\n    }\n    return options;\n  },\n\n  setupHelperArgs: function(helper, paramSize, params, useRegister) {\n    let options = this.setupParams(helper, paramSize, params);\n    options.loc = JSON.stringify(this.source.currentLocation);\n    options = this.objectLiteral(options);\n    if (useRegister) {\n      this.useRegister('options');\n      params.push('options');\n      return ['options=', options];\n    } else if (params) {\n      params.push(options);\n      return '';\n    } else {\n      return options;\n    }\n  }\n};\n\n(function() {\n  const reservedWords = (\n    'break else new var' +\n    ' case finally return void' +\n    ' catch for switch while' +\n    ' continue function this with' +\n    ' default if throw' +\n    ' delete in try' +\n    ' do instanceof typeof' +\n    ' abstract enum int short' +\n    ' boolean export interface static' +\n    ' byte extends long super' +\n    ' char final native synchronized' +\n    ' class float package throws' +\n    ' const goto private transient' +\n    ' debugger implements protected volatile' +\n    ' double import public let yield await' +\n    ' null true false'\n  ).split(' ');\n\n  const compilerWords = (JavaScriptCompiler.RESERVED_WORDS = {});\n\n  for (let i = 0, l = reservedWords.length; i < l; i++) {\n    compilerWords[reservedWords[i]] = true;\n  }\n})();\n\n/**\n * @deprecated May be removed in the next major version\n */\nJavaScriptCompiler.isValidJavaScriptVariableName = function(name) {\n  return (\n    !JavaScriptCompiler.RESERVED_WORDS[name] &&\n    /^[a-zA-Z_$][0-9a-zA-Z_$]*$/.test(name)\n  );\n};\n\nfunction strictLookup(requireTerminal, compiler, parts, type) {\n  let stack = compiler.popStack(),\n    i = 0,\n    len = parts.length;\n  if (requireTerminal) {\n    len--;\n  }\n\n  for (; i < len; i++) {\n    stack = compiler.nameLookup(stack, parts[i], type);\n  }\n\n  if (requireTerminal) {\n    return [\n      compiler.aliasable('container.strict'),\n      '(',\n      stack,\n      ', ',\n      compiler.quotedString(parts[i]),\n      ', ',\n      JSON.stringify(compiler.source.currentLocation),\n      ' )'\n    ];\n  } else {\n    return stack;\n  }\n}\n\nexport default JavaScriptCompiler;\n","/* global define */\nimport { isArray } from '../utils';\n\nlet SourceNode;\n\ntry {\n  /* istanbul ignore next */\n  if (typeof define !== 'function' || !define.amd) {\n    // We don't support this in AMD environments. For these environments, we asusme that\n    // they are running on the browser and thus have no need for the source-map library.\n    let SourceMap = require('source-map');\n    SourceNode = SourceMap.SourceNode;\n  }\n} catch (err) {\n  /* NOP */\n}\n\n/* istanbul ignore if: tested but not covered in istanbul due to dist build  */\nif (!SourceNode) {\n  SourceNode = function(line, column, srcFile, chunks) {\n    this.src = '';\n    if (chunks) {\n      this.add(chunks);\n    }\n  };\n  /* istanbul ignore next */\n  SourceNode.prototype = {\n    add: function(chunks) {\n      if (isArray(chunks)) {\n        chunks = chunks.join('');\n      }\n      this.src += chunks;\n    },\n    prepend: function(chunks) {\n      if (isArray(chunks)) {\n        chunks = chunks.join('');\n      }\n      this.src = chunks + this.src;\n    },\n    toStringWithSourceMap: function() {\n      return { code: this.toString() };\n    },\n    toString: function() {\n      return this.src;\n    }\n  };\n}\n\nfunction castChunk(chunk, codeGen, loc) {\n  if (isArray(chunk)) {\n    let ret = [];\n\n    for (let i = 0, len = chunk.length; i < len; i++) {\n      ret.push(codeGen.wrap(chunk[i], loc));\n    }\n    return ret;\n  } else if (typeof chunk === 'boolean' || typeof chunk === 'number') {\n    // Handle primitives that the SourceNode will throw up on\n    return chunk + '';\n  }\n  return chunk;\n}\n\nfunction CodeGen(srcFile) {\n  this.srcFile = srcFile;\n  this.source = [];\n}\n\nCodeGen.prototype = {\n  isEmpty() {\n    return !this.source.length;\n  },\n  prepend: function(source, loc) {\n    this.source.unshift(this.wrap(source, loc));\n  },\n  push: function(source, loc) {\n    this.source.push(this.wrap(source, loc));\n  },\n\n  merge: function() {\n    let source = this.empty();\n    this.each(function(line) {\n      source.add(['  ', line, '\\n']);\n    });\n    return source;\n  },\n\n  each: function(iter) {\n    for (let i = 0, len = this.source.length; i < len; i++) {\n      iter(this.source[i]);\n    }\n  },\n\n  empty: function() {\n    let loc = this.currentLocation || { start: {} };\n    return new SourceNode(loc.start.line, loc.start.column, this.srcFile);\n  },\n  wrap: function(chunk, loc = this.currentLocation || { start: {} }) {\n    if (chunk instanceof SourceNode) {\n      return chunk;\n    }\n\n    chunk = castChunk(chunk, this, loc);\n\n    return new SourceNode(\n      loc.start.line,\n      loc.start.column,\n      this.srcFile,\n      chunk\n    );\n  },\n\n  functionCall: function(fn, type, params) {\n    params = this.generateList(params);\n    return this.wrap([fn, type ? '.' + type + '(' : '(', params, ')']);\n  },\n\n  quotedString: function(str) {\n    return (\n      '\"' +\n      (str + '')\n        .replace(/\\\\/g, '\\\\\\\\')\n        .replace(/\"/g, '\\\\\"')\n        .replace(/\\n/g, '\\\\n')\n        .replace(/\\r/g, '\\\\r')\n        .replace(/\\u2028/g, '\\\\u2028') // Per Ecma-262 7.3 + 7.8.4\n        .replace(/\\u2029/g, '\\\\u2029') +\n      '\"'\n    );\n  },\n\n  objectLiteral: function(obj) {\n    let pairs = [];\n\n    Object.keys(obj).forEach(key => {\n      let value = castChunk(obj[key], this);\n      if (value !== 'undefined') {\n        pairs.push([this.quotedString(key), ':', value]);\n      }\n    });\n\n    let ret = this.generateList(pairs);\n    ret.prepend('{');\n    ret.add('}');\n    return ret;\n  },\n\n  generateList: function(entries) {\n    let ret = this.empty();\n\n    for (let i = 0, len = entries.length; i < len; i++) {\n      if (i) {\n        ret.add(',');\n      }\n\n      ret.add(castChunk(entries[i], this));\n    }\n\n    return ret;\n  },\n\n  generateArray: function(entries) {\n    let ret = this.generateList(entries);\n    ret.prepend('[');\n    ret.add(']');\n\n    return ret;\n  }\n};\n\nexport default CodeGen;\n","/*\n * Copyright 2009-2011 Mozilla Foundation and contributors\n * Licensed under the New BSD license. See LICENSE.txt or:\n * http://opensource.org/licenses/BSD-3-Clause\n */\nexports.SourceMapGenerator = require('./lib/source-map-generator').SourceMapGenerator;\nexports.SourceMapConsumer = require('./lib/source-map-consumer').SourceMapConsumer;\nexports.SourceNode = require('./lib/source-node').SourceNode;\n","/* -*- Mode: js; js-indent-level: 2; -*- */\n/*\n * Copyright 2011 Mozilla Foundation and contributors\n * Licensed under the New BSD license. See LICENSE or:\n * http://opensource.org/licenses/BSD-3-Clause\n */\n\nvar base64VLQ = require('./base64-vlq');\nvar util = require('./util');\nvar ArraySet = require('./array-set').ArraySet;\nvar MappingList = require('./mapping-list').MappingList;\n\n/**\n * An instance of the SourceMapGenerator represents a source map which is\n * being built incrementally. You may pass an object with the following\n * properties:\n *\n *   - file: The filename of the generated source.\n *   - sourceRoot: A root for all relative URLs in this source map.\n */\nfunction SourceMapGenerator(aArgs) {\n  if (!aArgs) {\n    aArgs = {};\n  }\n  this._file = util.getArg(aArgs, 'file', null);\n  this._sourceRoot = util.getArg(aArgs, 'sourceRoot', null);\n  this._skipValidation = util.getArg(aArgs, 'skipValidation', false);\n  this._sources = new ArraySet();\n  this._names = new ArraySet();\n  this._mappings = new MappingList();\n  this._sourcesContents = null;\n}\n\nSourceMapGenerator.prototype._version = 3;\n\n/**\n * Creates a new SourceMapGenerator based on a SourceMapConsumer\n *\n * @param aSourceMapConsumer The SourceMap.\n */\nSourceMapGenerator.fromSourceMap =\n  function SourceMapGenerator_fromSourceMap(aSourceMapConsumer) {\n    var sourceRoot = aSourceMapConsumer.sourceRoot;\n    var generator = new SourceMapGenerator({\n      file: aSourceMapConsumer.file,\n      sourceRoot: sourceRoot\n    });\n    aSourceMapConsumer.eachMapping(function (mapping) {\n      var newMapping = {\n        generated: {\n          line: mapping.generatedLine,\n          column: mapping.generatedColumn\n        }\n      };\n\n      if (mapping.source != null) {\n        newMapping.source = mapping.source;\n        if (sourceRoot != null) {\n          newMapping.source = util.relative(sourceRoot, newMapping.source);\n        }\n\n        newMapping.original = {\n          line: mapping.originalLine,\n          column: mapping.originalColumn\n        };\n\n        if (mapping.name != null) {\n          newMapping.name = mapping.name;\n        }\n      }\n\n      generator.addMapping(newMapping);\n    });\n    aSourceMapConsumer.sources.forEach(function (sourceFile) {\n      var sourceRelative = sourceFile;\n      if (sourceRoot !== null) {\n        sourceRelative = util.relative(sourceRoot, sourceFile);\n      }\n\n      if (!generator._sources.has(sourceRelative)) {\n        generator._sources.add(sourceRelative);\n      }\n\n      var content = aSourceMapConsumer.sourceContentFor(sourceFile);\n      if (content != null) {\n        generator.setSourceContent(sourceFile, content);\n      }\n    });\n    return generator;\n  };\n\n/**\n * Add a single mapping from original source line and column to the generated\n * source's line and column for this source map being created. The mapping\n * object should have the following properties:\n *\n *   - generated: An object with the generated line and column positions.\n *   - original: An object with the original line and column positions.\n *   - source: The original source file (relative to the sourceRoot).\n *   - name: An optional original token name for this mapping.\n */\nSourceMapGenerator.prototype.addMapping =\n  function SourceMapGenerator_addMapping(aArgs) {\n    var generated = util.getArg(aArgs, 'generated');\n    var original = util.getArg(aArgs, 'original', null);\n    var source = util.getArg(aArgs, 'source', null);\n    var name = util.getArg(aArgs, 'name', null);\n\n    if (!this._skipValidation) {\n      this._validateMapping(generated, original, source, name);\n    }\n\n    if (source != null) {\n      source = String(source);\n      if (!this._sources.has(source)) {\n        this._sources.add(source);\n      }\n    }\n\n    if (name != null) {\n      name = String(name);\n      if (!this._names.has(name)) {\n        this._names.add(name);\n      }\n    }\n\n    this._mappings.add({\n      generatedLine: generated.line,\n      generatedColumn: generated.column,\n      originalLine: original != null && original.line,\n      originalColumn: original != null && original.column,\n      source: source,\n      name: name\n    });\n  };\n\n/**\n * Set the source content for a source file.\n */\nSourceMapGenerator.prototype.setSourceContent =\n  function SourceMapGenerator_setSourceContent(aSourceFile, aSourceContent) {\n    var source = aSourceFile;\n    if (this._sourceRoot != null) {\n      source = util.relative(this._sourceRoot, source);\n    }\n\n    if (aSourceContent != null) {\n      // Add the source content to the _sourcesContents map.\n      // Create a new _sourcesContents map if the property is null.\n      if (!this._sourcesContents) {\n        this._sourcesContents = Object.create(null);\n      }\n      this._sourcesContents[util.toSetString(source)] = aSourceContent;\n    } else if (this._sourcesContents) {\n      // Remove the source file from the _sourcesContents map.\n      // If the _sourcesContents map is empty, set the property to null.\n      delete this._sourcesContents[util.toSetString(source)];\n      if (Object.keys(this._sourcesContents).length === 0) {\n        this._sourcesContents = null;\n      }\n    }\n  };\n\n/**\n * Applies the mappings of a sub-source-map for a specific source file to the\n * source map being generated. Each mapping to the supplied source file is\n * rewritten using the supplied source map. Note: The resolution for the\n * resulting mappings is the minimium of this map and the supplied map.\n *\n * @param aSourceMapConsumer The source map to be applied.\n * @param aSourceFile Optional. The filename of the source file.\n *        If omitted, SourceMapConsumer's file property will be used.\n * @param aSourceMapPath Optional. The dirname of the path to the source map\n *        to be applied. If relative, it is relative to the SourceMapConsumer.\n *        This parameter is needed when the two source maps aren't in the same\n *        directory, and the source map to be applied contains relative source\n *        paths. If so, those relative source paths need to be rewritten\n *        relative to the SourceMapGenerator.\n */\nSourceMapGenerator.prototype.applySourceMap =\n  function SourceMapGenerator_applySourceMap(aSourceMapConsumer, aSourceFile, aSourceMapPath) {\n    var sourceFile = aSourceFile;\n    // If aSourceFile is omitted, we will use the file property of the SourceMap\n    if (aSourceFile == null) {\n      if (aSourceMapConsumer.file == null) {\n        throw new Error(\n          'SourceMapGenerator.prototype.applySourceMap requires either an explicit source file, ' +\n          'or the source map\\'s \"file\" property. Both were omitted.'\n        );\n      }\n      sourceFile = aSourceMapConsumer.file;\n    }\n    var sourceRoot = this._sourceRoot;\n    // Make \"sourceFile\" relative if an absolute Url is passed.\n    if (sourceRoot != null) {\n      sourceFile = util.relative(sourceRoot, sourceFile);\n    }\n    // Applying the SourceMap can add and remove items from the sources and\n    // the names array.\n    var newSources = new ArraySet();\n    var newNames = new ArraySet();\n\n    // Find mappings for the \"sourceFile\"\n    this._mappings.unsortedForEach(function (mapping) {\n      if (mapping.source === sourceFile && mapping.originalLine != null) {\n        // Check if it can be mapped by the source map, then update the mapping.\n        var original = aSourceMapConsumer.originalPositionFor({\n          line: mapping.originalLine,\n          column: mapping.originalColumn\n        });\n        if (original.source != null) {\n          // Copy mapping\n          mapping.source = original.source;\n          if (aSourceMapPath != null) {\n            mapping.source = util.join(aSourceMapPath, mapping.source)\n          }\n          if (sourceRoot != null) {\n            mapping.source = util.relative(sourceRoot, mapping.source);\n          }\n          mapping.originalLine = original.line;\n          mapping.originalColumn = original.column;\n          if (original.name != null) {\n            mapping.name = original.name;\n          }\n        }\n      }\n\n      var source = mapping.source;\n      if (source != null && !newSources.has(source)) {\n        newSources.add(source);\n      }\n\n      var name = mapping.name;\n      if (name != null && !newNames.has(name)) {\n        newNames.add(name);\n      }\n\n    }, this);\n    this._sources = newSources;\n    this._names = newNames;\n\n    // Copy sourcesContents of applied map.\n    aSourceMapConsumer.sources.forEach(function (sourceFile) {\n      var content = aSourceMapConsumer.sourceContentFor(sourceFile);\n      if (content != null) {\n        if (aSourceMapPath != null) {\n          sourceFile = util.join(aSourceMapPath, sourceFile);\n        }\n        if (sourceRoot != null) {\n          sourceFile = util.relative(sourceRoot, sourceFile);\n        }\n        this.setSourceContent(sourceFile, content);\n      }\n    }, this);\n  };\n\n/**\n * A mapping can have one of the three levels of data:\n *\n *   1. Just the generated position.\n *   2. The Generated position, original position, and original source.\n *   3. Generated and original position, original source, as well as a name\n *      token.\n *\n * To maintain consistency, we validate that any new mapping being added falls\n * in to one of these categories.\n */\nSourceMapGenerator.prototype._validateMapping =\n  function SourceMapGenerator_validateMapping(aGenerated, aOriginal, aSource,\n                                              aName) {\n    // When aOriginal is truthy but has empty values for .line and .column,\n    // it is most likely a programmer error. In this case we throw a very\n    // specific error message to try to guide them the right way.\n    // For example: https://github.com/Polymer/polymer-bundler/pull/519\n    if (aOriginal && typeof aOriginal.line !== 'number' && typeof aOriginal.column !== 'number') {\n        throw new Error(\n            'original.line and original.column are not numbers -- you probably meant to omit ' +\n            'the original mapping entirely and only map the generated position. If so, pass ' +\n            'null for the original mapping instead of an object with empty or null values.'\n        );\n    }\n\n    if (aGenerated && 'line' in aGenerated && 'column' in aGenerated\n        && aGenerated.line > 0 && aGenerated.column >= 0\n        && !aOriginal && !aSource && !aName) {\n      // Case 1.\n      return;\n    }\n    else if (aGenerated && 'line' in aGenerated && 'column' in aGenerated\n             && aOriginal && 'line' in aOriginal && 'column' in aOriginal\n             && aGenerated.line > 0 && aGenerated.column >= 0\n             && aOriginal.line > 0 && aOriginal.column >= 0\n             && aSource) {\n      // Cases 2 and 3.\n      return;\n    }\n    else {\n      throw new Error('Invalid mapping: ' + JSON.stringify({\n        generated: aGenerated,\n        source: aSource,\n        original: aOriginal,\n        name: aName\n      }));\n    }\n  };\n\n/**\n * Serialize the accumulated mappings in to the stream of base 64 VLQs\n * specified by the source map format.\n */\nSourceMapGenerator.prototype._serializeMappings =\n  function SourceMapGenerator_serializeMappings() {\n    var previousGeneratedColumn = 0;\n    var previousGeneratedLine = 1;\n    var previousOriginalColumn = 0;\n    var previousOriginalLine = 0;\n    var previousName = 0;\n    var previousSource = 0;\n    var result = '';\n    var next;\n    var mapping;\n    var nameIdx;\n    var sourceIdx;\n\n    var mappings = this._mappings.toArray();\n    for (var i = 0, len = mappings.length; i < len; i++) {\n      mapping = mappings[i];\n      next = ''\n\n      if (mapping.generatedLine !== previousGeneratedLine) {\n        previousGeneratedColumn = 0;\n        while (mapping.generatedLine !== previousGeneratedLine) {\n          next += ';';\n          previousGeneratedLine++;\n        }\n      }\n      else {\n        if (i > 0) {\n          if (!util.compareByGeneratedPositionsInflated(mapping, mappings[i - 1])) {\n            continue;\n          }\n          next += ',';\n        }\n      }\n\n      next += base64VLQ.encode(mapping.generatedColumn\n                                 - previousGeneratedColumn);\n      previousGeneratedColumn = mapping.generatedColumn;\n\n      if (mapping.source != null) {\n        sourceIdx = this._sources.indexOf(mapping.source);\n        next += base64VLQ.encode(sourceIdx - previousSource);\n        previousSource = sourceIdx;\n\n        // lines are stored 0-based in SourceMap spec version 3\n        next += base64VLQ.encode(mapping.originalLine - 1\n                                   - previousOriginalLine);\n        previousOriginalLine = mapping.originalLine - 1;\n\n        next += base64VLQ.encode(mapping.originalColumn\n                                   - previousOriginalColumn);\n        previousOriginalColumn = mapping.originalColumn;\n\n        if (mapping.name != null) {\n          nameIdx = this._names.indexOf(mapping.name);\n          next += base64VLQ.encode(nameIdx - previousName);\n          previousName = nameIdx;\n        }\n      }\n\n      result += next;\n    }\n\n    return result;\n  };\n\nSourceMapGenerator.prototype._generateSourcesContent =\n  function SourceMapGenerator_generateSourcesContent(aSources, aSourceRoot) {\n    return aSources.map(function (source) {\n      if (!this._sourcesContents) {\n        return null;\n      }\n      if (aSourceRoot != null) {\n        source = util.relative(aSourceRoot, source);\n      }\n      var key = util.toSetString(source);\n      return Object.prototype.hasOwnProperty.call(this._sourcesContents, key)\n        ? this._sourcesContents[key]\n        : null;\n    }, this);\n  };\n\n/**\n * Externalize the source map.\n */\nSourceMapGenerator.prototype.toJSON =\n  function SourceMapGenerator_toJSON() {\n    var map = {\n      version: this._version,\n      sources: this._sources.toArray(),\n      names: this._names.toArray(),\n      mappings: this._serializeMappings()\n    };\n    if (this._file != null) {\n      map.file = this._file;\n    }\n    if (this._sourceRoot != null) {\n      map.sourceRoot = this._sourceRoot;\n    }\n    if (this._sourcesContents) {\n      map.sourcesContent = this._generateSourcesContent(map.sources, map.sourceRoot);\n    }\n\n    return map;\n  };\n\n/**\n * Render the source map being generated to a string.\n */\nSourceMapGenerator.prototype.toString =\n  function SourceMapGenerator_toString() {\n    return JSON.stringify(this.toJSON());\n  };\n\nexports.SourceMapGenerator = SourceMapGenerator;\n","/* -*- Mode: js; js-indent-level: 2; -*- */\n/*\n * Copyright 2011 Mozilla Foundation and contributors\n * Licensed under the New BSD license. See LICENSE or:\n * http://opensource.org/licenses/BSD-3-Clause\n *\n * Based on the Base 64 VLQ implementation in Closure Compiler:\n * https://code.google.com/p/closure-compiler/source/browse/trunk/src/com/google/debugging/sourcemap/Base64VLQ.java\n *\n * Copyright 2011 The Closure Compiler Authors. All rights reserved.\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are\n * met:\n *\n *  * Redistributions of source code must retain the above copyright\n *    notice, this list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above\n *    copyright notice, this list of conditions and the following\n *    disclaimer in the documentation and/or other materials provided\n *    with the distribution.\n *  * Neither the name of Google Inc. nor the names of its\n *    contributors may be used to endorse or promote products derived\n *    from this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\nvar base64 = require('./base64');\n\n// A single base 64 digit can contain 6 bits of data. For the base 64 variable\n// length quantities we use in the source map spec, the first bit is the sign,\n// the next four bits are the actual value, and the 6th bit is the\n// continuation bit. The continuation bit tells us whether there are more\n// digits in this value following this digit.\n//\n//   Continuation\n//   |    Sign\n//   |    |\n//   V    V\n//   101011\n\nvar VLQ_BASE_SHIFT = 5;\n\n// binary: 100000\nvar VLQ_BASE = 1 << VLQ_BASE_SHIFT;\n\n// binary: 011111\nvar VLQ_BASE_MASK = VLQ_BASE - 1;\n\n// binary: 100000\nvar VLQ_CONTINUATION_BIT = VLQ_BASE;\n\n/**\n * Converts from a two-complement value to a value where the sign bit is\n * placed in the least significant bit.  For example, as decimals:\n *   1 becomes 2 (10 binary), -1 becomes 3 (11 binary)\n *   2 becomes 4 (100 binary), -2 becomes 5 (101 binary)\n */\nfunction toVLQSigned(aValue) {\n  return aValue < 0\n    ? ((-aValue) << 1) + 1\n    : (aValue << 1) + 0;\n}\n\n/**\n * Converts to a two-complement value from a value where the sign bit is\n * placed in the least significant bit.  For example, as decimals:\n *   2 (10 binary) becomes 1, 3 (11 binary) becomes -1\n *   4 (100 binary) becomes 2, 5 (101 binary) becomes -2\n */\nfunction fromVLQSigned(aValue) {\n  var isNegative = (aValue & 1) === 1;\n  var shifted = aValue >> 1;\n  return isNegative\n    ? -shifted\n    : shifted;\n}\n\n/**\n * Returns the base 64 VLQ encoded value.\n */\nexports.encode = function base64VLQ_encode(aValue) {\n  var encoded = \"\";\n  var digit;\n\n  var vlq = toVLQSigned(aValue);\n\n  do {\n    digit = vlq & VLQ_BASE_MASK;\n    vlq >>>= VLQ_BASE_SHIFT;\n    if (vlq > 0) {\n      // There are still more digits in this value, so we must make sure the\n      // continuation bit is marked.\n      digit |= VLQ_CONTINUATION_BIT;\n    }\n    encoded += base64.encode(digit);\n  } while (vlq > 0);\n\n  return encoded;\n};\n\n/**\n * Decodes the next base 64 VLQ value from the given string and returns the\n * value and the rest of the string via the out parameter.\n */\nexports.decode = function base64VLQ_decode(aStr, aIndex, aOutParam) {\n  var strLen = aStr.length;\n  var result = 0;\n  var shift = 0;\n  var continuation, digit;\n\n  do {\n    if (aIndex >= strLen) {\n      throw new Error(\"Expected more digits in base 64 VLQ value.\");\n    }\n\n    digit = base64.decode(aStr.charCodeAt(aIndex++));\n    if (digit === -1) {\n      throw new Error(\"Invalid base64 digit: \" + aStr.charAt(aIndex - 1));\n    }\n\n    continuation = !!(digit & VLQ_CONTINUATION_BIT);\n    digit &= VLQ_BASE_MASK;\n    result = result + (digit << shift);\n    shift += VLQ_BASE_SHIFT;\n  } while (continuation);\n\n  aOutParam.value = fromVLQSigned(result);\n  aOutParam.rest = aIndex;\n};\n","/* -*- Mode: js; js-indent-level: 2; -*- */\n/*\n * Copyright 2011 Mozilla Foundation and contributors\n * Licensed under the New BSD license. See LICENSE or:\n * http://opensource.org/licenses/BSD-3-Clause\n */\n\nvar intToCharMap = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'.split('');\n\n/**\n * Encode an integer in the range of 0 to 63 to a single base 64 digit.\n */\nexports.encode = function (number) {\n  if (0 <= number && number < intToCharMap.length) {\n    return intToCharMap[number];\n  }\n  throw new TypeError(\"Must be between 0 and 63: \" + number);\n};\n\n/**\n * Decode a single base 64 character code digit to an integer. Returns -1 on\n * failure.\n */\nexports.decode = function (charCode) {\n  var bigA = 65;     // 'A'\n  var bigZ = 90;     // 'Z'\n\n  var littleA = 97;  // 'a'\n  var littleZ = 122; // 'z'\n\n  var zero = 48;     // '0'\n  var nine = 57;     // '9'\n\n  var plus = 43;     // '+'\n  var slash = 47;    // '/'\n\n  var littleOffset = 26;\n  var numberOffset = 52;\n\n  // 0 - 25: ABCDEFGHIJKLMNOPQRSTUVWXYZ\n  if (bigA <= charCode && charCode <= bigZ) {\n    return (charCode - bigA);\n  }\n\n  // 26 - 51: abcdefghijklmnopqrstuvwxyz\n  if (littleA <= charCode && charCode <= littleZ) {\n    return (charCode - littleA + littleOffset);\n  }\n\n  // 52 - 61: 0123456789\n  if (zero <= charCode && charCode <= nine) {\n    return (charCode - zero + numberOffset);\n  }\n\n  // 62: +\n  if (charCode == plus) {\n    return 62;\n  }\n\n  // 63: /\n  if (charCode == slash) {\n    return 63;\n  }\n\n  // Invalid base64 digit.\n  return -1;\n};\n","/* -*- Mode: js; js-indent-level: 2; -*- */\n/*\n * Copyright 2011 Mozilla Foundation and contributors\n * Licensed under the New BSD license. See LICENSE or:\n * http://opensource.org/licenses/BSD-3-Clause\n */\n\n/**\n * This is a helper function for getting values from parameter/options\n * objects.\n *\n * @param args The object we are extracting values from\n * @param name The name of the property we are getting.\n * @param defaultValue An optional value to return if the property is missing\n * from the object. If this is not specified and the property is missing, an\n * error will be thrown.\n */\nfunction getArg(aArgs, aName, aDefaultValue) {\n  if (aName in aArgs) {\n    return aArgs[aName];\n  } else if (arguments.length === 3) {\n    return aDefaultValue;\n  } else {\n    throw new Error('\"' + aName + '\" is a required argument.');\n  }\n}\nexports.getArg = getArg;\n\nvar urlRegexp = /^(?:([\\w+\\-.]+):)?\\/\\/(?:(\\w+:\\w+)@)?([\\w.-]*)(?::(\\d+))?(.*)$/;\nvar dataUrlRegexp = /^data:.+\\,.+$/;\n\nfunction urlParse(aUrl) {\n  var match = aUrl.match(urlRegexp);\n  if (!match) {\n    return null;\n  }\n  return {\n    scheme: match[1],\n    auth: match[2],\n    host: match[3],\n    port: match[4],\n    path: match[5]\n  };\n}\nexports.urlParse = urlParse;\n\nfunction urlGenerate(aParsedUrl) {\n  var url = '';\n  if (aParsedUrl.scheme) {\n    url += aParsedUrl.scheme + ':';\n  }\n  url += '//';\n  if (aParsedUrl.auth) {\n    url += aParsedUrl.auth + '@';\n  }\n  if (aParsedUrl.host) {\n    url += aParsedUrl.host;\n  }\n  if (aParsedUrl.port) {\n    url += \":\" + aParsedUrl.port\n  }\n  if (aParsedUrl.path) {\n    url += aParsedUrl.path;\n  }\n  return url;\n}\nexports.urlGenerate = urlGenerate;\n\n/**\n * Normalizes a path, or the path portion of a URL:\n *\n * - Replaces consecutive slashes with one slash.\n * - Removes unnecessary '.' parts.\n * - Removes unnecessary '<dir>/..' parts.\n *\n * Based on code in the Node.js 'path' core module.\n *\n * @param aPath The path or url to normalize.\n */\nfunction normalize(aPath) {\n  var path = aPath;\n  var url = urlParse(aPath);\n  if (url) {\n    if (!url.path) {\n      return aPath;\n    }\n    path = url.path;\n  }\n  var isAbsolute = exports.isAbsolute(path);\n\n  var parts = path.split(/\\/+/);\n  for (var part, up = 0, i = parts.length - 1; i >= 0; i--) {\n    part = parts[i];\n    if (part === '.') {\n      parts.splice(i, 1);\n    } else if (part === '..') {\n      up++;\n    } else if (up > 0) {\n      if (part === '') {\n        // The first part is blank if the path is absolute. Trying to go\n        // above the root is a no-op. Therefore we can remove all '..' parts\n        // directly after the root.\n        parts.splice(i + 1, up);\n        up = 0;\n      } else {\n        parts.splice(i, 2);\n        up--;\n      }\n    }\n  }\n  path = parts.join('/');\n\n  if (path === '') {\n    path = isAbsolute ? '/' : '.';\n  }\n\n  if (url) {\n    url.path = path;\n    return urlGenerate(url);\n  }\n  return path;\n}\nexports.normalize = normalize;\n\n/**\n * Joins two paths/URLs.\n *\n * @param aRoot The root path or URL.\n * @param aPath The path or URL to be joined with the root.\n *\n * - If aPath is a URL or a data URI, aPath is returned, unless aPath is a\n *   scheme-relative URL: Then the scheme of aRoot, if any, is prepended\n *   first.\n * - Otherwise aPath is a path. If aRoot is a URL, then its path portion\n *   is updated with the result and aRoot is returned. Otherwise the result\n *   is returned.\n *   - If aPath is absolute, the result is aPath.\n *   - Otherwise the two paths are joined with a slash.\n * - Joining for example 'http://' and 'www.example.com' is also supported.\n */\nfunction join(aRoot, aPath) {\n  if (aRoot === \"\") {\n    aRoot = \".\";\n  }\n  if (aPath === \"\") {\n    aPath = \".\";\n  }\n  var aPathUrl = urlParse(aPath);\n  var aRootUrl = urlParse(aRoot);\n  if (aRootUrl) {\n    aRoot = aRootUrl.path || '/';\n  }\n\n  // `join(foo, '//www.example.org')`\n  if (aPathUrl && !aPathUrl.scheme) {\n    if (aRootUrl) {\n      aPathUrl.scheme = aRootUrl.scheme;\n    }\n    return urlGenerate(aPathUrl);\n  }\n\n  if (aPathUrl || aPath.match(dataUrlRegexp)) {\n    return aPath;\n  }\n\n  // `join('http://', 'www.example.com')`\n  if (aRootUrl && !aRootUrl.host && !aRootUrl.path) {\n    aRootUrl.host = aPath;\n    return urlGenerate(aRootUrl);\n  }\n\n  var joined = aPath.charAt(0) === '/'\n    ? aPath\n    : normalize(aRoot.replace(/\\/+$/, '') + '/' + aPath);\n\n  if (aRootUrl) {\n    aRootUrl.path = joined;\n    return urlGenerate(aRootUrl);\n  }\n  return joined;\n}\nexports.join = join;\n\nexports.isAbsolute = function (aPath) {\n  return aPath.charAt(0) === '/' || urlRegexp.test(aPath);\n};\n\n/**\n * Make a path relative to a URL or another path.\n *\n * @param aRoot The root path or URL.\n * @param aPath The path or URL to be made relative to aRoot.\n */\nfunction relative(aRoot, aPath) {\n  if (aRoot === \"\") {\n    aRoot = \".\";\n  }\n\n  aRoot = aRoot.replace(/\\/$/, '');\n\n  // It is possible for the path to be above the root. In this case, simply\n  // checking whether the root is a prefix of the path won't work. Instead, we\n  // need to remove components from the root one by one, until either we find\n  // a prefix that fits, or we run out of components to remove.\n  var level = 0;\n  while (aPath.indexOf(aRoot + '/') !== 0) {\n    var index = aRoot.lastIndexOf(\"/\");\n    if (index < 0) {\n      return aPath;\n    }\n\n    // If the only part of the root that is left is the scheme (i.e. http://,\n    // file:///, etc.), one or more slashes (/), or simply nothing at all, we\n    // have exhausted all components, so the path is not relative to the root.\n    aRoot = aRoot.slice(0, index);\n    if (aRoot.match(/^([^\\/]+:\\/)?\\/*$/)) {\n      return aPath;\n    }\n\n    ++level;\n  }\n\n  // Make sure we add a \"../\" for each component we removed from the root.\n  return Array(level + 1).join(\"../\") + aPath.substr(aRoot.length + 1);\n}\nexports.relative = relative;\n\nvar supportsNullProto = (function () {\n  var obj = Object.create(null);\n  return !('__proto__' in obj);\n}());\n\nfunction identity (s) {\n  return s;\n}\n\n/**\n * Because behavior goes wacky when you set `__proto__` on objects, we\n * have to prefix all the strings in our set with an arbitrary character.\n *\n * See https://github.com/mozilla/source-map/pull/31 and\n * https://github.com/mozilla/source-map/issues/30\n *\n * @param String aStr\n */\nfunction toSetString(aStr) {\n  if (isProtoString(aStr)) {\n    return '$' + aStr;\n  }\n\n  return aStr;\n}\nexports.toSetString = supportsNullProto ? identity : toSetString;\n\nfunction fromSetString(aStr) {\n  if (isProtoString(aStr)) {\n    return aStr.slice(1);\n  }\n\n  return aStr;\n}\nexports.fromSetString = supportsNullProto ? identity : fromSetString;\n\nfunction isProtoString(s) {\n  if (!s) {\n    return false;\n  }\n\n  var length = s.length;\n\n  if (length < 9 /* \"__proto__\".length */) {\n    return false;\n  }\n\n  if (s.charCodeAt(length - 1) !== 95  /* '_' */ ||\n      s.charCodeAt(length - 2) !== 95  /* '_' */ ||\n      s.charCodeAt(length - 3) !== 111 /* 'o' */ ||\n      s.charCodeAt(length - 4) !== 116 /* 't' */ ||\n      s.charCodeAt(length - 5) !== 111 /* 'o' */ ||\n      s.charCodeAt(length - 6) !== 114 /* 'r' */ ||\n      s.charCodeAt(length - 7) !== 112 /* 'p' */ ||\n      s.charCodeAt(length - 8) !== 95  /* '_' */ ||\n      s.charCodeAt(length - 9) !== 95  /* '_' */) {\n    return false;\n  }\n\n  for (var i = length - 10; i >= 0; i--) {\n    if (s.charCodeAt(i) !== 36 /* '$' */) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\n/**\n * Comparator between two mappings where the original positions are compared.\n *\n * Optionally pass in `true` as `onlyCompareGenerated` to consider two\n * mappings with the same original source/line/column, but different generated\n * line and column the same. Useful when searching for a mapping with a\n * stubbed out mapping.\n */\nfunction compareByOriginalPositions(mappingA, mappingB, onlyCompareOriginal) {\n  var cmp = strcmp(mappingA.source, mappingB.source);\n  if (cmp !== 0) {\n    return cmp;\n  }\n\n  cmp = mappingA.originalLine - mappingB.originalLine;\n  if (cmp !== 0) {\n    return cmp;\n  }\n\n  cmp = mappingA.originalColumn - mappingB.originalColumn;\n  if (cmp !== 0 || onlyCompareOriginal) {\n    return cmp;\n  }\n\n  cmp = mappingA.generatedColumn - mappingB.generatedColumn;\n  if (cmp !== 0) {\n    return cmp;\n  }\n\n  cmp = mappingA.generatedLine - mappingB.generatedLine;\n  if (cmp !== 0) {\n    return cmp;\n  }\n\n  return strcmp(mappingA.name, mappingB.name);\n}\nexports.compareByOriginalPositions = compareByOriginalPositions;\n\n/**\n * Comparator between two mappings with deflated source and name indices where\n * the generated positions are compared.\n *\n * Optionally pass in `true` as `onlyCompareGenerated` to consider two\n * mappings with the same generated line and column, but different\n * source/name/original line and column the same. Useful when searching for a\n * mapping with a stubbed out mapping.\n */\nfunction compareByGeneratedPositionsDeflated(mappingA, mappingB, onlyCompareGenerated) {\n  var cmp = mappingA.generatedLine - mappingB.generatedLine;\n  if (cmp !== 0) {\n    return cmp;\n  }\n\n  cmp = mappingA.generatedColumn - mappingB.generatedColumn;\n  if (cmp !== 0 || onlyCompareGenerated) {\n    return cmp;\n  }\n\n  cmp = strcmp(mappingA.source, mappingB.source);\n  if (cmp !== 0) {\n    return cmp;\n  }\n\n  cmp = mappingA.originalLine - mappingB.originalLine;\n  if (cmp !== 0) {\n    return cmp;\n  }\n\n  cmp = mappingA.originalColumn - mappingB.originalColumn;\n  if (cmp !== 0) {\n    return cmp;\n  }\n\n  return strcmp(mappingA.name, mappingB.name);\n}\nexports.compareByGeneratedPositionsDeflated = compareByGeneratedPositionsDeflated;\n\nfunction strcmp(aStr1, aStr2) {\n  if (aStr1 === aStr2) {\n    return 0;\n  }\n\n  if (aStr1 === null) {\n    return 1; // aStr2 !== null\n  }\n\n  if (aStr2 === null) {\n    return -1; // aStr1 !== null\n  }\n\n  if (aStr1 > aStr2) {\n    return 1;\n  }\n\n  return -1;\n}\n\n/**\n * Comparator between two mappings with inflated source and name strings where\n * the generated positions are compared.\n */\nfunction compareByGeneratedPositionsInflated(mappingA, mappingB) {\n  var cmp = mappingA.generatedLine - mappingB.generatedLine;\n  if (cmp !== 0) {\n    return cmp;\n  }\n\n  cmp = mappingA.generatedColumn - mappingB.generatedColumn;\n  if (cmp !== 0) {\n    return cmp;\n  }\n\n  cmp = strcmp(mappingA.source, mappingB.source);\n  if (cmp !== 0) {\n    return cmp;\n  }\n\n  cmp = mappingA.originalLine - mappingB.originalLine;\n  if (cmp !== 0) {\n    return cmp;\n  }\n\n  cmp = mappingA.originalColumn - mappingB.originalColumn;\n  if (cmp !== 0) {\n    return cmp;\n  }\n\n  return strcmp(mappingA.name, mappingB.name);\n}\nexports.compareByGeneratedPositionsInflated = compareByGeneratedPositionsInflated;\n\n/**\n * Strip any JSON XSSI avoidance prefix from the string (as documented\n * in the source maps specification), and then parse the string as\n * JSON.\n */\nfunction parseSourceMapInput(str) {\n  return JSON.parse(str.replace(/^\\)]}'[^\\n]*\\n/, ''));\n}\nexports.parseSourceMapInput = parseSourceMapInput;\n\n/**\n * Compute the URL of a source given the the source root, the source's\n * URL, and the source map's URL.\n */\nfunction computeSourceURL(sourceRoot, sourceURL, sourceMapURL) {\n  sourceURL = sourceURL || '';\n\n  if (sourceRoot) {\n    // This follows what Chrome does.\n    if (sourceRoot[sourceRoot.length - 1] !== '/' && sourceURL[0] !== '/') {\n      sourceRoot += '/';\n    }\n    // The spec says:\n    //   Line 4: An optional source root, useful for relocating source\n    //   files on a server or removing repeated values in the\n    //   “sources” entry.  This value is prepended to the individual\n    //   entries in the “source” field.\n    sourceURL = sourceRoot + sourceURL;\n  }\n\n  // Historically, SourceMapConsumer did not take the sourceMapURL as\n  // a parameter.  This mode is still somewhat supported, which is why\n  // this code block is conditional.  However, it's preferable to pass\n  // the source map URL to SourceMapConsumer, so that this function\n  // can implement the source URL resolution algorithm as outlined in\n  // the spec.  This block is basically the equivalent of:\n  //    new URL(sourceURL, sourceMapURL).toString()\n  // ... except it avoids using URL, which wasn't available in the\n  // older releases of node still supported by this library.\n  //\n  // The spec says:\n  //   If the sources are not absolute URLs after prepending of the\n  //   “sourceRoot”, the sources are resolved relative to the\n  //   SourceMap (like resolving script src in a html document).\n  if (sourceMapURL) {\n    var parsed = urlParse(sourceMapURL);\n    if (!parsed) {\n      throw new Error(\"sourceMapURL could not be parsed\");\n    }\n    if (parsed.path) {\n      // Strip the last path component, but keep the \"/\".\n      var index = parsed.path.lastIndexOf('/');\n      if (index >= 0) {\n        parsed.path = parsed.path.substring(0, index + 1);\n      }\n    }\n    sourceURL = join(urlGenerate(parsed), sourceURL);\n  }\n\n  return normalize(sourceURL);\n}\nexports.computeSourceURL = computeSourceURL;\n","/* -*- Mode: js; js-indent-level: 2; -*- */\n/*\n * Copyright 2011 Mozilla Foundation and contributors\n * Licensed under the New BSD license. See LICENSE or:\n * http://opensource.org/licenses/BSD-3-Clause\n */\n\nvar util = require('./util');\nvar has = Object.prototype.hasOwnProperty;\nvar hasNativeMap = typeof Map !== \"undefined\";\n\n/**\n * A data structure which is a combination of an array and a set. Adding a new\n * member is O(1), testing for membership is O(1), and finding the index of an\n * element is O(1). Removing elements from the set is not supported. Only\n * strings are supported for membership.\n */\nfunction ArraySet() {\n  this._array = [];\n  this._set = hasNativeMap ? new Map() : Object.create(null);\n}\n\n/**\n * Static method for creating ArraySet instances from an existing array.\n */\nArraySet.fromArray = function ArraySet_fromArray(aArray, aAllowDuplicates) {\n  var set = new ArraySet();\n  for (var i = 0, len = aArray.length; i < len; i++) {\n    set.add(aArray[i], aAllowDuplicates);\n  }\n  return set;\n};\n\n/**\n * Return how many unique items are in this ArraySet. If duplicates have been\n * added, than those do not count towards the size.\n *\n * @returns Number\n */\nArraySet.prototype.size = function ArraySet_size() {\n  return hasNativeMap ? this._set.size : Object.getOwnPropertyNames(this._set).length;\n};\n\n/**\n * Add the given string to this set.\n *\n * @param String aStr\n */\nArraySet.prototype.add = function ArraySet_add(aStr, aAllowDuplicates) {\n  var sStr = hasNativeMap ? aStr : util.toSetString(aStr);\n  var isDuplicate = hasNativeMap ? this.has(aStr) : has.call(this._set, sStr);\n  var idx = this._array.length;\n  if (!isDuplicate || aAllowDuplicates) {\n    this._array.push(aStr);\n  }\n  if (!isDuplicate) {\n    if (hasNativeMap) {\n      this._set.set(aStr, idx);\n    } else {\n      this._set[sStr] = idx;\n    }\n  }\n};\n\n/**\n * Is the given string a member of this set?\n *\n * @param String aStr\n */\nArraySet.prototype.has = function ArraySet_has(aStr) {\n  if (hasNativeMap) {\n    return this._set.has(aStr);\n  } else {\n    var sStr = util.toSetString(aStr);\n    return has.call(this._set, sStr);\n  }\n};\n\n/**\n * What is the index of the given string in the array?\n *\n * @param String aStr\n */\nArraySet.prototype.indexOf = function ArraySet_indexOf(aStr) {\n  if (hasNativeMap) {\n    var idx = this._set.get(aStr);\n    if (idx >= 0) {\n        return idx;\n    }\n  } else {\n    var sStr = util.toSetString(aStr);\n    if (has.call(this._set, sStr)) {\n      return this._set[sStr];\n    }\n  }\n\n  throw new Error('\"' + aStr + '\" is not in the set.');\n};\n\n/**\n * What is the element at the given index?\n *\n * @param Number aIdx\n */\nArraySet.prototype.at = function ArraySet_at(aIdx) {\n  if (aIdx >= 0 && aIdx < this._array.length) {\n    return this._array[aIdx];\n  }\n  throw new Error('No element indexed by ' + aIdx);\n};\n\n/**\n * Returns the array representation of this set (which has the proper indices\n * indicated by indexOf). Note that this is a copy of the internal array used\n * for storing the members so that no one can mess with internal state.\n */\nArraySet.prototype.toArray = function ArraySet_toArray() {\n  return this._array.slice();\n};\n\nexports.ArraySet = ArraySet;\n","/* -*- Mode: js; js-indent-level: 2; -*- */\n/*\n * Copyright 2014 Mozilla Foundation and contributors\n * Licensed under the New BSD license. See LICENSE or:\n * http://opensource.org/licenses/BSD-3-Clause\n */\n\nvar util = require('./util');\n\n/**\n * Determine whether mappingB is after mappingA with respect to generated\n * position.\n */\nfunction generatedPositionAfter(mappingA, mappingB) {\n  // Optimized for most common case\n  var lineA = mappingA.generatedLine;\n  var lineB = mappingB.generatedLine;\n  var columnA = mappingA.generatedColumn;\n  var columnB = mappingB.generatedColumn;\n  return lineB > lineA || lineB == lineA && columnB >= columnA ||\n         util.compareByGeneratedPositionsInflated(mappingA, mappingB) <= 0;\n}\n\n/**\n * A data structure to provide a sorted view of accumulated mappings in a\n * performance conscious manner. It trades a neglibable overhead in general\n * case for a large speedup in case of mappings being added in order.\n */\nfunction MappingList() {\n  this._array = [];\n  this._sorted = true;\n  // Serves as infimum\n  this._last = {generatedLine: -1, generatedColumn: 0};\n}\n\n/**\n * Iterate through internal items. This method takes the same arguments that\n * `Array.prototype.forEach` takes.\n *\n * NOTE: The order of the mappings is NOT guaranteed.\n */\nMappingList.prototype.unsortedForEach =\n  function MappingList_forEach(aCallback, aThisArg) {\n    this._array.forEach(aCallback, aThisArg);\n  };\n\n/**\n * Add the given source mapping.\n *\n * @param Object aMapping\n */\nMappingList.prototype.add = function MappingList_add(aMapping) {\n  if (generatedPositionAfter(this._last, aMapping)) {\n    this._last = aMapping;\n    this._array.push(aMapping);\n  } else {\n    this._sorted = false;\n    this._array.push(aMapping);\n  }\n};\n\n/**\n * Returns the flat, sorted array of mappings. The mappings are sorted by\n * generated position.\n *\n * WARNING: This method returns internal data without copying, for\n * performance. The return value must NOT be mutated, and should be treated as\n * an immutable borrow. If you want to take ownership, you must make your own\n * copy.\n */\nMappingList.prototype.toArray = function MappingList_toArray() {\n  if (!this._sorted) {\n    this._array.sort(util.compareByGeneratedPositionsInflated);\n    this._sorted = true;\n  }\n  return this._array;\n};\n\nexports.MappingList = MappingList;\n","/* -*- Mode: js; js-indent-level: 2; -*- */\n/*\n * Copyright 2011 Mozilla Foundation and contributors\n * Licensed under the New BSD license. See LICENSE or:\n * http://opensource.org/licenses/BSD-3-Clause\n */\n\nvar util = require('./util');\nvar binarySearch = require('./binary-search');\nvar ArraySet = require('./array-set').ArraySet;\nvar base64VLQ = require('./base64-vlq');\nvar quickSort = require('./quick-sort').quickSort;\n\nfunction SourceMapConsumer(aSourceMap, aSourceMapURL) {\n  var sourceMap = aSourceMap;\n  if (typeof aSourceMap === 'string') {\n    sourceMap = util.parseSourceMapInput(aSourceMap);\n  }\n\n  return sourceMap.sections != null\n    ? new IndexedSourceMapConsumer(sourceMap, aSourceMapURL)\n    : new BasicSourceMapConsumer(sourceMap, aSourceMapURL);\n}\n\nSourceMapConsumer.fromSourceMap = function(aSourceMap, aSourceMapURL) {\n  return BasicSourceMapConsumer.fromSourceMap(aSourceMap, aSourceMapURL);\n}\n\n/**\n * The version of the source mapping spec that we are consuming.\n */\nSourceMapConsumer.prototype._version = 3;\n\n// `__generatedMappings` and `__originalMappings` are arrays that hold the\n// parsed mapping coordinates from the source map's \"mappings\" attribute. They\n// are lazily instantiated, accessed via the `_generatedMappings` and\n// `_originalMappings` getters respectively, and we only parse the mappings\n// and create these arrays once queried for a source location. We jump through\n// these hoops because there can be many thousands of mappings, and parsing\n// them is expensive, so we only want to do it if we must.\n//\n// Each object in the arrays is of the form:\n//\n//     {\n//       generatedLine: The line number in the generated code,\n//       generatedColumn: The column number in the generated code,\n//       source: The path to the original source file that generated this\n//               chunk of code,\n//       originalLine: The line number in the original source that\n//                     corresponds to this chunk of generated code,\n//       originalColumn: The column number in the original source that\n//                       corresponds to this chunk of generated code,\n//       name: The name of the original symbol which generated this chunk of\n//             code.\n//     }\n//\n// All properties except for `generatedLine` and `generatedColumn` can be\n// `null`.\n//\n// `_generatedMappings` is ordered by the generated positions.\n//\n// `_originalMappings` is ordered by the original positions.\n\nSourceMapConsumer.prototype.__generatedMappings = null;\nObject.defineProperty(SourceMapConsumer.prototype, '_generatedMappings', {\n  configurable: true,\n  enumerable: true,\n  get: function () {\n    if (!this.__generatedMappings) {\n      this._parseMappings(this._mappings, this.sourceRoot);\n    }\n\n    return this.__generatedMappings;\n  }\n});\n\nSourceMapConsumer.prototype.__originalMappings = null;\nObject.defineProperty(SourceMapConsumer.prototype, '_originalMappings', {\n  configurable: true,\n  enumerable: true,\n  get: function () {\n    if (!this.__originalMappings) {\n      this._parseMappings(this._mappings, this.sourceRoot);\n    }\n\n    return this.__originalMappings;\n  }\n});\n\nSourceMapConsumer.prototype._charIsMappingSeparator =\n  function SourceMapConsumer_charIsMappingSeparator(aStr, index) {\n    var c = aStr.charAt(index);\n    return c === \";\" || c === \",\";\n  };\n\n/**\n * Parse the mappings in a string in to a data structure which we can easily\n * query (the ordered arrays in the `this.__generatedMappings` and\n * `this.__originalMappings` properties).\n */\nSourceMapConsumer.prototype._parseMappings =\n  function SourceMapConsumer_parseMappings(aStr, aSourceRoot) {\n    throw new Error(\"Subclasses must implement _parseMappings\");\n  };\n\nSourceMapConsumer.GENERATED_ORDER = 1;\nSourceMapConsumer.ORIGINAL_ORDER = 2;\n\nSourceMapConsumer.GREATEST_LOWER_BOUND = 1;\nSourceMapConsumer.LEAST_UPPER_BOUND = 2;\n\n/**\n * Iterate over each mapping between an original source/line/column and a\n * generated line/column in this source map.\n *\n * @param Function aCallback\n *        The function that is called with each mapping.\n * @param Object aContext\n *        Optional. If specified, this object will be the value of `this` every\n *        time that `aCallback` is called.\n * @param aOrder\n *        Either `SourceMapConsumer.GENERATED_ORDER` or\n *        `SourceMapConsumer.ORIGINAL_ORDER`. Specifies whether you want to\n *        iterate over the mappings sorted by the generated file's line/column\n *        order or the original's source/line/column order, respectively. Defaults to\n *        `SourceMapConsumer.GENERATED_ORDER`.\n */\nSourceMapConsumer.prototype.eachMapping =\n  function SourceMapConsumer_eachMapping(aCallback, aContext, aOrder) {\n    var context = aContext || null;\n    var order = aOrder || SourceMapConsumer.GENERATED_ORDER;\n\n    var mappings;\n    switch (order) {\n    case SourceMapConsumer.GENERATED_ORDER:\n      mappings = this._generatedMappings;\n      break;\n    case SourceMapConsumer.ORIGINAL_ORDER:\n      mappings = this._originalMappings;\n      break;\n    default:\n      throw new Error(\"Unknown order of iteration.\");\n    }\n\n    var sourceRoot = this.sourceRoot;\n    mappings.map(function (mapping) {\n      var source = mapping.source === null ? null : this._sources.at(mapping.source);\n      source = util.computeSourceURL(sourceRoot, source, this._sourceMapURL);\n      return {\n        source: source,\n        generatedLine: mapping.generatedLine,\n        generatedColumn: mapping.generatedColumn,\n        originalLine: mapping.originalLine,\n        originalColumn: mapping.originalColumn,\n        name: mapping.name === null ? null : this._names.at(mapping.name)\n      };\n    }, this).forEach(aCallback, context);\n  };\n\n/**\n * Returns all generated line and column information for the original source,\n * line, and column provided. If no column is provided, returns all mappings\n * corresponding to a either the line we are searching for or the next\n * closest line that has any mappings. Otherwise, returns all mappings\n * corresponding to the given line and either the column we are searching for\n * or the next closest column that has any offsets.\n *\n * The only argument is an object with the following properties:\n *\n *   - source: The filename of the original source.\n *   - line: The line number in the original source.  The line number is 1-based.\n *   - column: Optional. the column number in the original source.\n *    The column number is 0-based.\n *\n * and an array of objects is returned, each with the following properties:\n *\n *   - line: The line number in the generated source, or null.  The\n *    line number is 1-based.\n *   - column: The column number in the generated source, or null.\n *    The column number is 0-based.\n */\nSourceMapConsumer.prototype.allGeneratedPositionsFor =\n  function SourceMapConsumer_allGeneratedPositionsFor(aArgs) {\n    var line = util.getArg(aArgs, 'line');\n\n    // When there is no exact match, BasicSourceMapConsumer.prototype._findMapping\n    // returns the index of the closest mapping less than the needle. By\n    // setting needle.originalColumn to 0, we thus find the last mapping for\n    // the given line, provided such a mapping exists.\n    var needle = {\n      source: util.getArg(aArgs, 'source'),\n      originalLine: line,\n      originalColumn: util.getArg(aArgs, 'column', 0)\n    };\n\n    needle.source = this._findSourceIndex(needle.source);\n    if (needle.source < 0) {\n      return [];\n    }\n\n    var mappings = [];\n\n    var index = this._findMapping(needle,\n                                  this._originalMappings,\n                                  \"originalLine\",\n                                  \"originalColumn\",\n                                  util.compareByOriginalPositions,\n                                  binarySearch.LEAST_UPPER_BOUND);\n    if (index >= 0) {\n      var mapping = this._originalMappings[index];\n\n      if (aArgs.column === undefined) {\n        var originalLine = mapping.originalLine;\n\n        // Iterate until either we run out of mappings, or we run into\n        // a mapping for a different line than the one we found. Since\n        // mappings are sorted, this is guaranteed to find all mappings for\n        // the line we found.\n        while (mapping && mapping.originalLine === originalLine) {\n          mappings.push({\n            line: util.getArg(mapping, 'generatedLine', null),\n            column: util.getArg(mapping, 'generatedColumn', null),\n            lastColumn: util.getArg(mapping, 'lastGeneratedColumn', null)\n          });\n\n          mapping = this._originalMappings[++index];\n        }\n      } else {\n        var originalColumn = mapping.originalColumn;\n\n        // Iterate until either we run out of mappings, or we run into\n        // a mapping for a different line than the one we were searching for.\n        // Since mappings are sorted, this is guaranteed to find all mappings for\n        // the line we are searching for.\n        while (mapping &&\n               mapping.originalLine === line &&\n               mapping.originalColumn == originalColumn) {\n          mappings.push({\n            line: util.getArg(mapping, 'generatedLine', null),\n            column: util.getArg(mapping, 'generatedColumn', null),\n            lastColumn: util.getArg(mapping, 'lastGeneratedColumn', null)\n          });\n\n          mapping = this._originalMappings[++index];\n        }\n      }\n    }\n\n    return mappings;\n  };\n\nexports.SourceMapConsumer = SourceMapConsumer;\n\n/**\n * A BasicSourceMapConsumer instance represents a parsed source map which we can\n * query for information about the original file positions by giving it a file\n * position in the generated source.\n *\n * The first parameter is the raw source map (either as a JSON string, or\n * already parsed to an object). According to the spec, source maps have the\n * following attributes:\n *\n *   - version: Which version of the source map spec this map is following.\n *   - sources: An array of URLs to the original source files.\n *   - names: An array of identifiers which can be referrenced by individual mappings.\n *   - sourceRoot: Optional. The URL root from which all sources are relative.\n *   - sourcesContent: Optional. An array of contents of the original source files.\n *   - mappings: A string of base64 VLQs which contain the actual mappings.\n *   - file: Optional. The generated file this source map is associated with.\n *\n * Here is an example source map, taken from the source map spec[0]:\n *\n *     {\n *       version : 3,\n *       file: \"out.js\",\n *       sourceRoot : \"\",\n *       sources: [\"foo.js\", \"bar.js\"],\n *       names: [\"src\", \"maps\", \"are\", \"fun\"],\n *       mappings: \"AA,AB;;ABCDE;\"\n *     }\n *\n * The second parameter, if given, is a string whose value is the URL\n * at which the source map was found.  This URL is used to compute the\n * sources array.\n *\n * [0]: https://docs.google.com/document/d/1U1RGAehQwRypUTovF1KRlpiOFze0b-_2gc6fAH0KY0k/edit?pli=1#\n */\nfunction BasicSourceMapConsumer(aSourceMap, aSourceMapURL) {\n  var sourceMap = aSourceMap;\n  if (typeof aSourceMap === 'string') {\n    sourceMap = util.parseSourceMapInput(aSourceMap);\n  }\n\n  var version = util.getArg(sourceMap, 'version');\n  var sources = util.getArg(sourceMap, 'sources');\n  // Sass 3.3 leaves out the 'names' array, so we deviate from the spec (which\n  // requires the array) to play nice here.\n  var names = util.getArg(sourceMap, 'names', []);\n  var sourceRoot = util.getArg(sourceMap, 'sourceRoot', null);\n  var sourcesContent = util.getArg(sourceMap, 'sourcesContent', null);\n  var mappings = util.getArg(sourceMap, 'mappings');\n  var file = util.getArg(sourceMap, 'file', null);\n\n  // Once again, Sass deviates from the spec and supplies the version as a\n  // string rather than a number, so we use loose equality checking here.\n  if (version != this._version) {\n    throw new Error('Unsupported version: ' + version);\n  }\n\n  if (sourceRoot) {\n    sourceRoot = util.normalize(sourceRoot);\n  }\n\n  sources = sources\n    .map(String)\n    // Some source maps produce relative source paths like \"./foo.js\" instead of\n    // \"foo.js\".  Normalize these first so that future comparisons will succeed.\n    // See bugzil.la/1090768.\n    .map(util.normalize)\n    // Always ensure that absolute sources are internally stored relative to\n    // the source root, if the source root is absolute. Not doing this would\n    // be particularly problematic when the source root is a prefix of the\n    // source (valid, but why??). See github issue #199 and bugzil.la/1188982.\n    .map(function (source) {\n      return sourceRoot && util.isAbsolute(sourceRoot) && util.isAbsolute(source)\n        ? util.relative(sourceRoot, source)\n        : source;\n    });\n\n  // Pass `true` below to allow duplicate names and sources. While source maps\n  // are intended to be compressed and deduplicated, the TypeScript compiler\n  // sometimes generates source maps with duplicates in them. See Github issue\n  // #72 and bugzil.la/889492.\n  this._names = ArraySet.fromArray(names.map(String), true);\n  this._sources = ArraySet.fromArray(sources, true);\n\n  this._absoluteSources = this._sources.toArray().map(function (s) {\n    return util.computeSourceURL(sourceRoot, s, aSourceMapURL);\n  });\n\n  this.sourceRoot = sourceRoot;\n  this.sourcesContent = sourcesContent;\n  this._mappings = mappings;\n  this._sourceMapURL = aSourceMapURL;\n  this.file = file;\n}\n\nBasicSourceMapConsumer.prototype = Object.create(SourceMapConsumer.prototype);\nBasicSourceMapConsumer.prototype.consumer = SourceMapConsumer;\n\n/**\n * Utility function to find the index of a source.  Returns -1 if not\n * found.\n */\nBasicSourceMapConsumer.prototype._findSourceIndex = function(aSource) {\n  var relativeSource = aSource;\n  if (this.sourceRoot != null) {\n    relativeSource = util.relative(this.sourceRoot, relativeSource);\n  }\n\n  if (this._sources.has(relativeSource)) {\n    return this._sources.indexOf(relativeSource);\n  }\n\n  // Maybe aSource is an absolute URL as returned by |sources|.  In\n  // this case we can't simply undo the transform.\n  var i;\n  for (i = 0; i < this._absoluteSources.length; ++i) {\n    if (this._absoluteSources[i] == aSource) {\n      return i;\n    }\n  }\n\n  return -1;\n};\n\n/**\n * Create a BasicSourceMapConsumer from a SourceMapGenerator.\n *\n * @param SourceMapGenerator aSourceMap\n *        The source map that will be consumed.\n * @param String aSourceMapURL\n *        The URL at which the source map can be found (optional)\n * @returns BasicSourceMapConsumer\n */\nBasicSourceMapConsumer.fromSourceMap =\n  function SourceMapConsumer_fromSourceMap(aSourceMap, aSourceMapURL) {\n    var smc = Object.create(BasicSourceMapConsumer.prototype);\n\n    var names = smc._names = ArraySet.fromArray(aSourceMap._names.toArray(), true);\n    var sources = smc._sources = ArraySet.fromArray(aSourceMap._sources.toArray(), true);\n    smc.sourceRoot = aSourceMap._sourceRoot;\n    smc.sourcesContent = aSourceMap._generateSourcesContent(smc._sources.toArray(),\n                                                            smc.sourceRoot);\n    smc.file = aSourceMap._file;\n    smc._sourceMapURL = aSourceMapURL;\n    smc._absoluteSources = smc._sources.toArray().map(function (s) {\n      return util.computeSourceURL(smc.sourceRoot, s, aSourceMapURL);\n    });\n\n    // Because we are modifying the entries (by converting string sources and\n    // names to indices into the sources and names ArraySets), we have to make\n    // a copy of the entry or else bad things happen. Shared mutable state\n    // strikes again! See github issue #191.\n\n    var generatedMappings = aSourceMap._mappings.toArray().slice();\n    var destGeneratedMappings = smc.__generatedMappings = [];\n    var destOriginalMappings = smc.__originalMappings = [];\n\n    for (var i = 0, length = generatedMappings.length; i < length; i++) {\n      var srcMapping = generatedMappings[i];\n      var destMapping = new Mapping;\n      destMapping.generatedLine = srcMapping.generatedLine;\n      destMapping.generatedColumn = srcMapping.generatedColumn;\n\n      if (srcMapping.source) {\n        destMapping.source = sources.indexOf(srcMapping.source);\n        destMapping.originalLine = srcMapping.originalLine;\n        destMapping.originalColumn = srcMapping.originalColumn;\n\n        if (srcMapping.name) {\n          destMapping.name = names.indexOf(srcMapping.name);\n        }\n\n        destOriginalMappings.push(destMapping);\n      }\n\n      destGeneratedMappings.push(destMapping);\n    }\n\n    quickSort(smc.__originalMappings, util.compareByOriginalPositions);\n\n    return smc;\n  };\n\n/**\n * The version of the source mapping spec that we are consuming.\n */\nBasicSourceMapConsumer.prototype._version = 3;\n\n/**\n * The list of original sources.\n */\nObject.defineProperty(BasicSourceMapConsumer.prototype, 'sources', {\n  get: function () {\n    return this._absoluteSources.slice();\n  }\n});\n\n/**\n * Provide the JIT with a nice shape / hidden class.\n */\nfunction Mapping() {\n  this.generatedLine = 0;\n  this.generatedColumn = 0;\n  this.source = null;\n  this.originalLine = null;\n  this.originalColumn = null;\n  this.name = null;\n}\n\n/**\n * Parse the mappings in a string in to a data structure which we can easily\n * query (the ordered arrays in the `this.__generatedMappings` and\n * `this.__originalMappings` properties).\n */\nBasicSourceMapConsumer.prototype._parseMappings =\n  function SourceMapConsumer_parseMappings(aStr, aSourceRoot) {\n    var generatedLine = 1;\n    var previousGeneratedColumn = 0;\n    var previousOriginalLine = 0;\n    var previousOriginalColumn = 0;\n    var previousSource = 0;\n    var previousName = 0;\n    var length = aStr.length;\n    var index = 0;\n    var cachedSegments = {};\n    var temp = {};\n    var originalMappings = [];\n    var generatedMappings = [];\n    var mapping, str, segment, end, value;\n\n    while (index < length) {\n      if (aStr.charAt(index) === ';') {\n        generatedLine++;\n        index++;\n        previousGeneratedColumn = 0;\n      }\n      else if (aStr.charAt(index) === ',') {\n        index++;\n      }\n      else {\n        mapping = new Mapping();\n        mapping.generatedLine = generatedLine;\n\n        // Because each offset is encoded relative to the previous one,\n        // many segments often have the same encoding. We can exploit this\n        // fact by caching the parsed variable length fields of each segment,\n        // allowing us to avoid a second parse if we encounter the same\n        // segment again.\n        for (end = index; end < length; end++) {\n          if (this._charIsMappingSeparator(aStr, end)) {\n            break;\n          }\n        }\n        str = aStr.slice(index, end);\n\n        segment = cachedSegments[str];\n        if (segment) {\n          index += str.length;\n        } else {\n          segment = [];\n          while (index < end) {\n            base64VLQ.decode(aStr, index, temp);\n            value = temp.value;\n            index = temp.rest;\n            segment.push(value);\n          }\n\n          if (segment.length === 2) {\n            throw new Error('Found a source, but no line and column');\n          }\n\n          if (segment.length === 3) {\n            throw new Error('Found a source and line, but no column');\n          }\n\n          cachedSegments[str] = segment;\n        }\n\n        // Generated column.\n        mapping.generatedColumn = previousGeneratedColumn + segment[0];\n        previousGeneratedColumn = mapping.generatedColumn;\n\n        if (segment.length > 1) {\n          // Original source.\n          mapping.source = previousSource + segment[1];\n          previousSource += segment[1];\n\n          // Original line.\n          mapping.originalLine = previousOriginalLine + segment[2];\n          previousOriginalLine = mapping.originalLine;\n          // Lines are stored 0-based\n          mapping.originalLine += 1;\n\n          // Original column.\n          mapping.originalColumn = previousOriginalColumn + segment[3];\n          previousOriginalColumn = mapping.originalColumn;\n\n          if (segment.length > 4) {\n            // Original name.\n            mapping.name = previousName + segment[4];\n            previousName += segment[4];\n          }\n        }\n\n        generatedMappings.push(mapping);\n        if (typeof mapping.originalLine === 'number') {\n          originalMappings.push(mapping);\n        }\n      }\n    }\n\n    quickSort(generatedMappings, util.compareByGeneratedPositionsDeflated);\n    this.__generatedMappings = generatedMappings;\n\n    quickSort(originalMappings, util.compareByOriginalPositions);\n    this.__originalMappings = originalMappings;\n  };\n\n/**\n * Find the mapping that best matches the hypothetical \"needle\" mapping that\n * we are searching for in the given \"haystack\" of mappings.\n */\nBasicSourceMapConsumer.prototype._findMapping =\n  function SourceMapConsumer_findMapping(aNeedle, aMappings, aLineName,\n                                         aColumnName, aComparator, aBias) {\n    // To return the position we are searching for, we must first find the\n    // mapping for the given position and then return the opposite position it\n    // points to. Because the mappings are sorted, we can use binary search to\n    // find the best mapping.\n\n    if (aNeedle[aLineName] <= 0) {\n      throw new TypeError('Line must be greater than or equal to 1, got '\n                          + aNeedle[aLineName]);\n    }\n    if (aNeedle[aColumnName] < 0) {\n      throw new TypeError('Column must be greater than or equal to 0, got '\n                          + aNeedle[aColumnName]);\n    }\n\n    return binarySearch.search(aNeedle, aMappings, aComparator, aBias);\n  };\n\n/**\n * Compute the last column for each generated mapping. The last column is\n * inclusive.\n */\nBasicSourceMapConsumer.prototype.computeColumnSpans =\n  function SourceMapConsumer_computeColumnSpans() {\n    for (var index = 0; index < this._generatedMappings.length; ++index) {\n      var mapping = this._generatedMappings[index];\n\n      // Mappings do not contain a field for the last generated columnt. We\n      // can come up with an optimistic estimate, however, by assuming that\n      // mappings are contiguous (i.e. given two consecutive mappings, the\n      // first mapping ends where the second one starts).\n      if (index + 1 < this._generatedMappings.length) {\n        var nextMapping = this._generatedMappings[index + 1];\n\n        if (mapping.generatedLine === nextMapping.generatedLine) {\n          mapping.lastGeneratedColumn = nextMapping.generatedColumn - 1;\n          continue;\n        }\n      }\n\n      // The last mapping for each line spans the entire line.\n      mapping.lastGeneratedColumn = Infinity;\n    }\n  };\n\n/**\n * Returns the original source, line, and column information for the generated\n * source's line and column positions provided. The only argument is an object\n * with the following properties:\n *\n *   - line: The line number in the generated source.  The line number\n *     is 1-based.\n *   - column: The column number in the generated source.  The column\n *     number is 0-based.\n *   - bias: Either 'SourceMapConsumer.GREATEST_LOWER_BOUND' or\n *     'SourceMapConsumer.LEAST_UPPER_BOUND'. Specifies whether to return the\n *     closest element that is smaller than or greater than the one we are\n *     searching for, respectively, if the exact element cannot be found.\n *     Defaults to 'SourceMapConsumer.GREATEST_LOWER_BOUND'.\n *\n * and an object is returned with the following properties:\n *\n *   - source: The original source file, or null.\n *   - line: The line number in the original source, or null.  The\n *     line number is 1-based.\n *   - column: The column number in the original source, or null.  The\n *     column number is 0-based.\n *   - name: The original identifier, or null.\n */\nBasicSourceMapConsumer.prototype.originalPositionFor =\n  function SourceMapConsumer_originalPositionFor(aArgs) {\n    var needle = {\n      generatedLine: util.getArg(aArgs, 'line'),\n      generatedColumn: util.getArg(aArgs, 'column')\n    };\n\n    var index = this._findMapping(\n      needle,\n      this._generatedMappings,\n      \"generatedLine\",\n      \"generatedColumn\",\n      util.compareByGeneratedPositionsDeflated,\n      util.getArg(aArgs, 'bias', SourceMapConsumer.GREATEST_LOWER_BOUND)\n    );\n\n    if (index >= 0) {\n      var mapping = this._generatedMappings[index];\n\n      if (mapping.generatedLine === needle.generatedLine) {\n        var source = util.getArg(mapping, 'source', null);\n        if (source !== null) {\n          source = this._sources.at(source);\n          source = util.computeSourceURL(this.sourceRoot, source, this._sourceMapURL);\n        }\n        var name = util.getArg(mapping, 'name', null);\n        if (name !== null) {\n          name = this._names.at(name);\n        }\n        return {\n          source: source,\n          line: util.getArg(mapping, 'originalLine', null),\n          column: util.getArg(mapping, 'originalColumn', null),\n          name: name\n        };\n      }\n    }\n\n    return {\n      source: null,\n      line: null,\n      column: null,\n      name: null\n    };\n  };\n\n/**\n * Return true if we have the source content for every source in the source\n * map, false otherwise.\n */\nBasicSourceMapConsumer.prototype.hasContentsOfAllSources =\n  function BasicSourceMapConsumer_hasContentsOfAllSources() {\n    if (!this.sourcesContent) {\n      return false;\n    }\n    return this.sourcesContent.length >= this._sources.size() &&\n      !this.sourcesContent.some(function (sc) { return sc == null; });\n  };\n\n/**\n * Returns the original source content. The only argument is the url of the\n * original source file. Returns null if no original source content is\n * available.\n */\nBasicSourceMapConsumer.prototype.sourceContentFor =\n  function SourceMapConsumer_sourceContentFor(aSource, nullOnMissing) {\n    if (!this.sourcesContent) {\n      return null;\n    }\n\n    var index = this._findSourceIndex(aSource);\n    if (index >= 0) {\n      return this.sourcesContent[index];\n    }\n\n    var relativeSource = aSource;\n    if (this.sourceRoot != null) {\n      relativeSource = util.relative(this.sourceRoot, relativeSource);\n    }\n\n    var url;\n    if (this.sourceRoot != null\n        && (url = util.urlParse(this.sourceRoot))) {\n      // XXX: file:// URIs and absolute paths lead to unexpected behavior for\n      // many users. We can help them out when they expect file:// URIs to\n      // behave like it would if they were running a local HTTP server. See\n      // https://bugzilla.mozilla.org/show_bug.cgi?id=885597.\n      var fileUriAbsPath = relativeSource.replace(/^file:\\/\\//, \"\");\n      if (url.scheme == \"file\"\n          && this._sources.has(fileUriAbsPath)) {\n        return this.sourcesContent[this._sources.indexOf(fileUriAbsPath)]\n      }\n\n      if ((!url.path || url.path == \"/\")\n          && this._sources.has(\"/\" + relativeSource)) {\n        return this.sourcesContent[this._sources.indexOf(\"/\" + relativeSource)];\n      }\n    }\n\n    // This function is used recursively from\n    // IndexedSourceMapConsumer.prototype.sourceContentFor. In that case, we\n    // don't want to throw if we can't find the source - we just want to\n    // return null, so we provide a flag to exit gracefully.\n    if (nullOnMissing) {\n      return null;\n    }\n    else {\n      throw new Error('\"' + relativeSource + '\" is not in the SourceMap.');\n    }\n  };\n\n/**\n * Returns the generated line and column information for the original source,\n * line, and column positions provided. The only argument is an object with\n * the following properties:\n *\n *   - source: The filename of the original source.\n *   - line: The line number in the original source.  The line number\n *     is 1-based.\n *   - column: The column number in the original source.  The column\n *     number is 0-based.\n *   - bias: Either 'SourceMapConsumer.GREATEST_LOWER_BOUND' or\n *     'SourceMapConsumer.LEAST_UPPER_BOUND'. Specifies whether to return the\n *     closest element that is smaller than or greater than the one we are\n *     searching for, respectively, if the exact element cannot be found.\n *     Defaults to 'SourceMapConsumer.GREATEST_LOWER_BOUND'.\n *\n * and an object is returned with the following properties:\n *\n *   - line: The line number in the generated source, or null.  The\n *     line number is 1-based.\n *   - column: The column number in the generated source, or null.\n *     The column number is 0-based.\n */\nBasicSourceMapConsumer.prototype.generatedPositionFor =\n  function SourceMapConsumer_generatedPositionFor(aArgs) {\n    var source = util.getArg(aArgs, 'source');\n    source = this._findSourceIndex(source);\n    if (source < 0) {\n      return {\n        line: null,\n        column: null,\n        lastColumn: null\n      };\n    }\n\n    var needle = {\n      source: source,\n      originalLine: util.getArg(aArgs, 'line'),\n      originalColumn: util.getArg(aArgs, 'column')\n    };\n\n    var index = this._findMapping(\n      needle,\n      this._originalMappings,\n      \"originalLine\",\n      \"originalColumn\",\n      util.compareByOriginalPositions,\n      util.getArg(aArgs, 'bias', SourceMapConsumer.GREATEST_LOWER_BOUND)\n    );\n\n    if (index >= 0) {\n      var mapping = this._originalMappings[index];\n\n      if (mapping.source === needle.source) {\n        return {\n          line: util.getArg(mapping, 'generatedLine', null),\n          column: util.getArg(mapping, 'generatedColumn', null),\n          lastColumn: util.getArg(mapping, 'lastGeneratedColumn', null)\n        };\n      }\n    }\n\n    return {\n      line: null,\n      column: null,\n      lastColumn: null\n    };\n  };\n\nexports.BasicSourceMapConsumer = BasicSourceMapConsumer;\n\n/**\n * An IndexedSourceMapConsumer instance represents a parsed source map which\n * we can query for information. It differs from BasicSourceMapConsumer in\n * that it takes \"indexed\" source maps (i.e. ones with a \"sections\" field) as\n * input.\n *\n * The first parameter is a raw source map (either as a JSON string, or already\n * parsed to an object). According to the spec for indexed source maps, they\n * have the following attributes:\n *\n *   - version: Which version of the source map spec this map is following.\n *   - file: Optional. The generated file this source map is associated with.\n *   - sections: A list of section definitions.\n *\n * Each value under the \"sections\" field has two fields:\n *   - offset: The offset into the original specified at which this section\n *       begins to apply, defined as an object with a \"line\" and \"column\"\n *       field.\n *   - map: A source map definition. This source map could also be indexed,\n *       but doesn't have to be.\n *\n * Instead of the \"map\" field, it's also possible to have a \"url\" field\n * specifying a URL to retrieve a source map from, but that's currently\n * unsupported.\n *\n * Here's an example source map, taken from the source map spec[0], but\n * modified to omit a section which uses the \"url\" field.\n *\n *  {\n *    version : 3,\n *    file: \"app.js\",\n *    sections: [{\n *      offset: {line:100, column:10},\n *      map: {\n *        version : 3,\n *        file: \"section.js\",\n *        sources: [\"foo.js\", \"bar.js\"],\n *        names: [\"src\", \"maps\", \"are\", \"fun\"],\n *        mappings: \"AAAA,E;;ABCDE;\"\n *      }\n *    }],\n *  }\n *\n * The second parameter, if given, is a string whose value is the URL\n * at which the source map was found.  This URL is used to compute the\n * sources array.\n *\n * [0]: https://docs.google.com/document/d/1U1RGAehQwRypUTovF1KRlpiOFze0b-_2gc6fAH0KY0k/edit#heading=h.535es3xeprgt\n */\nfunction IndexedSourceMapConsumer(aSourceMap, aSourceMapURL) {\n  var sourceMap = aSourceMap;\n  if (typeof aSourceMap === 'string') {\n    sourceMap = util.parseSourceMapInput(aSourceMap);\n  }\n\n  var version = util.getArg(sourceMap, 'version');\n  var sections = util.getArg(sourceMap, 'sections');\n\n  if (version != this._version) {\n    throw new Error('Unsupported version: ' + version);\n  }\n\n  this._sources = new ArraySet();\n  this._names = new ArraySet();\n\n  var lastOffset = {\n    line: -1,\n    column: 0\n  };\n  this._sections = sections.map(function (s) {\n    if (s.url) {\n      // The url field will require support for asynchronicity.\n      // See https://github.com/mozilla/source-map/issues/16\n      throw new Error('Support for url field in sections not implemented.');\n    }\n    var offset = util.getArg(s, 'offset');\n    var offsetLine = util.getArg(offset, 'line');\n    var offsetColumn = util.getArg(offset, 'column');\n\n    if (offsetLine < lastOffset.line ||\n        (offsetLine === lastOffset.line && offsetColumn < lastOffset.column)) {\n      throw new Error('Section offsets must be ordered and non-overlapping.');\n    }\n    lastOffset = offset;\n\n    return {\n      generatedOffset: {\n        // The offset fields are 0-based, but we use 1-based indices when\n        // encoding/decoding from VLQ.\n        generatedLine: offsetLine + 1,\n        generatedColumn: offsetColumn + 1\n      },\n      consumer: new SourceMapConsumer(util.getArg(s, 'map'), aSourceMapURL)\n    }\n  });\n}\n\nIndexedSourceMapConsumer.prototype = Object.create(SourceMapConsumer.prototype);\nIndexedSourceMapConsumer.prototype.constructor = SourceMapConsumer;\n\n/**\n * The version of the source mapping spec that we are consuming.\n */\nIndexedSourceMapConsumer.prototype._version = 3;\n\n/**\n * The list of original sources.\n */\nObject.defineProperty(IndexedSourceMapConsumer.prototype, 'sources', {\n  get: function () {\n    var sources = [];\n    for (var i = 0; i < this._sections.length; i++) {\n      for (var j = 0; j < this._sections[i].consumer.sources.length; j++) {\n        sources.push(this._sections[i].consumer.sources[j]);\n      }\n    }\n    return sources;\n  }\n});\n\n/**\n * Returns the original source, line, and column information for the generated\n * source's line and column positions provided. The only argument is an object\n * with the following properties:\n *\n *   - line: The line number in the generated source.  The line number\n *     is 1-based.\n *   - column: The column number in the generated source.  The column\n *     number is 0-based.\n *\n * and an object is returned with the following properties:\n *\n *   - source: The original source file, or null.\n *   - line: The line number in the original source, or null.  The\n *     line number is 1-based.\n *   - column: The column number in the original source, or null.  The\n *     column number is 0-based.\n *   - name: The original identifier, or null.\n */\nIndexedSourceMapConsumer.prototype.originalPositionFor =\n  function IndexedSourceMapConsumer_originalPositionFor(aArgs) {\n    var needle = {\n      generatedLine: util.getArg(aArgs, 'line'),\n      generatedColumn: util.getArg(aArgs, 'column')\n    };\n\n    // Find the section containing the generated position we're trying to map\n    // to an original position.\n    var sectionIndex = binarySearch.search(needle, this._sections,\n      function(needle, section) {\n        var cmp = needle.generatedLine - section.generatedOffset.generatedLine;\n        if (cmp) {\n          return cmp;\n        }\n\n        return (needle.generatedColumn -\n                section.generatedOffset.generatedColumn);\n      });\n    var section = this._sections[sectionIndex];\n\n    if (!section) {\n      return {\n        source: null,\n        line: null,\n        column: null,\n        name: null\n      };\n    }\n\n    return section.consumer.originalPositionFor({\n      line: needle.generatedLine -\n        (section.generatedOffset.generatedLine - 1),\n      column: needle.generatedColumn -\n        (section.generatedOffset.generatedLine === needle.generatedLine\n         ? section.generatedOffset.generatedColumn - 1\n         : 0),\n      bias: aArgs.bias\n    });\n  };\n\n/**\n * Return true if we have the source content for every source in the source\n * map, false otherwise.\n */\nIndexedSourceMapConsumer.prototype.hasContentsOfAllSources =\n  function IndexedSourceMapConsumer_hasContentsOfAllSources() {\n    return this._sections.every(function (s) {\n      return s.consumer.hasContentsOfAllSources();\n    });\n  };\n\n/**\n * Returns the original source content. The only argument is the url of the\n * original source file. Returns null if no original source content is\n * available.\n */\nIndexedSourceMapConsumer.prototype.sourceContentFor =\n  function IndexedSourceMapConsumer_sourceContentFor(aSource, nullOnMissing) {\n    for (var i = 0; i < this._sections.length; i++) {\n      var section = this._sections[i];\n\n      var content = section.consumer.sourceContentFor(aSource, true);\n      if (content) {\n        return content;\n      }\n    }\n    if (nullOnMissing) {\n      return null;\n    }\n    else {\n      throw new Error('\"' + aSource + '\" is not in the SourceMap.');\n    }\n  };\n\n/**\n * Returns the generated line and column information for the original source,\n * line, and column positions provided. The only argument is an object with\n * the following properties:\n *\n *   - source: The filename of the original source.\n *   - line: The line number in the original source.  The line number\n *     is 1-based.\n *   - column: The column number in the original source.  The column\n *     number is 0-based.\n *\n * and an object is returned with the following properties:\n *\n *   - line: The line number in the generated source, or null.  The\n *     line number is 1-based. \n *   - column: The column number in the generated source, or null.\n *     The column number is 0-based.\n */\nIndexedSourceMapConsumer.prototype.generatedPositionFor =\n  function IndexedSourceMapConsumer_generatedPositionFor(aArgs) {\n    for (var i = 0; i < this._sections.length; i++) {\n      var section = this._sections[i];\n\n      // Only consider this section if the requested source is in the list of\n      // sources of the consumer.\n      if (section.consumer._findSourceIndex(util.getArg(aArgs, 'source')) === -1) {\n        continue;\n      }\n      var generatedPosition = section.consumer.generatedPositionFor(aArgs);\n      if (generatedPosition) {\n        var ret = {\n          line: generatedPosition.line +\n            (section.generatedOffset.generatedLine - 1),\n          column: generatedPosition.column +\n            (section.generatedOffset.generatedLine === generatedPosition.line\n             ? section.generatedOffset.generatedColumn - 1\n             : 0)\n        };\n        return ret;\n      }\n    }\n\n    return {\n      line: null,\n      column: null\n    };\n  };\n\n/**\n * Parse the mappings in a string in to a data structure which we can easily\n * query (the ordered arrays in the `this.__generatedMappings` and\n * `this.__originalMappings` properties).\n */\nIndexedSourceMapConsumer.prototype._parseMappings =\n  function IndexedSourceMapConsumer_parseMappings(aStr, aSourceRoot) {\n    this.__generatedMappings = [];\n    this.__originalMappings = [];\n    for (var i = 0; i < this._sections.length; i++) {\n      var section = this._sections[i];\n      var sectionMappings = section.consumer._generatedMappings;\n      for (var j = 0; j < sectionMappings.length; j++) {\n        var mapping = sectionMappings[j];\n\n        var source = section.consumer._sources.at(mapping.source);\n        source = util.computeSourceURL(section.consumer.sourceRoot, source, this._sourceMapURL);\n        this._sources.add(source);\n        source = this._sources.indexOf(source);\n\n        var name = null;\n        if (mapping.name) {\n          name = section.consumer._names.at(mapping.name);\n          this._names.add(name);\n          name = this._names.indexOf(name);\n        }\n\n        // The mappings coming from the consumer for the section have\n        // generated positions relative to the start of the section, so we\n        // need to offset them to be relative to the start of the concatenated\n        // generated file.\n        var adjustedMapping = {\n          source: source,\n          generatedLine: mapping.generatedLine +\n            (section.generatedOffset.generatedLine - 1),\n          generatedColumn: mapping.generatedColumn +\n            (section.generatedOffset.generatedLine === mapping.generatedLine\n            ? section.generatedOffset.generatedColumn - 1\n            : 0),\n          originalLine: mapping.originalLine,\n          originalColumn: mapping.originalColumn,\n          name: name\n        };\n\n        this.__generatedMappings.push(adjustedMapping);\n        if (typeof adjustedMapping.originalLine === 'number') {\n          this.__originalMappings.push(adjustedMapping);\n        }\n      }\n    }\n\n    quickSort(this.__generatedMappings, util.compareByGeneratedPositionsDeflated);\n    quickSort(this.__originalMappings, util.compareByOriginalPositions);\n  };\n\nexports.IndexedSourceMapConsumer = IndexedSourceMapConsumer;\n","/* -*- Mode: js; js-indent-level: 2; -*- */\n/*\n * Copyright 2011 Mozilla Foundation and contributors\n * Licensed under the New BSD license. See LICENSE or:\n * http://opensource.org/licenses/BSD-3-Clause\n */\n\nexports.GREATEST_LOWER_BOUND = 1;\nexports.LEAST_UPPER_BOUND = 2;\n\n/**\n * Recursive implementation of binary search.\n *\n * @param aLow Indices here and lower do not contain the needle.\n * @param aHigh Indices here and higher do not contain the needle.\n * @param aNeedle The element being searched for.\n * @param aHaystack The non-empty array being searched.\n * @param aCompare Function which takes two elements and returns -1, 0, or 1.\n * @param aBias Either 'binarySearch.GREATEST_LOWER_BOUND' or\n *     'binarySearch.LEAST_UPPER_BOUND'. Specifies whether to return the\n *     closest element that is smaller than or greater than the one we are\n *     searching for, respectively, if the exact element cannot be found.\n */\nfunction recursiveSearch(aLow, aHigh, aNeedle, aHaystack, aCompare, aBias) {\n  // This function terminates when one of the following is true:\n  //\n  //   1. We find the exact element we are looking for.\n  //\n  //   2. We did not find the exact element, but we can return the index of\n  //      the next-closest element.\n  //\n  //   3. We did not find the exact element, and there is no next-closest\n  //      element than the one we are searching for, so we return -1.\n  var mid = Math.floor((aHigh - aLow) / 2) + aLow;\n  var cmp = aCompare(aNeedle, aHaystack[mid], true);\n  if (cmp === 0) {\n    // Found the element we are looking for.\n    return mid;\n  }\n  else if (cmp > 0) {\n    // Our needle is greater than aHaystack[mid].\n    if (aHigh - mid > 1) {\n      // The element is in the upper half.\n      return recursiveSearch(mid, aHigh, aNeedle, aHaystack, aCompare, aBias);\n    }\n\n    // The exact needle element was not found in this haystack. Determine if\n    // we are in termination case (3) or (2) and return the appropriate thing.\n    if (aBias == exports.LEAST_UPPER_BOUND) {\n      return aHigh < aHaystack.length ? aHigh : -1;\n    } else {\n      return mid;\n    }\n  }\n  else {\n    // Our needle is less than aHaystack[mid].\n    if (mid - aLow > 1) {\n      // The element is in the lower half.\n      return recursiveSearch(aLow, mid, aNeedle, aHaystack, aCompare, aBias);\n    }\n\n    // we are in termination case (3) or (2) and return the appropriate thing.\n    if (aBias == exports.LEAST_UPPER_BOUND) {\n      return mid;\n    } else {\n      return aLow < 0 ? -1 : aLow;\n    }\n  }\n}\n\n/**\n * This is an implementation of binary search which will always try and return\n * the index of the closest element if there is no exact hit. This is because\n * mappings between original and generated line/col pairs are single points,\n * and there is an implicit region between each of them, so a miss just means\n * that you aren't on the very start of a region.\n *\n * @param aNeedle The element you are looking for.\n * @param aHaystack The array that is being searched.\n * @param aCompare A function which takes the needle and an element in the\n *     array and returns -1, 0, or 1 depending on whether the needle is less\n *     than, equal to, or greater than the element, respectively.\n * @param aBias Either 'binarySearch.GREATEST_LOWER_BOUND' or\n *     'binarySearch.LEAST_UPPER_BOUND'. Specifies whether to return the\n *     closest element that is smaller than or greater than the one we are\n *     searching for, respectively, if the exact element cannot be found.\n *     Defaults to 'binarySearch.GREATEST_LOWER_BOUND'.\n */\nexports.search = function search(aNeedle, aHaystack, aCompare, aBias) {\n  if (aHaystack.length === 0) {\n    return -1;\n  }\n\n  var index = recursiveSearch(-1, aHaystack.length, aNeedle, aHaystack,\n                              aCompare, aBias || exports.GREATEST_LOWER_BOUND);\n  if (index < 0) {\n    return -1;\n  }\n\n  // We have found either the exact element, or the next-closest element than\n  // the one we are searching for. However, there may be more than one such\n  // element. Make sure we always return the smallest of these.\n  while (index - 1 >= 0) {\n    if (aCompare(aHaystack[index], aHaystack[index - 1], true) !== 0) {\n      break;\n    }\n    --index;\n  }\n\n  return index;\n};\n","/* -*- Mode: js; js-indent-level: 2; -*- */\n/*\n * Copyright 2011 Mozilla Foundation and contributors\n * Licensed under the New BSD license. See LICENSE or:\n * http://opensource.org/licenses/BSD-3-Clause\n */\n\n// It turns out that some (most?) JavaScript engines don't self-host\n// `Array.prototype.sort`. This makes sense because C++ will likely remain\n// faster than JS when doing raw CPU-intensive sorting. However, when using a\n// custom comparator function, calling back and forth between the VM's C++ and\n// JIT'd JS is rather slow *and* loses JIT type information, resulting in\n// worse generated code for the comparator function than would be optimal. In\n// fact, when sorting with a comparator, these costs outweigh the benefits of\n// sorting in C++. By using our own JS-implemented Quick Sort (below), we get\n// a ~3500ms mean speed-up in `bench/bench.html`.\n\n/**\n * Swap the elements indexed by `x` and `y` in the array `ary`.\n *\n * @param {Array} ary\n *        The array.\n * @param {Number} x\n *        The index of the first item.\n * @param {Number} y\n *        The index of the second item.\n */\nfunction swap(ary, x, y) {\n  var temp = ary[x];\n  ary[x] = ary[y];\n  ary[y] = temp;\n}\n\n/**\n * Returns a random integer within the range `low .. high` inclusive.\n *\n * @param {Number} low\n *        The lower bound on the range.\n * @param {Number} high\n *        The upper bound on the range.\n */\nfunction randomIntInRange(low, high) {\n  return Math.round(low + (Math.random() * (high - low)));\n}\n\n/**\n * The Quick Sort algorithm.\n *\n * @param {Array} ary\n *        An array to sort.\n * @param {function} comparator\n *        Function to use to compare two items.\n * @param {Number} p\n *        Start index of the array\n * @param {Number} r\n *        End index of the array\n */\nfunction doQuickSort(ary, comparator, p, r) {\n  // If our lower bound is less than our upper bound, we (1) partition the\n  // array into two pieces and (2) recurse on each half. If it is not, this is\n  // the empty array and our base case.\n\n  if (p < r) {\n    // (1) Partitioning.\n    //\n    // The partitioning chooses a pivot between `p` and `r` and moves all\n    // elements that are less than or equal to the pivot to the before it, and\n    // all the elements that are greater than it after it. The effect is that\n    // once partition is done, the pivot is in the exact place it will be when\n    // the array is put in sorted order, and it will not need to be moved\n    // again. This runs in O(n) time.\n\n    // Always choose a random pivot so that an input array which is reverse\n    // sorted does not cause O(n^2) running time.\n    var pivotIndex = randomIntInRange(p, r);\n    var i = p - 1;\n\n    swap(ary, pivotIndex, r);\n    var pivot = ary[r];\n\n    // Immediately after `j` is incremented in this loop, the following hold\n    // true:\n    //\n    //   * Every element in `ary[p .. i]` is less than or equal to the pivot.\n    //\n    //   * Every element in `ary[i+1 .. j-1]` is greater than the pivot.\n    for (var j = p; j < r; j++) {\n      if (comparator(ary[j], pivot) <= 0) {\n        i += 1;\n        swap(ary, i, j);\n      }\n    }\n\n    swap(ary, i + 1, j);\n    var q = i + 1;\n\n    // (2) Recurse on each half.\n\n    doQuickSort(ary, comparator, p, q - 1);\n    doQuickSort(ary, comparator, q + 1, r);\n  }\n}\n\n/**\n * Sort the given array in-place with the given comparator function.\n *\n * @param {Array} ary\n *        An array to sort.\n * @param {function} comparator\n *        Function to use to compare two items.\n */\nexports.quickSort = function (ary, comparator) {\n  doQuickSort(ary, comparator, 0, ary.length - 1);\n};\n","/* -*- Mode: js; js-indent-level: 2; -*- */\n/*\n * Copyright 2011 Mozilla Foundation and contributors\n * Licensed under the New BSD license. See LICENSE or:\n * http://opensource.org/licenses/BSD-3-Clause\n */\n\nvar SourceMapGenerator = require('./source-map-generator').SourceMapGenerator;\nvar util = require('./util');\n\n// Matches a Windows-style `\\r\\n` newline or a `\\n` newline used by all other\n// operating systems these days (capturing the result).\nvar REGEX_NEWLINE = /(\\r?\\n)/;\n\n// Newline character code for charCodeAt() comparisons\nvar NEWLINE_CODE = 10;\n\n// Private symbol for identifying `SourceNode`s when multiple versions of\n// the source-map library are loaded. This MUST NOT CHANGE across\n// versions!\nvar isSourceNode = \"$$$isSourceNode$$$\";\n\n/**\n * SourceNodes provide a way to abstract over interpolating/concatenating\n * snippets of generated JavaScript source code while maintaining the line and\n * column information associated with the original source code.\n *\n * @param aLine The original line number.\n * @param aColumn The original column number.\n * @param aSource The original source's filename.\n * @param aChunks Optional. An array of strings which are snippets of\n *        generated JS, or other SourceNodes.\n * @param aName The original identifier.\n */\nfunction SourceNode(aLine, aColumn, aSource, aChunks, aName) {\n  this.children = [];\n  this.sourceContents = {};\n  this.line = aLine == null ? null : aLine;\n  this.column = aColumn == null ? null : aColumn;\n  this.source = aSource == null ? null : aSource;\n  this.name = aName == null ? null : aName;\n  this[isSourceNode] = true;\n  if (aChunks != null) this.add(aChunks);\n}\n\n/**\n * Creates a SourceNode from generated code and a SourceMapConsumer.\n *\n * @param aGeneratedCode The generated code\n * @param aSourceMapConsumer The SourceMap for the generated code\n * @param aRelativePath Optional. The path that relative sources in the\n *        SourceMapConsumer should be relative to.\n */\nSourceNode.fromStringWithSourceMap =\n  function SourceNode_fromStringWithSourceMap(aGeneratedCode, aSourceMapConsumer, aRelativePath) {\n    // The SourceNode we want to fill with the generated code\n    // and the SourceMap\n    var node = new SourceNode();\n\n    // All even indices of this array are one line of the generated code,\n    // while all odd indices are the newlines between two adjacent lines\n    // (since `REGEX_NEWLINE` captures its match).\n    // Processed fragments are accessed by calling `shiftNextLine`.\n    var remainingLines = aGeneratedCode.split(REGEX_NEWLINE);\n    var remainingLinesIndex = 0;\n    var shiftNextLine = function() {\n      var lineContents = getNextLine();\n      // The last line of a file might not have a newline.\n      var newLine = getNextLine() || \"\";\n      return lineContents + newLine;\n\n      function getNextLine() {\n        return remainingLinesIndex < remainingLines.length ?\n            remainingLines[remainingLinesIndex++] : undefined;\n      }\n    };\n\n    // We need to remember the position of \"remainingLines\"\n    var lastGeneratedLine = 1, lastGeneratedColumn = 0;\n\n    // The generate SourceNodes we need a code range.\n    // To extract it current and last mapping is used.\n    // Here we store the last mapping.\n    var lastMapping = null;\n\n    aSourceMapConsumer.eachMapping(function (mapping) {\n      if (lastMapping !== null) {\n        // We add the code from \"lastMapping\" to \"mapping\":\n        // First check if there is a new line in between.\n        if (lastGeneratedLine < mapping.generatedLine) {\n          // Associate first line with \"lastMapping\"\n          addMappingWithCode(lastMapping, shiftNextLine());\n          lastGeneratedLine++;\n          lastGeneratedColumn = 0;\n          // The remaining code is added without mapping\n        } else {\n          // There is no new line in between.\n          // Associate the code between \"lastGeneratedColumn\" and\n          // \"mapping.generatedColumn\" with \"lastMapping\"\n          var nextLine = remainingLines[remainingLinesIndex] || '';\n          var code = nextLine.substr(0, mapping.generatedColumn -\n                                        lastGeneratedColumn);\n          remainingLines[remainingLinesIndex] = nextLine.substr(mapping.generatedColumn -\n                                              lastGeneratedColumn);\n          lastGeneratedColumn = mapping.generatedColumn;\n          addMappingWithCode(lastMapping, code);\n          // No more remaining code, continue\n          lastMapping = mapping;\n          return;\n        }\n      }\n      // We add the generated code until the first mapping\n      // to the SourceNode without any mapping.\n      // Each line is added as separate string.\n      while (lastGeneratedLine < mapping.generatedLine) {\n        node.add(shiftNextLine());\n        lastGeneratedLine++;\n      }\n      if (lastGeneratedColumn < mapping.generatedColumn) {\n        var nextLine = remainingLines[remainingLinesIndex] || '';\n        node.add(nextLine.substr(0, mapping.generatedColumn));\n        remainingLines[remainingLinesIndex] = nextLine.substr(mapping.generatedColumn);\n        lastGeneratedColumn = mapping.generatedColumn;\n      }\n      lastMapping = mapping;\n    }, this);\n    // We have processed all mappings.\n    if (remainingLinesIndex < remainingLines.length) {\n      if (lastMapping) {\n        // Associate the remaining code in the current line with \"lastMapping\"\n        addMappingWithCode(lastMapping, shiftNextLine());\n      }\n      // and add the remaining lines without any mapping\n      node.add(remainingLines.splice(remainingLinesIndex).join(\"\"));\n    }\n\n    // Copy sourcesContent into SourceNode\n    aSourceMapConsumer.sources.forEach(function (sourceFile) {\n      var content = aSourceMapConsumer.sourceContentFor(sourceFile);\n      if (content != null) {\n        if (aRelativePath != null) {\n          sourceFile = util.join(aRelativePath, sourceFile);\n        }\n        node.setSourceContent(sourceFile, content);\n      }\n    });\n\n    return node;\n\n    function addMappingWithCode(mapping, code) {\n      if (mapping === null || mapping.source === undefined) {\n        node.add(code);\n      } else {\n        var source = aRelativePath\n          ? util.join(aRelativePath, mapping.source)\n          : mapping.source;\n        node.add(new SourceNode(mapping.originalLine,\n                                mapping.originalColumn,\n                                source,\n                                code,\n                                mapping.name));\n      }\n    }\n  };\n\n/**\n * Add a chunk of generated JS to this source node.\n *\n * @param aChunk A string snippet of generated JS code, another instance of\n *        SourceNode, or an array where each member is one of those things.\n */\nSourceNode.prototype.add = function SourceNode_add(aChunk) {\n  if (Array.isArray(aChunk)) {\n    aChunk.forEach(function (chunk) {\n      this.add(chunk);\n    }, this);\n  }\n  else if (aChunk[isSourceNode] || typeof aChunk === \"string\") {\n    if (aChunk) {\n      this.children.push(aChunk);\n    }\n  }\n  else {\n    throw new TypeError(\n      \"Expected a SourceNode, string, or an array of SourceNodes and strings. Got \" + aChunk\n    );\n  }\n  return this;\n};\n\n/**\n * Add a chunk of generated JS to the beginning of this source node.\n *\n * @param aChunk A string snippet of generated JS code, another instance of\n *        SourceNode, or an array where each member is one of those things.\n */\nSourceNode.prototype.prepend = function SourceNode_prepend(aChunk) {\n  if (Array.isArray(aChunk)) {\n    for (var i = aChunk.length-1; i >= 0; i--) {\n      this.prepend(aChunk[i]);\n    }\n  }\n  else if (aChunk[isSourceNode] || typeof aChunk === \"string\") {\n    this.children.unshift(aChunk);\n  }\n  else {\n    throw new TypeError(\n      \"Expected a SourceNode, string, or an array of SourceNodes and strings. Got \" + aChunk\n    );\n  }\n  return this;\n};\n\n/**\n * Walk over the tree of JS snippets in this node and its children. The\n * walking function is called once for each snippet of JS and is passed that\n * snippet and the its original associated source's line/column location.\n *\n * @param aFn The traversal function.\n */\nSourceNode.prototype.walk = function SourceNode_walk(aFn) {\n  var chunk;\n  for (var i = 0, len = this.children.length; i < len; i++) {\n    chunk = this.children[i];\n    if (chunk[isSourceNode]) {\n      chunk.walk(aFn);\n    }\n    else {\n      if (chunk !== '') {\n        aFn(chunk, { source: this.source,\n                     line: this.line,\n                     column: this.column,\n                     name: this.name });\n      }\n    }\n  }\n};\n\n/**\n * Like `String.prototype.join` except for SourceNodes. Inserts `aStr` between\n * each of `this.children`.\n *\n * @param aSep The separator.\n */\nSourceNode.prototype.join = function SourceNode_join(aSep) {\n  var newChildren;\n  var i;\n  var len = this.children.length;\n  if (len > 0) {\n    newChildren = [];\n    for (i = 0; i < len-1; i++) {\n      newChildren.push(this.children[i]);\n      newChildren.push(aSep);\n    }\n    newChildren.push(this.children[i]);\n    this.children = newChildren;\n  }\n  return this;\n};\n\n/**\n * Call String.prototype.replace on the very right-most source snippet. Useful\n * for trimming whitespace from the end of a source node, etc.\n *\n * @param aPattern The pattern to replace.\n * @param aReplacement The thing to replace the pattern with.\n */\nSourceNode.prototype.replaceRight = function SourceNode_replaceRight(aPattern, aReplacement) {\n  var lastChild = this.children[this.children.length - 1];\n  if (lastChild[isSourceNode]) {\n    lastChild.replaceRight(aPattern, aReplacement);\n  }\n  else if (typeof lastChild === 'string') {\n    this.children[this.children.length - 1] = lastChild.replace(aPattern, aReplacement);\n  }\n  else {\n    this.children.push(''.replace(aPattern, aReplacement));\n  }\n  return this;\n};\n\n/**\n * Set the source content for a source file. This will be added to the SourceMapGenerator\n * in the sourcesContent field.\n *\n * @param aSourceFile The filename of the source file\n * @param aSourceContent The content of the source file\n */\nSourceNode.prototype.setSourceContent =\n  function SourceNode_setSourceContent(aSourceFile, aSourceContent) {\n    this.sourceContents[util.toSetString(aSourceFile)] = aSourceContent;\n  };\n\n/**\n * Walk over the tree of SourceNodes. The walking function is called for each\n * source file content and is passed the filename and source content.\n *\n * @param aFn The traversal function.\n */\nSourceNode.prototype.walkSourceContents =\n  function SourceNode_walkSourceContents(aFn) {\n    for (var i = 0, len = this.children.length; i < len; i++) {\n      if (this.children[i][isSourceNode]) {\n        this.children[i].walkSourceContents(aFn);\n      }\n    }\n\n    var sources = Object.keys(this.sourceContents);\n    for (var i = 0, len = sources.length; i < len; i++) {\n      aFn(util.fromSetString(sources[i]), this.sourceContents[sources[i]]);\n    }\n  };\n\n/**\n * Return the string representation of this source node. Walks over the tree\n * and concatenates all the various snippets together to one string.\n */\nSourceNode.prototype.toString = function SourceNode_toString() {\n  var str = \"\";\n  this.walk(function (chunk) {\n    str += chunk;\n  });\n  return str;\n};\n\n/**\n * Returns the string representation of this source node along with a source\n * map.\n */\nSourceNode.prototype.toStringWithSourceMap = function SourceNode_toStringWithSourceMap(aArgs) {\n  var generated = {\n    code: \"\",\n    line: 1,\n    column: 0\n  };\n  var map = new SourceMapGenerator(aArgs);\n  var sourceMappingActive = false;\n  var lastOriginalSource = null;\n  var lastOriginalLine = null;\n  var lastOriginalColumn = null;\n  var lastOriginalName = null;\n  this.walk(function (chunk, original) {\n    generated.code += chunk;\n    if (original.source !== null\n        && original.line !== null\n        && original.column !== null) {\n      if(lastOriginalSource !== original.source\n         || lastOriginalLine !== original.line\n         || lastOriginalColumn !== original.column\n         || lastOriginalName !== original.name) {\n        map.addMapping({\n          source: original.source,\n          original: {\n            line: original.line,\n            column: original.column\n          },\n          generated: {\n            line: generated.line,\n            column: generated.column\n          },\n          name: original.name\n        });\n      }\n      lastOriginalSource = original.source;\n      lastOriginalLine = original.line;\n      lastOriginalColumn = original.column;\n      lastOriginalName = original.name;\n      sourceMappingActive = true;\n    } else if (sourceMappingActive) {\n      map.addMapping({\n        generated: {\n          line: generated.line,\n          column: generated.column\n        }\n      });\n      lastOriginalSource = null;\n      sourceMappingActive = false;\n    }\n    for (var idx = 0, length = chunk.length; idx < length; idx++) {\n      if (chunk.charCodeAt(idx) === NEWLINE_CODE) {\n        generated.line++;\n        generated.column = 0;\n        // Mappings end at eol\n        if (idx + 1 === length) {\n          lastOriginalSource = null;\n          sourceMappingActive = false;\n        } else if (sourceMappingActive) {\n          map.addMapping({\n            source: original.source,\n            original: {\n              line: original.line,\n              column: original.column\n            },\n            generated: {\n              line: generated.line,\n              column: generated.column\n            },\n            name: original.name\n          });\n        }\n      } else {\n        generated.column++;\n      }\n    }\n  });\n  this.walkSourceContents(function (sourceFile, sourceContent) {\n    map.setSourceContent(sourceFile, sourceContent);\n  });\n\n  return { code: generated.code, map: map };\n};\n\nexports.SourceNode = SourceNode;\n","/* eslint-disable new-cap */\nimport Visitor from './visitor';\n\nexport function print(ast) {\n  return new PrintVisitor().accept(ast);\n}\n\nexport function PrintVisitor() {\n  this.padding = 0;\n}\n\nPrintVisitor.prototype = new Visitor();\n\nPrintVisitor.prototype.pad = function(string) {\n  let out = '';\n\n  for (let i = 0, l = this.padding; i < l; i++) {\n    out += '  ';\n  }\n\n  out += string + '\\n';\n  return out;\n};\n\nPrintVisitor.prototype.Program = function(program) {\n  let out = '',\n    body = program.body,\n    i,\n    l;\n\n  if (program.blockParams) {\n    let blockParams = 'BLOCK PARAMS: [';\n    for (i = 0, l = program.blockParams.length; i < l; i++) {\n      blockParams += ' ' + program.blockParams[i];\n    }\n    blockParams += ' ]';\n    out += this.pad(blockParams);\n  }\n\n  for (i = 0, l = body.length; i < l; i++) {\n    out += this.accept(body[i]);\n  }\n\n  this.padding--;\n\n  return out;\n};\n\nPrintVisitor.prototype.MustacheStatement = function(mustache) {\n  return this.pad('{{ ' + this.SubExpression(mustache) + ' }}');\n};\nPrintVisitor.prototype.Decorator = function(mustache) {\n  return this.pad('{{ DIRECTIVE ' + this.SubExpression(mustache) + ' }}');\n};\n\nPrintVisitor.prototype.BlockStatement = PrintVisitor.prototype.DecoratorBlock = function(\n  block\n) {\n  let out = '';\n\n  out += this.pad(\n    (block.type === 'DecoratorBlock' ? 'DIRECTIVE ' : '') + 'BLOCK:'\n  );\n  this.padding++;\n  out += this.pad(this.SubExpression(block));\n  if (block.program) {\n    out += this.pad('PROGRAM:');\n    this.padding++;\n    out += this.accept(block.program);\n    this.padding--;\n  }\n  if (block.inverse) {\n    if (block.program) {\n      this.padding++;\n    }\n    out += this.pad('{{^}}');\n    this.padding++;\n    out += this.accept(block.inverse);\n    this.padding--;\n    if (block.program) {\n      this.padding--;\n    }\n  }\n  this.padding--;\n\n  return out;\n};\n\nPrintVisitor.prototype.PartialStatement = function(partial) {\n  let content = 'PARTIAL:' + partial.name.original;\n  if (partial.params[0]) {\n    content += ' ' + this.accept(partial.params[0]);\n  }\n  if (partial.hash) {\n    content += ' ' + this.accept(partial.hash);\n  }\n  return this.pad('{{> ' + content + ' }}');\n};\nPrintVisitor.prototype.PartialBlockStatement = function(partial) {\n  let content = 'PARTIAL BLOCK:' + partial.name.original;\n  if (partial.params[0]) {\n    content += ' ' + this.accept(partial.params[0]);\n  }\n  if (partial.hash) {\n    content += ' ' + this.accept(partial.hash);\n  }\n\n  content += ' ' + this.pad('PROGRAM:');\n  this.padding++;\n  content += this.accept(partial.program);\n  this.padding--;\n\n  return this.pad('{{> ' + content + ' }}');\n};\n\nPrintVisitor.prototype.ContentStatement = function(content) {\n  return this.pad(\"CONTENT[ '\" + content.value + \"' ]\");\n};\n\nPrintVisitor.prototype.CommentStatement = function(comment) {\n  return this.pad(\"{{! '\" + comment.value + \"' }}\");\n};\n\nPrintVisitor.prototype.SubExpression = function(sexpr) {\n  let params = sexpr.params,\n    paramStrings = [],\n    hash;\n\n  for (let i = 0, l = params.length; i < l; i++) {\n    paramStrings.push(this.accept(params[i]));\n  }\n\n  params = '[' + paramStrings.join(', ') + ']';\n\n  hash = sexpr.hash ? ' ' + this.accept(sexpr.hash) : '';\n\n  return this.accept(sexpr.path) + ' ' + params + hash;\n};\n\nPrintVisitor.prototype.PathExpression = function(id) {\n  let path = id.parts.join('/');\n  return (id.data ? '@' : '') + 'PATH:' + path;\n};\n\nPrintVisitor.prototype.StringLiteral = function(string) {\n  return '\"' + string.value + '\"';\n};\n\nPrintVisitor.prototype.NumberLiteral = function(number) {\n  return 'NUMBER{' + number.value + '}';\n};\n\nPrintVisitor.prototype.BooleanLiteral = function(bool) {\n  return 'BOOLEAN{' + bool.value + '}';\n};\n\nPrintVisitor.prototype.UndefinedLiteral = function() {\n  return 'UNDEFINED';\n};\n\nPrintVisitor.prototype.NullLiteral = function() {\n  return 'NULL';\n};\n\nPrintVisitor.prototype.Hash = function(hash) {\n  let pairs = hash.pairs,\n    joinedPairs = [];\n\n  for (let i = 0, l = pairs.length; i < l; i++) {\n    joinedPairs.push(this.accept(pairs[i]));\n  }\n\n  return 'HASH{' + joinedPairs.join(', ') + '}';\n};\nPrintVisitor.prototype.HashPair = function(pair) {\n  return pair.key + '=' + this.accept(pair.value);\n};\n/* eslint-enable new-cap */\n","{{#each this}}\n  <li class='card__item' data-action='{{id}}'>\n    <div class='thumb'>\n      <img\n        src='https://image.tmdb.org/t/p/w500{{poster_path}}'\n        alt='{{title}} {{name}}'\n        width='100%'\n        loading='lazy'\n        data-id='{{id}}'\n        onerror=\"this.onerror=null;this.src='https://ik.imagekit.io/tc8jxffbcvf/default-movie-portrait_EmJUj9Tda5wa.jpg?tr=fo-auto,di-';\"\n      />\n    </div>\n    <div class='card_information'>\n      <h2 class='card__title'>\n        {{title}} {{name}}\n      </h2>\n      <p class='card__text'>\n        <span>\n          {{#each genres}}\n            {{#if @last}}\n              {{name}}\n            {{else}}\n              {{name}},\n            {{/if}}\n          {{/each}}\n        </span>\n        |\n        <span>\n          {{release_date}}\n        </span>\n      </p>\n    </div>\n  </li>\n{{/each}}","import { currentUser } from './api-service/firebase-api-auth';\nimport {\n  writeQueue,\n  writeWatched,\n  getQueueByUserId,\n  getWatchedByUserId,\n} from './api-service/firebase-api-database';\nimport FilmotekaApi from './api-service/filmoteka-api';\nimport { Notify } from 'notiflix';\n\nconst infoFilmApi = new FilmotekaApi();\nconst refs = {\n  backdrop: document.querySelector('.backdrop'),\n  closeBtn: document.querySelector('[data-modal-close]'),\n  modalWrap: document.querySelector('.modal__wrap'),\n};\n\nrefs.backdrop.addEventListener('click', onBackdropHandler);\nrefs.closeBtn.addEventListener('click', closeModal);\nwindow.addEventListener('keydown', closeModalEsc);\n// TODO: add listener on ESC when modal is opening\n\nfunction closeModal() {\n  refs.backdrop.classList.remove('is-open');\n  window.removeEventListener('keydown', closeModal);\n  document.body.classList.remove('no-scroll');\n  refs.modalWrap.innerHTML = '';\n}\n\nasync function onBackdropHandler(e) {\n  const filmId = e.target.dataset.id;\n  if (e.target.classList.contains('backdrop')) {\n    closeModal();\n  } else if (e.target.classList.contains('js-btn-watched')) {\n    if (await checkFilmFromUser(filmId, getWatchedByUserId)) {\n      Notify.info('The film is already at the top of the watched');\n      return;\n    }\n    write(filmId, writeWatched);\n  } else if (e.target.classList.contains('js-btn-queue')) {\n    if (await checkFilmFromUser(filmId, getQueueByUserId)) {\n      Notify.info('The film is already at the top of the queue');\n      return;\n    }\n    write(filmId, writeQueue);\n  }\n  return;\n}\n\nfunction closeModalEsc(e) {\n  if (e.code === 'Escape') closeModal();\n}\n\nasync function checkFilmFromUser(filmId, callback) {\n  const user = await currentUser();\n  if (user) {\n    const object = await callback(user.uid);\n    let films;\n    if (object) {\n      films = Object.values(object).map(object => object['film']);\n    } else {\n      return false;\n    }\n\n    let filmsUser;\n    if (films.length > 0) {\n      filmsUser = films.filter(\n        film => Number.parseInt(film.id) === Number.parseInt(filmId)\n      );\n    } else {\n      return false;\n    }\n\n    if (filmsUser.length > 0) {\n      return true;\n    } else {\n      return false;\n    }\n  } else {\n    window.location.href = './signin.html';\n  }\n}\n\nasync function write(filmId, callback) {\n  const user = await currentUser();\n  if (user) {\n    const film = await infoFilmApi.fetchInfoFilm(filmId);\n    callback(user.uid, film);\n  } else {\n    window.location.href = './signin.html';\n  }\n}\n","import {\n  getDatabase,\n  ref,\n  push,\n  query,\n  equalTo,\n  get,\n  orderByChild,\n} from 'firebase/database';\nimport { Notify } from 'notiflix';\n\nasync function writeWatched(userId, film) {\n  const db = getDatabase();\n  push(ref(db, 'watched/'), {\n    userId: userId,\n    film: film,\n  })\n    .then(push => {\n      Notify.info('Film add watched list');\n    })\n    .catch(error => {\n      Notify.failure('OOPS');\n    });\n}\n\nasync function writeQueue(userId, film) {\n  const db = getDatabase();\n  push(ref(db, 'queue/'), {\n    userId: userId,\n    film: film,\n  })\n    .then(push => {\n      Notify.info('Film add Queue list');\n    })\n    .catch(error => {\n      Notify.failure('OOPS');\n    });\n}\n\nasync function getWatchedByUserId(userId) {\n  const db = getDatabase();\n  const recentPostsRef = await get(\n    query(ref(db, 'watched/'), orderByChild('userId'), equalTo(userId))\n  );\n  return recentPostsRef.val();\n}\n\nasync function getQueueByUserId(userId) {\n  const db = getDatabase();\n  const recentPostsRef = await get(\n    query(ref(db, 'queue/'), orderByChild('userId'), equalTo(userId))\n  );\n  return recentPostsRef.val();\n}\nexport { writeWatched, writeQueue, getQueueByUserId, getWatchedByUserId };\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { jsonEval, stringify } from '@firebase/util';\n\n/**\n * Wraps a DOM Storage object and:\n * - automatically encode objects as JSON strings before storing them to allow us to store arbitrary types.\n * - prefixes names with \"firebase:\" to avoid collisions with app data.\n *\n * We automatically (see storage.js) create two such wrappers, one for sessionStorage,\n * and one for localStorage.\n *\n */\nexport class DOMStorageWrapper {\n  // Use a prefix to avoid collisions with other stuff saved by the app.\n  private prefix_ = 'firebase:';\n\n  /**\n   * @param domStorage_ - The underlying storage object (e.g. localStorage or sessionStorage)\n   */\n  constructor(private domStorage_: Storage) {}\n\n  /**\n   * @param key - The key to save the value under\n   * @param value - The value being stored, or null to remove the key.\n   */\n  set(key: string, value: unknown | null) {\n    if (value == null) {\n      this.domStorage_.removeItem(this.prefixedName_(key));\n    } else {\n      this.domStorage_.setItem(this.prefixedName_(key), stringify(value));\n    }\n  }\n\n  /**\n   * @returns The value that was stored under this key, or null\n   */\n  get(key: string): unknown {\n    const storedVal = this.domStorage_.getItem(this.prefixedName_(key));\n    if (storedVal == null) {\n      return null;\n    } else {\n      return jsonEval(storedVal);\n    }\n  }\n\n  remove(key: string) {\n    this.domStorage_.removeItem(this.prefixedName_(key));\n  }\n\n  isInMemoryStorage: boolean;\n\n  prefixedName_(name: string): string {\n    return this.prefix_ + name;\n  }\n\n  toString(): string {\n    return this.domStorage_.toString();\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { contains } from '@firebase/util';\n\n/**\n * An in-memory storage implementation that matches the API of DOMStorageWrapper\n * (TODO: create interface for both to implement).\n */\nexport class MemoryStorage {\n  private cache_: { [k: string]: unknown } = {};\n\n  set(key: string, value: unknown | null) {\n    if (value == null) {\n      delete this.cache_[key];\n    } else {\n      this.cache_[key] = value;\n    }\n  }\n\n  get(key: string): unknown {\n    if (contains(this.cache_, key)) {\n      return this.cache_[key];\n    }\n    return null;\n  }\n\n  remove(key: string) {\n    delete this.cache_[key];\n  }\n\n  isInMemoryStorage = true;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { DOMStorageWrapper } from './DOMStorageWrapper';\nimport { MemoryStorage } from './MemoryStorage';\n\ndeclare const window: Window;\n\n/**\n * Helper to create a DOMStorageWrapper or else fall back to MemoryStorage.\n * TODO: Once MemoryStorage and DOMStorageWrapper have a shared interface this method annotation should change\n * to reflect this type\n *\n * @param domStorageName - Name of the underlying storage object\n *   (e.g. 'localStorage' or 'sessionStorage').\n * @returns Turning off type information until a common interface is defined.\n */\nconst createStoragefor = function (\n  domStorageName: string\n): DOMStorageWrapper | MemoryStorage {\n  try {\n    // NOTE: just accessing \"localStorage\" or \"window['localStorage']\" may throw a security exception,\n    // so it must be inside the try/catch.\n    if (\n      typeof window !== 'undefined' &&\n      typeof window[domStorageName] !== 'undefined'\n    ) {\n      // Need to test cache. Just because it's here doesn't mean it works\n      const domStorage = window[domStorageName];\n      domStorage.setItem('firebase:sentinel', 'cache');\n      domStorage.removeItem('firebase:sentinel');\n      return new DOMStorageWrapper(domStorage);\n    }\n  } catch (e) {}\n\n  // Failed to create wrapper.  Just return in-memory storage.\n  // TODO: log?\n  return new MemoryStorage();\n};\n\n/** A storage object that lasts across sessions */\nexport const PersistentStorage = createStoragefor('localStorage');\n\n/** A storage object that only lasts one session */\nexport const SessionStorage = createStoragefor('sessionStorage');\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Logger, LogLevel } from '@firebase/logger';\nimport {\n  assert,\n  base64,\n  Sha1,\n  stringToByteArray,\n  stringify,\n  isNodeSdk\n} from '@firebase/util';\n\nimport { SessionStorage } from '../storage/storage';\nimport { QueryContext } from '../view/EventRegistration';\n\ndeclare const window: Window;\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\ndeclare const Windows: any;\n\nconst logClient = new Logger('@firebase/database');\n\n/**\n * Returns a locally-unique ID (generated by just incrementing up from 0 each time its called).\n */\nexport const LUIDGenerator: () => number = (function () {\n  let id = 1;\n  return function () {\n    return id++;\n  };\n})();\n\n/**\n * Sha1 hash of the input string\n * @param str - The string to hash\n * @returns {!string} The resulting hash\n */\nexport const sha1 = function (str: string): string {\n  const utf8Bytes = stringToByteArray(str);\n  const sha1 = new Sha1();\n  sha1.update(utf8Bytes);\n  const sha1Bytes = sha1.digest();\n  return base64.encodeByteArray(sha1Bytes);\n};\n\nconst buildLogMessage_ = function (...varArgs: unknown[]): string {\n  let message = '';\n  for (let i = 0; i < varArgs.length; i++) {\n    const arg = varArgs[i];\n    if (\n      Array.isArray(arg) ||\n      (arg &&\n        typeof arg === 'object' &&\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        typeof (arg as any).length === 'number')\n    ) {\n      message += buildLogMessage_.apply(null, arg);\n    } else if (typeof arg === 'object') {\n      message += stringify(arg);\n    } else {\n      message += arg;\n    }\n    message += ' ';\n  }\n\n  return message;\n};\n\n/**\n * Use this for all debug messages in Firebase.\n */\nexport let logger: ((a: string) => void) | null = null;\n\n/**\n * Flag to check for log availability on first log message\n */\nlet firstLog_ = true;\n\n/**\n * The implementation of Firebase.enableLogging (defined here to break dependencies)\n * @param logger_ - A flag to turn on logging, or a custom logger\n * @param persistent - Whether or not to persist logging settings across refreshes\n */\nexport const enableLogging = function (\n  logger_?: boolean | ((a: string) => void) | null,\n  persistent?: boolean\n) {\n  assert(\n    !persistent || logger_ === true || logger_ === false,\n    \"Can't turn on custom loggers persistently.\"\n  );\n  if (logger_ === true) {\n    logClient.logLevel = LogLevel.VERBOSE;\n    logger = logClient.log.bind(logClient);\n    if (persistent) {\n      SessionStorage.set('logging_enabled', true);\n    }\n  } else if (typeof logger_ === 'function') {\n    logger = logger_;\n  } else {\n    logger = null;\n    SessionStorage.remove('logging_enabled');\n  }\n};\n\nexport const log = function (...varArgs: unknown[]) {\n  if (firstLog_ === true) {\n    firstLog_ = false;\n    if (logger === null && SessionStorage.get('logging_enabled') === true) {\n      enableLogging(true);\n    }\n  }\n\n  if (logger) {\n    const message = buildLogMessage_.apply(null, varArgs);\n    logger(message);\n  }\n};\n\nexport const logWrapper = function (\n  prefix: string\n): (...varArgs: unknown[]) => void {\n  return function (...varArgs: unknown[]) {\n    log(prefix, ...varArgs);\n  };\n};\n\nexport const error = function (...varArgs: string[]) {\n  const message = 'FIREBASE INTERNAL ERROR: ' + buildLogMessage_(...varArgs);\n  logClient.error(message);\n};\n\nexport const fatal = function (...varArgs: string[]) {\n  const message = `FIREBASE FATAL ERROR: ${buildLogMessage_(...varArgs)}`;\n  logClient.error(message);\n  throw new Error(message);\n};\n\nexport const warn = function (...varArgs: unknown[]) {\n  const message = 'FIREBASE WARNING: ' + buildLogMessage_(...varArgs);\n  logClient.warn(message);\n};\n\n/**\n * Logs a warning if the containing page uses https. Called when a call to new Firebase\n * does not use https.\n */\nexport const warnIfPageIsSecure = function () {\n  // Be very careful accessing browser globals. Who knows what may or may not exist.\n  if (\n    typeof window !== 'undefined' &&\n    window.location &&\n    window.location.protocol &&\n    window.location.protocol.indexOf('https:') !== -1\n  ) {\n    warn(\n      'Insecure Firebase access from a secure page. ' +\n        'Please use https in calls to new Firebase().'\n    );\n  }\n};\n\nexport const warnAboutUnsupportedMethod = function (methodName: string) {\n  warn(\n    methodName +\n      ' is unsupported and will likely change soon.  ' +\n      'Please do not use.'\n  );\n};\n\n/**\n * Returns true if data is NaN, or +/- Infinity.\n */\nexport const isInvalidJSONNumber = function (data: unknown): boolean {\n  return (\n    typeof data === 'number' &&\n    (data !== data || // NaN\n      data === Number.POSITIVE_INFINITY ||\n      data === Number.NEGATIVE_INFINITY)\n  );\n};\n\nexport const executeWhenDOMReady = function (fn: () => void) {\n  if (isNodeSdk() || document.readyState === 'complete') {\n    fn();\n  } else {\n    // Modeled after jQuery. Try DOMContentLoaded and onreadystatechange (which\n    // fire before onload), but fall back to onload.\n\n    let called = false;\n    const wrappedFn = function () {\n      if (!document.body) {\n        setTimeout(wrappedFn, Math.floor(10));\n        return;\n      }\n\n      if (!called) {\n        called = true;\n        fn();\n      }\n    };\n\n    if (document.addEventListener) {\n      document.addEventListener('DOMContentLoaded', wrappedFn, false);\n      // fallback to onload.\n      window.addEventListener('load', wrappedFn, false);\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    } else if ((document as any).attachEvent) {\n      // IE.\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      (document as any).attachEvent('onreadystatechange', () => {\n        if (document.readyState === 'complete') {\n          wrappedFn();\n        }\n      });\n      // fallback to onload.\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      (window as any).attachEvent('onload', wrappedFn);\n\n      // jQuery has an extra hack for IE that we could employ (based on\n      // http://javascript.nwbox.com/IEContentLoaded/) But it looks really old.\n      // I'm hoping we don't need it.\n    }\n  }\n};\n\n/**\n * Minimum key name. Invalid for actual data, used as a marker to sort before any valid names\n */\nexport const MIN_NAME = '[MIN_NAME]';\n\n/**\n * Maximum key name. Invalid for actual data, used as a marker to sort above any valid names\n */\nexport const MAX_NAME = '[MAX_NAME]';\n\n/**\n * Compares valid Firebase key names, plus min and max name\n */\nexport const nameCompare = function (a: string, b: string): number {\n  if (a === b) {\n    return 0;\n  } else if (a === MIN_NAME || b === MAX_NAME) {\n    return -1;\n  } else if (b === MIN_NAME || a === MAX_NAME) {\n    return 1;\n  } else {\n    const aAsInt = tryParseInt(a),\n      bAsInt = tryParseInt(b);\n\n    if (aAsInt !== null) {\n      if (bAsInt !== null) {\n        return aAsInt - bAsInt === 0 ? a.length - b.length : aAsInt - bAsInt;\n      } else {\n        return -1;\n      }\n    } else if (bAsInt !== null) {\n      return 1;\n    } else {\n      return a < b ? -1 : 1;\n    }\n  }\n};\n\n/**\n * @returns {!number} comparison result.\n */\nexport const stringCompare = function (a: string, b: string): number {\n  if (a === b) {\n    return 0;\n  } else if (a < b) {\n    return -1;\n  } else {\n    return 1;\n  }\n};\n\nexport const requireKey = function (\n  key: string,\n  obj: { [k: string]: unknown }\n): unknown {\n  if (obj && key in obj) {\n    return obj[key];\n  } else {\n    throw new Error(\n      'Missing required key (' + key + ') in object: ' + stringify(obj)\n    );\n  }\n};\n\nexport const ObjectToUniqueKey = function (obj: unknown): string {\n  if (typeof obj !== 'object' || obj === null) {\n    return stringify(obj);\n  }\n\n  const keys = [];\n  // eslint-disable-next-line guard-for-in\n  for (const k in obj) {\n    keys.push(k);\n  }\n\n  // Export as json, but with the keys sorted.\n  keys.sort();\n  let key = '{';\n  for (let i = 0; i < keys.length; i++) {\n    if (i !== 0) {\n      key += ',';\n    }\n    key += stringify(keys[i]);\n    key += ':';\n    key += ObjectToUniqueKey(obj[keys[i]]);\n  }\n\n  key += '}';\n  return key;\n};\n\n/**\n * Splits a string into a number of smaller segments of maximum size\n * @param str - The string\n * @param segsize - The maximum number of chars in the string.\n * @returns The string, split into appropriately-sized chunks\n */\nexport const splitStringBySize = function (\n  str: string,\n  segsize: number\n): string[] {\n  const len = str.length;\n\n  if (len <= segsize) {\n    return [str];\n  }\n\n  const dataSegs = [];\n  for (let c = 0; c < len; c += segsize) {\n    if (c + segsize > len) {\n      dataSegs.push(str.substring(c, len));\n    } else {\n      dataSegs.push(str.substring(c, c + segsize));\n    }\n  }\n  return dataSegs;\n};\n\n/**\n * Apply a function to each (key, value) pair in an object or\n * apply a function to each (index, value) pair in an array\n * @param obj - The object or array to iterate over\n * @param fn - The function to apply\n */\nexport function each(obj: object, fn: (k: string, v: unknown) => void) {\n  for (const key in obj) {\n    if (obj.hasOwnProperty(key)) {\n      fn(key, obj[key]);\n    }\n  }\n}\n\n/**\n * Like goog.bind, but doesn't bother to create a closure if opt_context is null/undefined.\n * @param callback - Callback function.\n * @param context - Optional context to bind to.\n *\n */\nexport const bindCallback = function (\n  callback: (a: unknown) => void,\n  context?: object | null\n): (a: unknown) => void {\n  return context ? callback.bind(context) : callback;\n};\n\n/**\n * Borrowed from http://hg.secondlife.com/llsd/src/tip/js/typedarray.js (MIT License)\n * I made one modification at the end and removed the NaN / Infinity\n * handling (since it seemed broken [caused an overflow] and we don't need it).  See MJL comments.\n * @param v - A double\n *\n */\nexport const doubleToIEEE754String = function (v: number): string {\n  assert(!isInvalidJSONNumber(v), 'Invalid JSON number'); // MJL\n\n  const ebits = 11,\n    fbits = 52;\n  const bias = (1 << (ebits - 1)) - 1;\n  let s, e, f, ln, i;\n\n  // Compute sign, exponent, fraction\n  // Skip NaN / Infinity handling --MJL.\n  if (v === 0) {\n    e = 0;\n    f = 0;\n    s = 1 / v === -Infinity ? 1 : 0;\n  } else {\n    s = v < 0;\n    v = Math.abs(v);\n\n    if (v >= Math.pow(2, 1 - bias)) {\n      // Normalized\n      ln = Math.min(Math.floor(Math.log(v) / Math.LN2), bias);\n      e = ln + bias;\n      f = Math.round(v * Math.pow(2, fbits - ln) - Math.pow(2, fbits));\n    } else {\n      // Denormalized\n      e = 0;\n      f = Math.round(v / Math.pow(2, 1 - bias - fbits));\n    }\n  }\n\n  // Pack sign, exponent, fraction\n  const bits = [];\n  for (i = fbits; i; i -= 1) {\n    bits.push(f % 2 ? 1 : 0);\n    f = Math.floor(f / 2);\n  }\n  for (i = ebits; i; i -= 1) {\n    bits.push(e % 2 ? 1 : 0);\n    e = Math.floor(e / 2);\n  }\n  bits.push(s ? 1 : 0);\n  bits.reverse();\n  const str = bits.join('');\n\n  // Return the data as a hex string. --MJL\n  let hexByteString = '';\n  for (i = 0; i < 64; i += 8) {\n    let hexByte = parseInt(str.substr(i, 8), 2).toString(16);\n    if (hexByte.length === 1) {\n      hexByte = '0' + hexByte;\n    }\n    hexByteString = hexByteString + hexByte;\n  }\n  return hexByteString.toLowerCase();\n};\n\n/**\n * Used to detect if we're in a Chrome content script (which executes in an\n * isolated environment where long-polling doesn't work).\n */\nexport const isChromeExtensionContentScript = function (): boolean {\n  return !!(\n    typeof window === 'object' &&\n    window['chrome'] &&\n    window['chrome']['extension'] &&\n    !/^chrome/.test(window.location.href)\n  );\n};\n\n/**\n * Used to detect if we're in a Windows 8 Store app.\n */\nexport const isWindowsStoreApp = function (): boolean {\n  // Check for the presence of a couple WinRT globals\n  return typeof Windows === 'object' && typeof Windows.UI === 'object';\n};\n\n/**\n * Converts a server error code to a Javascript Error\n */\nexport function errorForServerCode(code: string, query: QueryContext): Error {\n  let reason = 'Unknown Error';\n  if (code === 'too_big') {\n    reason =\n      'The data requested exceeds the maximum size ' +\n      'that can be accessed with a single request.';\n  } else if (code === 'permission_denied') {\n    reason = \"Client doesn't have permission to access the desired data.\";\n  } else if (code === 'unavailable') {\n    reason = 'The service is unavailable';\n  }\n\n  const error = new Error(\n    code + ' at ' + query._path.toString() + ': ' + reason\n  );\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  (error as any).code = code.toUpperCase();\n  return error;\n}\n\n/**\n * Used to test for integer-looking strings\n */\nexport const INTEGER_REGEXP_ = new RegExp('^-?(0*)\\\\d{1,10}$');\n\n/**\n * For use in keys, the minimum possible 32-bit integer.\n */\nexport const INTEGER_32_MIN = -2147483648;\n\n/**\n * For use in kyes, the maximum possible 32-bit integer.\n */\nexport const INTEGER_32_MAX = 2147483647;\n\n/**\n * If the string contains a 32-bit integer, return it.  Else return null.\n */\nexport const tryParseInt = function (str: string): number | null {\n  if (INTEGER_REGEXP_.test(str)) {\n    const intVal = Number(str);\n    if (intVal >= INTEGER_32_MIN && intVal <= INTEGER_32_MAX) {\n      return intVal;\n    }\n  }\n  return null;\n};\n\n/**\n * Helper to run some code but catch any exceptions and re-throw them later.\n * Useful for preventing user callbacks from breaking internal code.\n *\n * Re-throwing the exception from a setTimeout is a little evil, but it's very\n * convenient (we don't have to try to figure out when is a safe point to\n * re-throw it), and the behavior seems reasonable:\n *\n * * If you aren't pausing on exceptions, you get an error in the console with\n *   the correct stack trace.\n * * If you're pausing on all exceptions, the debugger will pause on your\n *   exception and then again when we rethrow it.\n * * If you're only pausing on uncaught exceptions, the debugger will only pause\n *   on us re-throwing it.\n *\n * @param fn - The code to guard.\n */\nexport const exceptionGuard = function (fn: () => void) {\n  try {\n    fn();\n  } catch (e) {\n    // Re-throw exception when it's safe.\n    setTimeout(() => {\n      // It used to be that \"throw e\" would result in a good console error with\n      // relevant context, but as of Chrome 39, you just get the firebase.js\n      // file/line number where we re-throw it, which is useless. So we log\n      // e.stack explicitly.\n      const stack = e.stack || '';\n      warn('Exception was thrown by user callback.', stack);\n      throw e;\n    }, Math.floor(0));\n  }\n};\n\n/**\n * Helper function to safely call opt_callback with the specified arguments.  It:\n * 1. Turns into a no-op if opt_callback is null or undefined.\n * 2. Wraps the call inside exceptionGuard to prevent exceptions from breaking our state.\n *\n * @param callback - Optional onComplete callback.\n * @param varArgs - Arbitrary args to be passed to opt_onComplete\n */\nexport const callUserCallback = function (\n  // eslint-disable-next-line @typescript-eslint/ban-types\n  callback?: Function | null,\n  ...varArgs: unknown[]\n) {\n  if (typeof callback === 'function') {\n    exceptionGuard(() => {\n      callback(...varArgs);\n    });\n  }\n};\n\n/**\n * @returns {boolean} true if we think we're currently being crawled.\n */\nexport const beingCrawled = function (): boolean {\n  const userAgent =\n    (typeof window === 'object' &&\n      window['navigator'] &&\n      window['navigator']['userAgent']) ||\n    '';\n\n  // For now we whitelist the most popular crawlers.  We should refine this to be the set of crawlers we\n  // believe to support JavaScript/AJAX rendering.\n  // NOTE: Google Webmaster Tools doesn't really belong, but their \"This is how a visitor to your website\n  // would have seen the page\" is flaky if we don't treat it as a crawler.\n  return (\n    userAgent.search(\n      /googlebot|google webmaster tools|bingbot|yahoo! slurp|baiduspider|yandexbot|duckduckbot/i\n    ) >= 0\n  );\n};\n\n/**\n * Export a property of an object using a getter function.\n */\nexport const exportPropGetter = function (\n  object: object,\n  name: string,\n  fnGet: () => unknown\n) {\n  Object.defineProperty(object, name, { get: fnGet });\n};\n\n/**\n * Same as setTimeout() except on Node.JS it will /not/ prevent the process from exiting.\n *\n * It is removed with clearTimeout() as normal.\n *\n * @param fn - Function to run.\n * @param time - Milliseconds to wait before running.\n * @returns The setTimeout() return value.\n */\nexport const setTimeoutNonBlocking = function (\n  fn: () => void,\n  time: number\n): number | object {\n  const timeout: number | object = setTimeout(fn, time);\n  // Note: at the time of this comment, unrefTimer is under the unstable set of APIs. Run with --unstable to enable the API.\n  if (\n    typeof timeout === 'number' &&\n    // @ts-ignore Is only defined in Deno environments.\n    typeof Deno !== 'undefined' &&\n    // @ts-ignore Deno and unrefTimer are only defined in Deno environments.\n    Deno['unrefTimer']\n  ) {\n    // @ts-ignore Deno and unrefTimer are only defined in Deno environments.\n    Deno.unrefTimer(timeout);\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  } else if (typeof timeout === 'object' && (timeout as any)['unref']) {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    (timeout as any)['unref']();\n  }\n\n  return timeout;\n};\n","/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  AppCheckInternalComponentName,\n  AppCheckTokenListener,\n  AppCheckTokenResult,\n  FirebaseAppCheckInternal\n} from '@firebase/app-check-interop-types';\nimport { Provider } from '@firebase/component';\n\nimport { warn } from './util/util';\n\n/**\n * Abstraction around AppCheck's token fetching capabilities.\n */\nexport class AppCheckTokenProvider {\n  private appCheck?: FirebaseAppCheckInternal;\n  constructor(\n    private appName_: string,\n    private appCheckProvider?: Provider<AppCheckInternalComponentName>\n  ) {\n    this.appCheck = appCheckProvider?.getImmediate({ optional: true });\n    if (!this.appCheck) {\n      appCheckProvider?.get().then(appCheck => (this.appCheck = appCheck));\n    }\n  }\n\n  getToken(forceRefresh?: boolean): Promise<AppCheckTokenResult> {\n    if (!this.appCheck) {\n      return new Promise<AppCheckTokenResult>((resolve, reject) => {\n        // Support delayed initialization of FirebaseAppCheck. This allows our\n        // customers to initialize the RTDB SDK before initializing Firebase\n        // AppCheck and ensures that all requests are authenticated if a token\n        // becomes available before the timoeout below expires.\n        setTimeout(() => {\n          if (this.appCheck) {\n            this.getToken(forceRefresh).then(resolve, reject);\n          } else {\n            resolve(null);\n          }\n        }, 0);\n      });\n    }\n    return this.appCheck.getToken(forceRefresh);\n  }\n\n  addTokenChangeListener(listener: AppCheckTokenListener) {\n    this.appCheckProvider\n      ?.get()\n      .then(appCheck => appCheck.addTokenListener(listener));\n  }\n\n  notifyForInvalidToken(): void {\n    warn(\n      `Provided AppCheck credentials for the app named \"${this.appName_}\" ` +\n        'are invalid. This usually indicates your app was not initialized correctly.'\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseAuthTokenData } from '@firebase/app-types/private';\nimport {\n  FirebaseAuthInternal,\n  FirebaseAuthInternalName\n} from '@firebase/auth-interop-types';\nimport { Provider } from '@firebase/component';\n\nimport { log, warn } from './util/util';\n\nexport interface AuthTokenProvider {\n  getToken(forceRefresh: boolean): Promise<FirebaseAuthTokenData>;\n  addTokenChangeListener(listener: (token: string | null) => void): void;\n  removeTokenChangeListener(listener: (token: string | null) => void): void;\n  notifyForInvalidToken(): void;\n}\n\n/**\n * Abstraction around FirebaseApp's token fetching capabilities.\n */\nexport class FirebaseAuthTokenProvider implements AuthTokenProvider {\n  private auth_: FirebaseAuthInternal | null = null;\n\n  constructor(\n    private appName_: string,\n    private firebaseOptions_: object,\n    private authProvider_: Provider<FirebaseAuthInternalName>\n  ) {\n    this.auth_ = authProvider_.getImmediate({ optional: true });\n    if (!this.auth_) {\n      authProvider_.onInit(auth => (this.auth_ = auth));\n    }\n  }\n\n  getToken(forceRefresh: boolean): Promise<FirebaseAuthTokenData> {\n    if (!this.auth_) {\n      return new Promise<FirebaseAuthTokenData>((resolve, reject) => {\n        // Support delayed initialization of FirebaseAuth. This allows our\n        // customers to initialize the RTDB SDK before initializing Firebase\n        // Auth and ensures that all requests are authenticated if a token\n        // becomes available before the timoeout below expires.\n        setTimeout(() => {\n          if (this.auth_) {\n            this.getToken(forceRefresh).then(resolve, reject);\n          } else {\n            resolve(null);\n          }\n        }, 0);\n      });\n    }\n\n    return this.auth_.getToken(forceRefresh).catch(error => {\n      // TODO: Need to figure out all the cases this is raised and whether\n      // this makes sense.\n      if (error && error.code === 'auth/token-not-initialized') {\n        log('Got auth/token-not-initialized error.  Treating as null token.');\n        return null;\n      } else {\n        return Promise.reject(error);\n      }\n    });\n  }\n\n  addTokenChangeListener(listener: (token: string | null) => void): void {\n    // TODO: We might want to wrap the listener and call it with no args to\n    // avoid a leaky abstraction, but that makes removing the listener harder.\n    if (this.auth_) {\n      this.auth_.addAuthTokenListener(listener);\n    } else {\n      this.authProvider_\n        .get()\n        .then(auth => auth.addAuthTokenListener(listener));\n    }\n  }\n\n  removeTokenChangeListener(listener: (token: string | null) => void): void {\n    this.authProvider_\n      .get()\n      .then(auth => auth.removeAuthTokenListener(listener));\n  }\n\n  notifyForInvalidToken(): void {\n    let errorMessage =\n      'Provided authentication credentials for the app named \"' +\n      this.appName_ +\n      '\" are invalid. This usually indicates your app was not ' +\n      'initialized correctly. ';\n    if ('credential' in this.firebaseOptions_) {\n      errorMessage +=\n        'Make sure the \"credential\" property provided to initializeApp() ' +\n        'is authorized to access the specified \"databaseURL\" and is from the correct ' +\n        'project.';\n    } else if ('serviceAccount' in this.firebaseOptions_) {\n      errorMessage +=\n        'Make sure the \"serviceAccount\" property provided to initializeApp() ' +\n        'is authorized to access the specified \"databaseURL\" and is from the correct ' +\n        'project.';\n    } else {\n      errorMessage +=\n        'Make sure the \"apiKey\" and \"databaseURL\" properties provided to ' +\n        'initializeApp() match the values provided for your app at ' +\n        'https://console.firebase.google.com/.';\n    }\n    warn(errorMessage);\n  }\n}\n\n/* AuthTokenProvider that supplies a constant token. Used by Admin SDK or mockUserToken with emulators. */\nexport class EmulatorTokenProvider implements AuthTokenProvider {\n  /** A string that is treated as an admin access token by the RTDB emulator. Used by Admin SDK. */\n  static OWNER = 'owner';\n\n  constructor(private accessToken: string) {}\n\n  getToken(forceRefresh: boolean): Promise<FirebaseAuthTokenData> {\n    return Promise.resolve({\n      accessToken: this.accessToken\n    });\n  }\n\n  addTokenChangeListener(listener: (token: string | null) => void): void {\n    // Invoke the listener immediately to match the behavior in Firebase Auth\n    // (see packages/auth/src/auth.js#L1807)\n    listener(this.accessToken);\n  }\n\n  removeTokenChangeListener(listener: (token: string | null) => void): void {}\n\n  notifyForInvalidToken(): void {}\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { LONG_POLLING, WEBSOCKET } from '../realtime/Constants';\n\nimport { PersistentStorage } from './storage/storage';\nimport { each } from './util/util';\n\n/**\n * A class that holds metadata about a Repo object\n */\nexport class RepoInfo {\n  private _host: string;\n  private _domain: string;\n  internalHost: string;\n\n  /**\n   * @param host - Hostname portion of the url for the repo\n   * @param secure - Whether or not this repo is accessed over ssl\n   * @param namespace - The namespace represented by the repo\n   * @param webSocketOnly - Whether to prefer websockets over all other transports (used by Nest).\n   * @param nodeAdmin - Whether this instance uses Admin SDK credentials\n   * @param persistenceKey - Override the default session persistence storage key\n   */\n  constructor(\n    host: string,\n    public readonly secure: boolean,\n    public readonly namespace: string,\n    public readonly webSocketOnly: boolean,\n    public readonly nodeAdmin: boolean = false,\n    public readonly persistenceKey: string = '',\n    public readonly includeNamespaceInQueryParams: boolean = false\n  ) {\n    this._host = host.toLowerCase();\n    this._domain = this._host.substr(this._host.indexOf('.') + 1);\n    this.internalHost =\n      (PersistentStorage.get('host:' + host) as string) || this._host;\n  }\n\n  isCacheableHost(): boolean {\n    return this.internalHost.substr(0, 2) === 's-';\n  }\n\n  isCustomHost() {\n    return (\n      this._domain !== 'firebaseio.com' &&\n      this._domain !== 'firebaseio-demo.com'\n    );\n  }\n\n  get host() {\n    return this._host;\n  }\n\n  set host(newHost: string) {\n    if (newHost !== this.internalHost) {\n      this.internalHost = newHost;\n      if (this.isCacheableHost()) {\n        PersistentStorage.set('host:' + this._host, this.internalHost);\n      }\n    }\n  }\n\n  toString(): string {\n    let str = this.toURLString();\n    if (this.persistenceKey) {\n      str += '<' + this.persistenceKey + '>';\n    }\n    return str;\n  }\n\n  toURLString(): string {\n    const protocol = this.secure ? 'https://' : 'http://';\n    const query = this.includeNamespaceInQueryParams\n      ? `?ns=${this.namespace}`\n      : '';\n    return `${protocol}${this.host}/${query}`;\n  }\n}\n\nfunction repoInfoNeedsQueryParam(repoInfo: RepoInfo): boolean {\n  return (\n    repoInfo.host !== repoInfo.internalHost ||\n    repoInfo.isCustomHost() ||\n    repoInfo.includeNamespaceInQueryParams\n  );\n}\n\n/**\n * Returns the websocket URL for this repo\n * @param repoInfo - RepoInfo object\n * @param type - of connection\n * @param params - list\n * @returns The URL for this repo\n */\nexport function repoInfoConnectionURL(\n  repoInfo: RepoInfo,\n  type: string,\n  params: { [k: string]: string }\n): string {\n  assert(typeof type === 'string', 'typeof type must == string');\n  assert(typeof params === 'object', 'typeof params must == object');\n\n  let connURL: string;\n  if (type === WEBSOCKET) {\n    connURL =\n      (repoInfo.secure ? 'wss://' : 'ws://') + repoInfo.internalHost + '/.ws?';\n  } else if (type === LONG_POLLING) {\n    connURL =\n      (repoInfo.secure ? 'https://' : 'http://') +\n      repoInfo.internalHost +\n      '/.lp?';\n  } else {\n    throw new Error('Unknown connection type: ' + type);\n  }\n  if (repoInfoNeedsQueryParam(repoInfo)) {\n    params['ns'] = repoInfo.namespace;\n  }\n\n  const pairs: string[] = [];\n\n  each(params, (key: string, value: string) => {\n    pairs.push(key + '=' + value);\n  });\n\n  return connURL + pairs.join('&');\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { RepoInfo } from '../RepoInfo';\n\nimport { StatsCollection } from './StatsCollection';\n\nconst collections: { [k: string]: StatsCollection } = {};\nconst reporters: { [k: string]: unknown } = {};\n\nexport function statsManagerGetCollection(repoInfo: RepoInfo): StatsCollection {\n  const hashString = repoInfo.toString();\n\n  if (!collections[hashString]) {\n    collections[hashString] = new StatsCollection();\n  }\n\n  return collections[hashString];\n}\n\nexport function statsManagerGetOrCreateReporter<T>(\n  repoInfo: RepoInfo,\n  creatorFunction: () => T\n): T {\n  const hashString = repoInfo.toString();\n\n  if (!reporters[hashString]) {\n    reporters[hashString] = creatorFunction();\n  }\n\n  return reporters[hashString] as T;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { exceptionGuard } from '../../core/util/util';\n\n/**\n * This class ensures the packets from the server arrive in order\n * This class takes data from the server and ensures it gets passed into the callbacks in order.\n */\nexport class PacketReceiver {\n  pendingResponses: unknown[] = [];\n  currentResponseNum = 0;\n  closeAfterResponse = -1;\n  onClose: (() => void) | null = null;\n\n  /**\n   * @param onMessage_\n   */\n  constructor(private onMessage_: (a: {}) => void) {}\n\n  closeAfter(responseNum: number, callback: () => void) {\n    this.closeAfterResponse = responseNum;\n    this.onClose = callback;\n    if (this.closeAfterResponse < this.currentResponseNum) {\n      this.onClose();\n      this.onClose = null;\n    }\n  }\n\n  /**\n   * Each message from the server comes with a response number, and an array of data. The responseNumber\n   * allows us to ensure that we process them in the right order, since we can't be guaranteed that all\n   * browsers will respond in the same order as the requests we sent\n   */\n  handleResponse(requestNum: number, data: unknown[]) {\n    this.pendingResponses[requestNum] = data;\n    while (this.pendingResponses[this.currentResponseNum]) {\n      const toProcess = this.pendingResponses[\n        this.currentResponseNum\n      ] as unknown[];\n      delete this.pendingResponses[this.currentResponseNum];\n      for (let i = 0; i < toProcess.length; ++i) {\n        if (toProcess[i]) {\n          exceptionGuard(() => {\n            this.onMessage_(toProcess[i]);\n          });\n        }\n      }\n      if (this.currentResponseNum === this.closeAfterResponse) {\n        if (this.onClose) {\n          this.onClose();\n          this.onClose = null;\n        }\n        break;\n      }\n      this.currentResponseNum++;\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { base64Encode, isNodeSdk, stringify } from '@firebase/util';\n\nimport { RepoInfo, repoInfoConnectionURL } from '../core/RepoInfo';\nimport { StatsCollection } from '../core/stats/StatsCollection';\nimport { statsManagerGetCollection } from '../core/stats/StatsManager';\nimport {\n  executeWhenDOMReady,\n  isChromeExtensionContentScript,\n  isWindowsStoreApp,\n  log,\n  logWrapper,\n  LUIDGenerator,\n  splitStringBySize\n} from '../core/util/util';\n\nimport {\n  APP_CHECK_TOKEN_PARAM,\n  APPLICATION_ID_PARAM,\n  FORGE_DOMAIN_RE,\n  FORGE_REF,\n  LAST_SESSION_PARAM,\n  LONG_POLLING,\n  PROTOCOL_VERSION,\n  REFERER_PARAM,\n  TRANSPORT_SESSION_PARAM,\n  VERSION_PARAM\n} from './Constants';\nimport { PacketReceiver } from './polling/PacketReceiver';\nimport { Transport } from './Transport';\n\n// URL query parameters associated with longpolling\nexport const FIREBASE_LONGPOLL_START_PARAM = 'start';\nexport const FIREBASE_LONGPOLL_CLOSE_COMMAND = 'close';\nexport const FIREBASE_LONGPOLL_COMMAND_CB_NAME = 'pLPCommand';\nexport const FIREBASE_LONGPOLL_DATA_CB_NAME = 'pRTLPCB';\nexport const FIREBASE_LONGPOLL_ID_PARAM = 'id';\nexport const FIREBASE_LONGPOLL_PW_PARAM = 'pw';\nexport const FIREBASE_LONGPOLL_SERIAL_PARAM = 'ser';\nexport const FIREBASE_LONGPOLL_CALLBACK_ID_PARAM = 'cb';\nexport const FIREBASE_LONGPOLL_SEGMENT_NUM_PARAM = 'seg';\nexport const FIREBASE_LONGPOLL_SEGMENTS_IN_PACKET = 'ts';\nexport const FIREBASE_LONGPOLL_DATA_PARAM = 'd';\nexport const FIREBASE_LONGPOLL_DISCONN_FRAME_PARAM = 'disconn';\nexport const FIREBASE_LONGPOLL_DISCONN_FRAME_REQUEST_PARAM = 'dframe';\n\n//Data size constants.\n//TODO: Perf: the maximum length actually differs from browser to browser.\n// We should check what browser we're on and set accordingly.\nconst MAX_URL_DATA_SIZE = 1870;\nconst SEG_HEADER_SIZE = 30; //ie: &seg=8299234&ts=982389123&d=\nconst MAX_PAYLOAD_SIZE = MAX_URL_DATA_SIZE - SEG_HEADER_SIZE;\n\n/**\n * Keepalive period\n * send a fresh request at minimum every 25 seconds. Opera has a maximum request\n * length of 30 seconds that we can't exceed.\n */\nconst KEEPALIVE_REQUEST_INTERVAL = 25000;\n\n/**\n * How long to wait before aborting a long-polling connection attempt.\n */\nconst LP_CONNECT_TIMEOUT = 30000;\n\n/**\n * This class manages a single long-polling connection.\n */\nexport class BrowserPollConnection implements Transport {\n  bytesSent = 0;\n  bytesReceived = 0;\n  urlFn: (params: object) => string;\n  scriptTagHolder: FirebaseIFrameScriptHolder;\n  myDisconnFrame: HTMLIFrameElement;\n  curSegmentNum: number;\n  myPacketOrderer: PacketReceiver;\n  id: string;\n  password: string;\n  private log_: (...a: unknown[]) => void;\n  private stats_: StatsCollection;\n  private everConnected_ = false;\n  private isClosed_: boolean;\n  private connectTimeoutTimer_: number | null;\n  private onDisconnect_: ((a?: boolean) => void) | null;\n\n  /**\n   * @param connId An identifier for this connection, used for logging\n   * @param repoInfo The info for the endpoint to send data to.\n   * @param applicationId The Firebase App ID for this project.\n   * @param appCheckToken The AppCheck token for this client.\n   * @param authToken The AuthToken to use for this connection.\n   * @param transportSessionId Optional transportSessionid if we are\n   * reconnecting for an existing transport session\n   * @param lastSessionId Optional lastSessionId if the PersistentConnection has\n   * already created a connection previously\n   */\n  constructor(\n    public connId: string,\n    public repoInfo: RepoInfo,\n    private applicationId?: string,\n    private appCheckToken?: string,\n    private authToken?: string,\n    public transportSessionId?: string,\n    public lastSessionId?: string\n  ) {\n    this.log_ = logWrapper(connId);\n    this.stats_ = statsManagerGetCollection(repoInfo);\n    this.urlFn = (params: { [k: string]: string }) => {\n      // Always add the token if we have one.\n      if (this.appCheckToken) {\n        params[APP_CHECK_TOKEN_PARAM] = this.appCheckToken;\n      }\n      return repoInfoConnectionURL(repoInfo, LONG_POLLING, params);\n    };\n  }\n\n  /**\n   * @param onMessage - Callback when messages arrive\n   * @param onDisconnect - Callback with connection lost.\n   */\n  open(onMessage: (msg: {}) => void, onDisconnect: (a?: boolean) => void) {\n    this.curSegmentNum = 0;\n    this.onDisconnect_ = onDisconnect;\n    this.myPacketOrderer = new PacketReceiver(onMessage);\n    this.isClosed_ = false;\n\n    this.connectTimeoutTimer_ = setTimeout(() => {\n      this.log_('Timed out trying to connect.');\n      // Make sure we clear the host cache\n      this.onClosed_();\n      this.connectTimeoutTimer_ = null;\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    }, Math.floor(LP_CONNECT_TIMEOUT)) as any;\n\n    // Ensure we delay the creation of the iframe until the DOM is loaded.\n    executeWhenDOMReady(() => {\n      if (this.isClosed_) {\n        return;\n      }\n\n      //Set up a callback that gets triggered once a connection is set up.\n      this.scriptTagHolder = new FirebaseIFrameScriptHolder(\n        (...args) => {\n          const [command, arg1, arg2, arg3, arg4] = args;\n          this.incrementIncomingBytes_(args);\n          if (!this.scriptTagHolder) {\n            return; // we closed the connection.\n          }\n\n          if (this.connectTimeoutTimer_) {\n            clearTimeout(this.connectTimeoutTimer_);\n            this.connectTimeoutTimer_ = null;\n          }\n          this.everConnected_ = true;\n          if (command === FIREBASE_LONGPOLL_START_PARAM) {\n            this.id = arg1 as string;\n            this.password = arg2 as string;\n          } else if (command === FIREBASE_LONGPOLL_CLOSE_COMMAND) {\n            // Don't clear the host cache. We got a response from the server, so we know it's reachable\n            if (arg1) {\n              // We aren't expecting any more data (other than what the server's already in the process of sending us\n              // through our already open polls), so don't send any more.\n              this.scriptTagHolder.sendNewPolls = false;\n\n              // arg1 in this case is the last response number sent by the server. We should try to receive\n              // all of the responses up to this one before closing\n              this.myPacketOrderer.closeAfter(arg1 as number, () => {\n                this.onClosed_();\n              });\n            } else {\n              this.onClosed_();\n            }\n          } else {\n            throw new Error('Unrecognized command received: ' + command);\n          }\n        },\n        (...args) => {\n          const [pN, data] = args;\n          this.incrementIncomingBytes_(args);\n          this.myPacketOrderer.handleResponse(pN as number, data as unknown[]);\n        },\n        () => {\n          this.onClosed_();\n        },\n        this.urlFn\n      );\n\n      //Send the initial request to connect. The serial number is simply to keep the browser from pulling previous results\n      //from cache.\n      const urlParams: { [k: string]: string | number } = {};\n      urlParams[FIREBASE_LONGPOLL_START_PARAM] = 't';\n      urlParams[FIREBASE_LONGPOLL_SERIAL_PARAM] = Math.floor(\n        Math.random() * 100000000\n      );\n      if (this.scriptTagHolder.uniqueCallbackIdentifier) {\n        urlParams[FIREBASE_LONGPOLL_CALLBACK_ID_PARAM] =\n          this.scriptTagHolder.uniqueCallbackIdentifier;\n      }\n      urlParams[VERSION_PARAM] = PROTOCOL_VERSION;\n      if (this.transportSessionId) {\n        urlParams[TRANSPORT_SESSION_PARAM] = this.transportSessionId;\n      }\n      if (this.lastSessionId) {\n        urlParams[LAST_SESSION_PARAM] = this.lastSessionId;\n      }\n      if (this.applicationId) {\n        urlParams[APPLICATION_ID_PARAM] = this.applicationId;\n      }\n      if (this.appCheckToken) {\n        urlParams[APP_CHECK_TOKEN_PARAM] = this.appCheckToken;\n      }\n      if (\n        typeof location !== 'undefined' &&\n        location.hostname &&\n        FORGE_DOMAIN_RE.test(location.hostname)\n      ) {\n        urlParams[REFERER_PARAM] = FORGE_REF;\n      }\n      const connectURL = this.urlFn(urlParams);\n      this.log_('Connecting via long-poll to ' + connectURL);\n      this.scriptTagHolder.addTag(connectURL, () => {\n        /* do nothing */\n      });\n    });\n  }\n\n  /**\n   * Call this when a handshake has completed successfully and we want to consider the connection established\n   */\n  start() {\n    this.scriptTagHolder.startLongPoll(this.id, this.password);\n    this.addDisconnectPingFrame(this.id, this.password);\n  }\n\n  static forceAllow_: boolean;\n\n  /**\n   * Forces long polling to be considered as a potential transport\n   */\n  static forceAllow() {\n    BrowserPollConnection.forceAllow_ = true;\n  }\n\n  static forceDisallow_: boolean;\n\n  /**\n   * Forces longpolling to not be considered as a potential transport\n   */\n  static forceDisallow() {\n    BrowserPollConnection.forceDisallow_ = true;\n  }\n\n  // Static method, use string literal so it can be accessed in a generic way\n  static isAvailable() {\n    if (isNodeSdk()) {\n      return false;\n    } else if (BrowserPollConnection.forceAllow_) {\n      return true;\n    } else {\n      // NOTE: In React-Native there's normally no 'document', but if you debug a React-Native app in\n      // the Chrome debugger, 'document' is defined, but document.createElement is null (2015/06/08).\n      return (\n        !BrowserPollConnection.forceDisallow_ &&\n        typeof document !== 'undefined' &&\n        document.createElement != null &&\n        !isChromeExtensionContentScript() &&\n        !isWindowsStoreApp()\n      );\n    }\n  }\n\n  /**\n   * No-op for polling\n   */\n  markConnectionHealthy() {}\n\n  /**\n   * Stops polling and cleans up the iframe\n   */\n  private shutdown_() {\n    this.isClosed_ = true;\n\n    if (this.scriptTagHolder) {\n      this.scriptTagHolder.close();\n      this.scriptTagHolder = null;\n    }\n\n    //remove the disconnect frame, which will trigger an XHR call to the server to tell it we're leaving.\n    if (this.myDisconnFrame) {\n      document.body.removeChild(this.myDisconnFrame);\n      this.myDisconnFrame = null;\n    }\n\n    if (this.connectTimeoutTimer_) {\n      clearTimeout(this.connectTimeoutTimer_);\n      this.connectTimeoutTimer_ = null;\n    }\n  }\n\n  /**\n   * Triggered when this transport is closed\n   */\n  private onClosed_() {\n    if (!this.isClosed_) {\n      this.log_('Longpoll is closing itself');\n      this.shutdown_();\n\n      if (this.onDisconnect_) {\n        this.onDisconnect_(this.everConnected_);\n        this.onDisconnect_ = null;\n      }\n    }\n  }\n\n  /**\n   * External-facing close handler. RealTime has requested we shut down. Kill our connection and tell the server\n   * that we've left.\n   */\n  close() {\n    if (!this.isClosed_) {\n      this.log_('Longpoll is being closed.');\n      this.shutdown_();\n    }\n  }\n\n  /**\n   * Send the JSON object down to the server. It will need to be stringified, base64 encoded, and then\n   * broken into chunks (since URLs have a small maximum length).\n   * @param data - The JSON data to transmit.\n   */\n  send(data: {}) {\n    const dataStr = stringify(data);\n    this.bytesSent += dataStr.length;\n    this.stats_.incrementCounter('bytes_sent', dataStr.length);\n\n    //first, lets get the base64-encoded data\n    const base64data = base64Encode(dataStr);\n\n    //We can only fit a certain amount in each URL, so we need to split this request\n    //up into multiple pieces if it doesn't fit in one request.\n    const dataSegs = splitStringBySize(base64data, MAX_PAYLOAD_SIZE);\n\n    //Enqueue each segment for transmission. We assign each chunk a sequential ID and a total number\n    //of segments so that we can reassemble the packet on the server.\n    for (let i = 0; i < dataSegs.length; i++) {\n      this.scriptTagHolder.enqueueSegment(\n        this.curSegmentNum,\n        dataSegs.length,\n        dataSegs[i]\n      );\n      this.curSegmentNum++;\n    }\n  }\n\n  /**\n   * This is how we notify the server that we're leaving.\n   * We aren't able to send requests with DHTML on a window close event, but we can\n   * trigger XHR requests in some browsers (everything but Opera basically).\n   */\n  addDisconnectPingFrame(id: string, pw: string) {\n    if (isNodeSdk()) {\n      return;\n    }\n    this.myDisconnFrame = document.createElement('iframe');\n    const urlParams: { [k: string]: string } = {};\n    urlParams[FIREBASE_LONGPOLL_DISCONN_FRAME_REQUEST_PARAM] = 't';\n    urlParams[FIREBASE_LONGPOLL_ID_PARAM] = id;\n    urlParams[FIREBASE_LONGPOLL_PW_PARAM] = pw;\n    this.myDisconnFrame.src = this.urlFn(urlParams);\n    this.myDisconnFrame.style.display = 'none';\n\n    document.body.appendChild(this.myDisconnFrame);\n  }\n\n  /**\n   * Used to track the bytes received by this client\n   */\n  private incrementIncomingBytes_(args: unknown) {\n    // TODO: This is an annoying perf hit just to track the number of incoming bytes.  Maybe it should be opt-in.\n    const bytesReceived = stringify(args).length;\n    this.bytesReceived += bytesReceived;\n    this.stats_.incrementCounter('bytes_received', bytesReceived);\n  }\n}\n\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport interface IFrameElement extends HTMLIFrameElement {\n  doc: Document;\n}\n\n/*********************************************************************************************\n * A wrapper around an iframe that is used as a long-polling script holder.\n *********************************************************************************************/\nexport class FirebaseIFrameScriptHolder {\n  //We maintain a count of all of the outstanding requests, because if we have too many active at once it can cause\n  //problems in some browsers.\n  outstandingRequests = new Set<number>();\n\n  //A queue of the pending segments waiting for transmission to the server.\n  pendingSegs: Array<{ seg: number; ts: number; d: unknown }> = [];\n\n  //A serial number. We use this for two things:\n  // 1) A way to ensure the browser doesn't cache responses to polls\n  // 2) A way to make the server aware when long-polls arrive in a different order than we started them. The\n  //    server needs to release both polls in this case or it will cause problems in Opera since Opera can only execute\n  //    JSONP code in the order it was added to the iframe.\n  currentSerial = Math.floor(Math.random() * 100000000);\n\n  // This gets set to false when we're \"closing down\" the connection (e.g. we're switching transports but there's still\n  // incoming data from the server that we're waiting for).\n  sendNewPolls = true;\n\n  uniqueCallbackIdentifier: number;\n  myIFrame: IFrameElement;\n  alive: boolean;\n  myID: string;\n  myPW: string;\n  commandCB: (command: string, ...args: unknown[]) => void;\n  onMessageCB: (...args: unknown[]) => void;\n\n  /**\n   * @param commandCB - The callback to be called when control commands are recevied from the server.\n   * @param onMessageCB - The callback to be triggered when responses arrive from the server.\n   * @param onDisconnect - The callback to be triggered when this tag holder is closed\n   * @param urlFn - A function that provides the URL of the endpoint to send data to.\n   */\n  constructor(\n    commandCB: (command: string, ...args: unknown[]) => void,\n    onMessageCB: (...args: unknown[]) => void,\n    public onDisconnect: () => void,\n    public urlFn: (a: object) => string\n  ) {\n    if (!isNodeSdk()) {\n      //Each script holder registers a couple of uniquely named callbacks with the window. These are called from the\n      //iframes where we put the long-polling script tags. We have two callbacks:\n      //   1) Command Callback - Triggered for control issues, like starting a connection.\n      //   2) Message Callback - Triggered when new data arrives.\n      this.uniqueCallbackIdentifier = LUIDGenerator();\n      window[\n        FIREBASE_LONGPOLL_COMMAND_CB_NAME + this.uniqueCallbackIdentifier\n      ] = commandCB;\n      window[FIREBASE_LONGPOLL_DATA_CB_NAME + this.uniqueCallbackIdentifier] =\n        onMessageCB;\n\n      //Create an iframe for us to add script tags to.\n      this.myIFrame = FirebaseIFrameScriptHolder.createIFrame_();\n\n      // Set the iframe's contents.\n      let script = '';\n      // if we set a javascript url, it's IE and we need to set the document domain. The javascript url is sufficient\n      // for ie9, but ie8 needs to do it again in the document itself.\n      if (\n        this.myIFrame.src &&\n        this.myIFrame.src.substr(0, 'javascript:'.length) === 'javascript:'\n      ) {\n        const currentDomain = document.domain;\n        script = '<script>document.domain=\"' + currentDomain + '\";</script>';\n      }\n      const iframeContents = '<html><body>' + script + '</body></html>';\n      try {\n        this.myIFrame.doc.open();\n        this.myIFrame.doc.write(iframeContents);\n        this.myIFrame.doc.close();\n      } catch (e) {\n        log('frame writing exception');\n        if (e.stack) {\n          log(e.stack);\n        }\n        log(e);\n      }\n    } else {\n      this.commandCB = commandCB;\n      this.onMessageCB = onMessageCB;\n    }\n  }\n\n  /**\n   * Each browser has its own funny way to handle iframes. Here we mush them all together into one object that I can\n   * actually use.\n   */\n  private static createIFrame_(): IFrameElement {\n    const iframe = document.createElement('iframe') as IFrameElement;\n    iframe.style.display = 'none';\n\n    // This is necessary in order to initialize the document inside the iframe\n    if (document.body) {\n      document.body.appendChild(iframe);\n      try {\n        // If document.domain has been modified in IE, this will throw an error, and we need to set the\n        // domain of the iframe's document manually. We can do this via a javascript: url as the src attribute\n        // Also note that we must do this *after* the iframe has been appended to the page. Otherwise it doesn't work.\n        const a = iframe.contentWindow.document;\n        if (!a) {\n          // Apologies for the log-spam, I need to do something to keep closure from optimizing out the assignment above.\n          log('No IE domain setting required');\n        }\n      } catch (e) {\n        const domain = document.domain;\n        iframe.src =\n          \"javascript:void((function(){document.open();document.domain='\" +\n          domain +\n          \"';document.close();})())\";\n      }\n    } else {\n      // LongPollConnection attempts to delay initialization until the document is ready, so hopefully this\n      // never gets hit.\n      throw 'Document body has not initialized. Wait to initialize Firebase until after the document is ready.';\n    }\n\n    // Get the document of the iframe in a browser-specific way.\n    if (iframe.contentDocument) {\n      iframe.doc = iframe.contentDocument; // Firefox, Opera, Safari\n    } else if (iframe.contentWindow) {\n      iframe.doc = iframe.contentWindow.document; // Internet Explorer\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    } else if ((iframe as any).document) {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      iframe.doc = (iframe as any).document; //others?\n    }\n\n    return iframe;\n  }\n\n  /**\n   * Cancel all outstanding queries and remove the frame.\n   */\n  close() {\n    //Mark this iframe as dead, so no new requests are sent.\n    this.alive = false;\n\n    if (this.myIFrame) {\n      //We have to actually remove all of the html inside this iframe before removing it from the\n      //window, or IE will continue loading and executing the script tags we've already added, which\n      //can lead to some errors being thrown. Setting innerHTML seems to be the easiest way to do this.\n      this.myIFrame.doc.body.innerHTML = '';\n      setTimeout(() => {\n        if (this.myIFrame !== null) {\n          document.body.removeChild(this.myIFrame);\n          this.myIFrame = null;\n        }\n      }, Math.floor(0));\n    }\n\n    // Protect from being called recursively.\n    const onDisconnect = this.onDisconnect;\n    if (onDisconnect) {\n      this.onDisconnect = null;\n      onDisconnect();\n    }\n  }\n\n  /**\n   * Actually start the long-polling session by adding the first script tag(s) to the iframe.\n   * @param id - The ID of this connection\n   * @param pw - The password for this connection\n   */\n  startLongPoll(id: string, pw: string) {\n    this.myID = id;\n    this.myPW = pw;\n    this.alive = true;\n\n    //send the initial request. If there are requests queued, make sure that we transmit as many as we are currently able to.\n    while (this.newRequest_()) {}\n  }\n\n  /**\n   * This is called any time someone might want a script tag to be added. It adds a script tag when there aren't\n   * too many outstanding requests and we are still alive.\n   *\n   * If there are outstanding packet segments to send, it sends one. If there aren't, it sends a long-poll anyways if\n   * needed.\n   */\n  private newRequest_() {\n    // We keep one outstanding request open all the time to receive data, but if we need to send data\n    // (pendingSegs.length > 0) then we create a new request to send the data.  The server will automatically\n    // close the old request.\n    if (\n      this.alive &&\n      this.sendNewPolls &&\n      this.outstandingRequests.size < (this.pendingSegs.length > 0 ? 2 : 1)\n    ) {\n      //construct our url\n      this.currentSerial++;\n      const urlParams: { [k: string]: string | number } = {};\n      urlParams[FIREBASE_LONGPOLL_ID_PARAM] = this.myID;\n      urlParams[FIREBASE_LONGPOLL_PW_PARAM] = this.myPW;\n      urlParams[FIREBASE_LONGPOLL_SERIAL_PARAM] = this.currentSerial;\n      let theURL = this.urlFn(urlParams);\n      //Now add as much data as we can.\n      let curDataString = '';\n      let i = 0;\n\n      while (this.pendingSegs.length > 0) {\n        //first, lets see if the next segment will fit.\n        const nextSeg = this.pendingSegs[0];\n        if (\n          (nextSeg.d as unknown[]).length +\n            SEG_HEADER_SIZE +\n            curDataString.length <=\n          MAX_URL_DATA_SIZE\n        ) {\n          //great, the segment will fit. Lets append it.\n          const theSeg = this.pendingSegs.shift();\n          curDataString =\n            curDataString +\n            '&' +\n            FIREBASE_LONGPOLL_SEGMENT_NUM_PARAM +\n            i +\n            '=' +\n            theSeg.seg +\n            '&' +\n            FIREBASE_LONGPOLL_SEGMENTS_IN_PACKET +\n            i +\n            '=' +\n            theSeg.ts +\n            '&' +\n            FIREBASE_LONGPOLL_DATA_PARAM +\n            i +\n            '=' +\n            theSeg.d;\n          i++;\n        } else {\n          break;\n        }\n      }\n\n      theURL = theURL + curDataString;\n      this.addLongPollTag_(theURL, this.currentSerial);\n\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  /**\n   * Queue a packet for transmission to the server.\n   * @param segnum - A sequential id for this packet segment used for reassembly\n   * @param totalsegs - The total number of segments in this packet\n   * @param data - The data for this segment.\n   */\n  enqueueSegment(segnum: number, totalsegs: number, data: unknown) {\n    //add this to the queue of segments to send.\n    this.pendingSegs.push({ seg: segnum, ts: totalsegs, d: data });\n\n    //send the data immediately if there isn't already data being transmitted, unless\n    //startLongPoll hasn't been called yet.\n    if (this.alive) {\n      this.newRequest_();\n    }\n  }\n\n  /**\n   * Add a script tag for a regular long-poll request.\n   * @param url - The URL of the script tag.\n   * @param serial - The serial number of the request.\n   */\n  private addLongPollTag_(url: string, serial: number) {\n    //remember that we sent this request.\n    this.outstandingRequests.add(serial);\n\n    const doNewRequest = () => {\n      this.outstandingRequests.delete(serial);\n      this.newRequest_();\n    };\n\n    // If this request doesn't return on its own accord (by the server sending us some data), we'll\n    // create a new one after the KEEPALIVE interval to make sure we always keep a fresh request open.\n    const keepaliveTimeout = setTimeout(\n      doNewRequest,\n      Math.floor(KEEPALIVE_REQUEST_INTERVAL)\n    );\n\n    const readyStateCB = () => {\n      // Request completed.  Cancel the keepalive.\n      clearTimeout(keepaliveTimeout);\n\n      // Trigger a new request so we can continue receiving data.\n      doNewRequest();\n    };\n\n    this.addTag(url, readyStateCB);\n  }\n\n  /**\n   * Add an arbitrary script tag to the iframe.\n   * @param url - The URL for the script tag source.\n   * @param loadCB - A callback to be triggered once the script has loaded.\n   */\n  addTag(url: string, loadCB: () => void) {\n    if (isNodeSdk()) {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      (this as any).doNodeLongPoll(url, loadCB);\n    } else {\n      setTimeout(() => {\n        try {\n          // if we're already closed, don't add this poll\n          if (!this.sendNewPolls) {\n            return;\n          }\n          const newScript = this.myIFrame.doc.createElement('script');\n          newScript.type = 'text/javascript';\n          newScript.async = true;\n          newScript.src = url;\n          // eslint-disable-next-line @typescript-eslint/no-explicit-any\n          newScript.onload = (newScript as any).onreadystatechange =\n            function () {\n              // eslint-disable-next-line @typescript-eslint/no-explicit-any\n              const rstate = (newScript as any).readyState;\n              if (!rstate || rstate === 'loaded' || rstate === 'complete') {\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                newScript.onload = (newScript as any).onreadystatechange = null;\n                if (newScript.parentNode) {\n                  newScript.parentNode.removeChild(newScript);\n                }\n                loadCB();\n              }\n            };\n          newScript.onerror = () => {\n            log('Long-poll script failed to load: ' + url);\n            this.sendNewPolls = false;\n            this.close();\n          };\n          this.myIFrame.doc.body.appendChild(newScript);\n        } catch (e) {\n          // TODO: we should make this error visible somehow\n        }\n      }, Math.floor(1));\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, isNodeSdk, jsonEval, stringify } from '@firebase/util';\n\nimport { RepoInfo, repoInfoConnectionURL } from '../core/RepoInfo';\nimport { StatsCollection } from '../core/stats/StatsCollection';\nimport { statsManagerGetCollection } from '../core/stats/StatsManager';\nimport { PersistentStorage } from '../core/storage/storage';\nimport { logWrapper, splitStringBySize } from '../core/util/util';\nimport { SDK_VERSION } from '../core/version';\n\nimport {\n  APPLICATION_ID_PARAM,\n  APP_CHECK_TOKEN_PARAM,\n  FORGE_DOMAIN_RE,\n  FORGE_REF,\n  LAST_SESSION_PARAM,\n  PROTOCOL_VERSION,\n  REFERER_PARAM,\n  TRANSPORT_SESSION_PARAM,\n  VERSION_PARAM,\n  WEBSOCKET\n} from './Constants';\nimport { Transport } from './Transport';\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\ndeclare const MozWebSocket: any;\n\nconst WEBSOCKET_MAX_FRAME_SIZE = 16384;\nconst WEBSOCKET_KEEPALIVE_INTERVAL = 45000;\n\nlet WebSocketImpl = null;\nif (typeof MozWebSocket !== 'undefined') {\n  WebSocketImpl = MozWebSocket;\n} else if (typeof WebSocket !== 'undefined') {\n  WebSocketImpl = WebSocket;\n}\n\nexport function setWebSocketImpl(impl) {\n  WebSocketImpl = impl;\n}\n\n/**\n * Create a new websocket connection with the given callbacks.\n */\nexport class WebSocketConnection implements Transport {\n  keepaliveTimer: number | null = null;\n  frames: string[] | null = null;\n  totalFrames = 0;\n  bytesSent = 0;\n  bytesReceived = 0;\n  connURL: string;\n  onDisconnect: (a?: boolean) => void;\n  onMessage: (msg: {}) => void;\n  mySock: WebSocket | null;\n  private log_: (...a: unknown[]) => void;\n  private stats_: StatsCollection;\n  private everConnected_: boolean;\n  private isClosed_: boolean;\n  private nodeAdmin: boolean;\n\n  /**\n   * @param connId identifier for this transport\n   * @param repoInfo The info for the websocket endpoint.\n   * @param applicationId The Firebase App ID for this project.\n   * @param appCheckToken The App Check Token for this client.\n   * @param authToken The Auth Token for this client.\n   * @param transportSessionId Optional transportSessionId if this is connecting\n   * to an existing transport session\n   * @param lastSessionId Optional lastSessionId if there was a previous\n   * connection\n   */\n  constructor(\n    public connId: string,\n    repoInfo: RepoInfo,\n    private applicationId?: string,\n    private appCheckToken?: string,\n    private authToken?: string,\n    transportSessionId?: string,\n    lastSessionId?: string\n  ) {\n    this.log_ = logWrapper(this.connId);\n    this.stats_ = statsManagerGetCollection(repoInfo);\n    this.connURL = WebSocketConnection.connectionURL_(\n      repoInfo,\n      transportSessionId,\n      lastSessionId,\n      appCheckToken,\n      applicationId\n    );\n    this.nodeAdmin = repoInfo.nodeAdmin;\n  }\n\n  /**\n   * @param repoInfo - The info for the websocket endpoint.\n   * @param transportSessionId - Optional transportSessionId if this is connecting to an existing transport\n   *                                         session\n   * @param lastSessionId - Optional lastSessionId if there was a previous connection\n   * @returns connection url\n   */\n  private static connectionURL_(\n    repoInfo: RepoInfo,\n    transportSessionId?: string,\n    lastSessionId?: string,\n    appCheckToken?: string,\n    applicationId?: string\n  ): string {\n    const urlParams: { [k: string]: string } = {};\n    urlParams[VERSION_PARAM] = PROTOCOL_VERSION;\n\n    if (\n      !isNodeSdk() &&\n      typeof location !== 'undefined' &&\n      location.hostname &&\n      FORGE_DOMAIN_RE.test(location.hostname)\n    ) {\n      urlParams[REFERER_PARAM] = FORGE_REF;\n    }\n    if (transportSessionId) {\n      urlParams[TRANSPORT_SESSION_PARAM] = transportSessionId;\n    }\n    if (lastSessionId) {\n      urlParams[LAST_SESSION_PARAM] = lastSessionId;\n    }\n    if (appCheckToken) {\n      urlParams[APP_CHECK_TOKEN_PARAM] = appCheckToken;\n    }\n    if (applicationId) {\n      urlParams[APPLICATION_ID_PARAM] = applicationId;\n    }\n\n    return repoInfoConnectionURL(repoInfo, WEBSOCKET, urlParams);\n  }\n\n  /**\n   * @param onMessage - Callback when messages arrive\n   * @param onDisconnect - Callback with connection lost.\n   */\n  open(onMessage: (msg: {}) => void, onDisconnect: (a?: boolean) => void) {\n    this.onDisconnect = onDisconnect;\n    this.onMessage = onMessage;\n\n    this.log_('Websocket connecting to ' + this.connURL);\n\n    this.everConnected_ = false;\n    // Assume failure until proven otherwise.\n    PersistentStorage.set('previous_websocket_failure', true);\n\n    try {\n      let options: { [k: string]: object };\n      if (isNodeSdk()) {\n        const device = this.nodeAdmin ? 'AdminNode' : 'Node';\n        // UA Format: Firebase/<wire_protocol>/<sdk_version>/<platform>/<device>\n        options = {\n          headers: {\n            'User-Agent': `Firebase/${PROTOCOL_VERSION}/${SDK_VERSION}/${process.platform}/${device}`,\n            'X-Firebase-GMPID': this.applicationId || ''\n          }\n        };\n\n        // If using Node with admin creds, AppCheck-related checks are unnecessary.\n        // Note that we send the credentials here even if they aren't admin credentials, which is\n        // not a problem.\n        // Note that this header is just used to bypass appcheck, and the token should still be sent\n        // through the websocket connection once it is established.\n        if (this.authToken) {\n          options.headers['Authorization'] = `Bearer ${this.authToken}`;\n        }\n        if (this.appCheckToken) {\n          options.headers['X-Firebase-AppCheck'] = this.appCheckToken;\n        }\n\n        // Plumb appropriate http_proxy environment variable into faye-websocket if it exists.\n        const env = process['env'];\n        const proxy =\n          this.connURL.indexOf('wss://') === 0\n            ? env['HTTPS_PROXY'] || env['https_proxy']\n            : env['HTTP_PROXY'] || env['http_proxy'];\n\n        if (proxy) {\n          options['proxy'] = { origin: proxy };\n        }\n      }\n      this.mySock = new WebSocketImpl(this.connURL, [], options);\n    } catch (e) {\n      this.log_('Error instantiating WebSocket.');\n      const error = e.message || e.data;\n      if (error) {\n        this.log_(error);\n      }\n      this.onClosed_();\n      return;\n    }\n\n    this.mySock.onopen = () => {\n      this.log_('Websocket connected.');\n      this.everConnected_ = true;\n    };\n\n    this.mySock.onclose = () => {\n      this.log_('Websocket connection was disconnected.');\n      this.mySock = null;\n      this.onClosed_();\n    };\n\n    this.mySock.onmessage = m => {\n      this.handleIncomingFrame(m as {});\n    };\n\n    this.mySock.onerror = e => {\n      this.log_('WebSocket error.  Closing connection.');\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      const error = (e as any).message || (e as any).data;\n      if (error) {\n        this.log_(error);\n      }\n      this.onClosed_();\n    };\n  }\n\n  /**\n   * No-op for websockets, we don't need to do anything once the connection is confirmed as open\n   */\n  start() {}\n\n  static forceDisallow_: boolean;\n\n  static forceDisallow() {\n    WebSocketConnection.forceDisallow_ = true;\n  }\n\n  static isAvailable(): boolean {\n    let isOldAndroid = false;\n    if (typeof navigator !== 'undefined' && navigator.userAgent) {\n      const oldAndroidRegex = /Android ([0-9]{0,}\\.[0-9]{0,})/;\n      const oldAndroidMatch = navigator.userAgent.match(oldAndroidRegex);\n      if (oldAndroidMatch && oldAndroidMatch.length > 1) {\n        if (parseFloat(oldAndroidMatch[1]) < 4.4) {\n          isOldAndroid = true;\n        }\n      }\n    }\n\n    return (\n      !isOldAndroid &&\n      WebSocketImpl !== null &&\n      !WebSocketConnection.forceDisallow_\n    );\n  }\n\n  /**\n   * Number of response before we consider the connection \"healthy.\"\n   */\n  static responsesRequiredToBeHealthy = 2;\n\n  /**\n   * Time to wait for the connection te become healthy before giving up.\n   */\n  static healthyTimeout = 30000;\n\n  /**\n   * Returns true if we previously failed to connect with this transport.\n   */\n  static previouslyFailed(): boolean {\n    // If our persistent storage is actually only in-memory storage,\n    // we default to assuming that it previously failed to be safe.\n    return (\n      PersistentStorage.isInMemoryStorage ||\n      PersistentStorage.get('previous_websocket_failure') === true\n    );\n  }\n\n  markConnectionHealthy() {\n    PersistentStorage.remove('previous_websocket_failure');\n  }\n\n  private appendFrame_(data: string) {\n    this.frames.push(data);\n    if (this.frames.length === this.totalFrames) {\n      const fullMess = this.frames.join('');\n      this.frames = null;\n      const jsonMess = jsonEval(fullMess) as object;\n\n      //handle the message\n      this.onMessage(jsonMess);\n    }\n  }\n\n  /**\n   * @param frameCount - The number of frames we are expecting from the server\n   */\n  private handleNewFrameCount_(frameCount: number) {\n    this.totalFrames = frameCount;\n    this.frames = [];\n  }\n\n  /**\n   * Attempts to parse a frame count out of some text. If it can't, assumes a value of 1\n   * @returns Any remaining data to be process, or null if there is none\n   */\n  private extractFrameCount_(data: string): string | null {\n    assert(this.frames === null, 'We already have a frame buffer');\n    // TODO: The server is only supposed to send up to 9999 frames (i.e. length <= 4), but that isn't being enforced\n    // currently.  So allowing larger frame counts (length <= 6).  See https://app.asana.com/0/search/8688598998380/8237608042508\n    if (data.length <= 6) {\n      const frameCount = Number(data);\n      if (!isNaN(frameCount)) {\n        this.handleNewFrameCount_(frameCount);\n        return null;\n      }\n    }\n    this.handleNewFrameCount_(1);\n    return data;\n  }\n\n  /**\n   * Process a websocket frame that has arrived from the server.\n   * @param mess - The frame data\n   */\n  handleIncomingFrame(mess: { [k: string]: unknown }) {\n    if (this.mySock === null) {\n      return; // Chrome apparently delivers incoming packets even after we .close() the connection sometimes.\n    }\n    const data = mess['data'] as string;\n    this.bytesReceived += data.length;\n    this.stats_.incrementCounter('bytes_received', data.length);\n\n    this.resetKeepAlive();\n\n    if (this.frames !== null) {\n      // we're buffering\n      this.appendFrame_(data);\n    } else {\n      // try to parse out a frame count, otherwise, assume 1 and process it\n      const remainingData = this.extractFrameCount_(data);\n      if (remainingData !== null) {\n        this.appendFrame_(remainingData);\n      }\n    }\n  }\n\n  /**\n   * Send a message to the server\n   * @param data - The JSON object to transmit\n   */\n  send(data: {}) {\n    this.resetKeepAlive();\n\n    const dataStr = stringify(data);\n    this.bytesSent += dataStr.length;\n    this.stats_.incrementCounter('bytes_sent', dataStr.length);\n\n    //We can only fit a certain amount in each websocket frame, so we need to split this request\n    //up into multiple pieces if it doesn't fit in one request.\n\n    const dataSegs = splitStringBySize(dataStr, WEBSOCKET_MAX_FRAME_SIZE);\n\n    //Send the length header\n    if (dataSegs.length > 1) {\n      this.sendString_(String(dataSegs.length));\n    }\n\n    //Send the actual data in segments.\n    for (let i = 0; i < dataSegs.length; i++) {\n      this.sendString_(dataSegs[i]);\n    }\n  }\n\n  private shutdown_() {\n    this.isClosed_ = true;\n    if (this.keepaliveTimer) {\n      clearInterval(this.keepaliveTimer);\n      this.keepaliveTimer = null;\n    }\n\n    if (this.mySock) {\n      this.mySock.close();\n      this.mySock = null;\n    }\n  }\n\n  private onClosed_() {\n    if (!this.isClosed_) {\n      this.log_('WebSocket is closing itself');\n      this.shutdown_();\n\n      // since this is an internal close, trigger the close listener\n      if (this.onDisconnect) {\n        this.onDisconnect(this.everConnected_);\n        this.onDisconnect = null;\n      }\n    }\n  }\n\n  /**\n   * External-facing close handler.\n   * Close the websocket and kill the connection.\n   */\n  close() {\n    if (!this.isClosed_) {\n      this.log_('WebSocket is being closed');\n      this.shutdown_();\n    }\n  }\n\n  /**\n   * Kill the current keepalive timer and start a new one, to ensure that it always fires N seconds after\n   * the last activity.\n   */\n  resetKeepAlive() {\n    clearInterval(this.keepaliveTimer);\n    this.keepaliveTimer = setInterval(() => {\n      //If there has been no websocket activity for a while, send a no-op\n      if (this.mySock) {\n        this.sendString_('0');\n      }\n      this.resetKeepAlive();\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    }, Math.floor(WEBSOCKET_KEEPALIVE_INTERVAL)) as any;\n  }\n\n  /**\n   * Send a string over the websocket.\n   *\n   * @param str - String to send.\n   */\n  private sendString_(str: string) {\n    // Firefox seems to sometimes throw exceptions (NS_ERROR_UNEXPECTED) from websocket .send()\n    // calls for some unknown reason.  We treat these as an error and disconnect.\n    // See https://app.asana.com/0/58926111402292/68021340250410\n    try {\n      this.mySock.send(str);\n    } catch (e) {\n      this.log_(\n        'Exception thrown from WebSocket.send():',\n        e.message || e.data,\n        'Closing connection.'\n      );\n      setTimeout(this.onClosed_.bind(this), 0);\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { RepoInfo } from '../core/RepoInfo';\nimport { warn } from '../core/util/util';\n\nimport { BrowserPollConnection } from './BrowserPollConnection';\nimport { TransportConstructor } from './Transport';\nimport { WebSocketConnection } from './WebSocketConnection';\n\n/**\n * Currently simplistic, this class manages what transport a Connection should use at various stages of its\n * lifecycle.\n *\n * It starts with longpolling in a browser, and httppolling on node. It then upgrades to websockets if\n * they are available.\n */\nexport class TransportManager {\n  private transports_: TransportConstructor[];\n\n  // Keeps track of whether the TransportManager has already chosen a transport to use\n  static globalTransportInitialized_ = false;\n\n  static get ALL_TRANSPORTS() {\n    return [BrowserPollConnection, WebSocketConnection];\n  }\n\n  /**\n   * Returns whether transport has been selected to ensure WebSocketConnection or BrowserPollConnection are not called after\n   * TransportManager has already set up transports_\n   */\n  static get IS_TRANSPORT_INITIALIZED() {\n    return this.globalTransportInitialized_;\n  }\n\n  /**\n   * @param repoInfo - Metadata around the namespace we're connecting to\n   */\n  constructor(repoInfo: RepoInfo) {\n    this.initTransports_(repoInfo);\n  }\n\n  private initTransports_(repoInfo: RepoInfo) {\n    const isWebSocketsAvailable: boolean =\n      WebSocketConnection && WebSocketConnection['isAvailable']();\n    let isSkipPollConnection =\n      isWebSocketsAvailable && !WebSocketConnection.previouslyFailed();\n\n    if (repoInfo.webSocketOnly) {\n      if (!isWebSocketsAvailable) {\n        warn(\n          \"wss:// URL used, but browser isn't known to support websockets.  Trying anyway.\"\n        );\n      }\n\n      isSkipPollConnection = true;\n    }\n\n    if (isSkipPollConnection) {\n      this.transports_ = [WebSocketConnection];\n    } else {\n      const transports = (this.transports_ = [] as TransportConstructor[]);\n      for (const transport of TransportManager.ALL_TRANSPORTS) {\n        if (transport && transport['isAvailable']()) {\n          transports.push(transport);\n        }\n      }\n      TransportManager.globalTransportInitialized_ = true;\n    }\n  }\n\n  /**\n   * @returns The constructor for the initial transport to use\n   */\n  initialTransport(): TransportConstructor {\n    if (this.transports_.length > 0) {\n      return this.transports_[0];\n    } else {\n      throw new Error('No transports available');\n    }\n  }\n\n  /**\n   * @returns The constructor for the next transport, or null\n   */\n  upgradeTransport(): TransportConstructor | null {\n    if (this.transports_.length > 1) {\n      return this.transports_[1];\n    } else {\n      return null;\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { RepoInfo } from '../core/RepoInfo';\nimport { PersistentStorage } from '../core/storage/storage';\nimport { Indexable } from '../core/util/misc';\nimport {\n  error,\n  logWrapper,\n  requireKey,\n  setTimeoutNonBlocking,\n  warn\n} from '../core/util/util';\n\nimport { PROTOCOL_VERSION } from './Constants';\nimport { Transport, TransportConstructor } from './Transport';\nimport { TransportManager } from './TransportManager';\n\n// Abort upgrade attempt if it takes longer than 60s.\nconst UPGRADE_TIMEOUT = 60000;\n\n// For some transports (WebSockets), we need to \"validate\" the transport by exchanging a few requests and responses.\n// If we haven't sent enough requests within 5s, we'll start sending noop ping requests.\nconst DELAY_BEFORE_SENDING_EXTRA_REQUESTS = 5000;\n\n// If the initial data sent triggers a lot of bandwidth (i.e. it's a large put or a listen for a large amount of data)\n// then we may not be able to exchange our ping/pong requests within the healthy timeout.  So if we reach the timeout\n// but we've sent/received enough bytes, we don't cancel the connection.\nconst BYTES_SENT_HEALTHY_OVERRIDE = 10 * 1024;\nconst BYTES_RECEIVED_HEALTHY_OVERRIDE = 100 * 1024;\n\nconst enum RealtimeState {\n  CONNECTING,\n  CONNECTED,\n  DISCONNECTED\n}\n\nconst MESSAGE_TYPE = 't';\nconst MESSAGE_DATA = 'd';\nconst CONTROL_SHUTDOWN = 's';\nconst CONTROL_RESET = 'r';\nconst CONTROL_ERROR = 'e';\nconst CONTROL_PONG = 'o';\nconst SWITCH_ACK = 'a';\nconst END_TRANSMISSION = 'n';\nconst PING = 'p';\n\nconst SERVER_HELLO = 'h';\n\n/**\n * Creates a new real-time connection to the server using whichever method works\n * best in the current browser.\n */\nexport class Connection {\n  connectionCount = 0;\n  pendingDataMessages: unknown[] = [];\n  sessionId: string;\n\n  private conn_: Transport;\n  private healthyTimeout_: number;\n  private isHealthy_: boolean;\n  private log_: (...args: unknown[]) => void;\n  private primaryResponsesRequired_: number;\n  private rx_: Transport;\n  private secondaryConn_: Transport;\n  private secondaryResponsesRequired_: number;\n  private state_ = RealtimeState.CONNECTING;\n  private transportManager_: TransportManager;\n  private tx_: Transport;\n\n  /**\n   * @param id - an id for this connection\n   * @param repoInfo_ - the info for the endpoint to connect to\n   * @param applicationId_ - the Firebase App ID for this project\n   * @param appCheckToken_ - The App Check Token for this device.\n   * @param authToken_ - The auth token for this session.\n   * @param onMessage_ - the callback to be triggered when a server-push message arrives\n   * @param onReady_ - the callback to be triggered when this connection is ready to send messages.\n   * @param onDisconnect_ - the callback to be triggered when a connection was lost\n   * @param onKill_ - the callback to be triggered when this connection has permanently shut down.\n   * @param lastSessionId - last session id in persistent connection. is used to clean up old session in real-time server\n   */\n  constructor(\n    public id: string,\n    private repoInfo_: RepoInfo,\n    private applicationId_: string | undefined,\n    private appCheckToken_: string | undefined,\n    private authToken_: string | undefined,\n    private onMessage_: (a: {}) => void,\n    private onReady_: (a: number, b: string) => void,\n    private onDisconnect_: () => void,\n    private onKill_: (a: string) => void,\n    public lastSessionId?: string\n  ) {\n    this.log_ = logWrapper('c:' + this.id + ':');\n    this.transportManager_ = new TransportManager(repoInfo_);\n    this.log_('Connection created');\n    this.start_();\n  }\n\n  /**\n   * Starts a connection attempt\n   */\n  private start_(): void {\n    const conn = this.transportManager_.initialTransport();\n    this.conn_ = new conn(\n      this.nextTransportId_(),\n      this.repoInfo_,\n      this.applicationId_,\n      this.appCheckToken_,\n      this.authToken_,\n      null,\n      this.lastSessionId\n    );\n\n    // For certain transports (WebSockets), we need to send and receive several messages back and forth before we\n    // can consider the transport healthy.\n    this.primaryResponsesRequired_ = conn['responsesRequiredToBeHealthy'] || 0;\n\n    const onMessageReceived = this.connReceiver_(this.conn_);\n    const onConnectionLost = this.disconnReceiver_(this.conn_);\n    this.tx_ = this.conn_;\n    this.rx_ = this.conn_;\n    this.secondaryConn_ = null;\n    this.isHealthy_ = false;\n\n    /*\n     * Firefox doesn't like when code from one iframe tries to create another iframe by way of the parent frame.\n     * This can occur in the case of a redirect, i.e. we guessed wrong on what server to connect to and received a reset.\n     * Somehow, setTimeout seems to make this ok. That doesn't make sense from a security perspective, since you should\n     * still have the context of your originating frame.\n     */\n    setTimeout(() => {\n      // this.conn_ gets set to null in some of the tests. Check to make sure it still exists before using it\n      this.conn_ && this.conn_.open(onMessageReceived, onConnectionLost);\n    }, Math.floor(0));\n\n    const healthyTimeoutMS = conn['healthyTimeout'] || 0;\n    if (healthyTimeoutMS > 0) {\n      this.healthyTimeout_ = setTimeoutNonBlocking(() => {\n        this.healthyTimeout_ = null;\n        if (!this.isHealthy_) {\n          if (\n            this.conn_ &&\n            this.conn_.bytesReceived > BYTES_RECEIVED_HEALTHY_OVERRIDE\n          ) {\n            this.log_(\n              'Connection exceeded healthy timeout but has received ' +\n                this.conn_.bytesReceived +\n                ' bytes.  Marking connection healthy.'\n            );\n            this.isHealthy_ = true;\n            this.conn_.markConnectionHealthy();\n          } else if (\n            this.conn_ &&\n            this.conn_.bytesSent > BYTES_SENT_HEALTHY_OVERRIDE\n          ) {\n            this.log_(\n              'Connection exceeded healthy timeout but has sent ' +\n                this.conn_.bytesSent +\n                ' bytes.  Leaving connection alive.'\n            );\n            // NOTE: We don't want to mark it healthy, since we have no guarantee that the bytes have made it to\n            // the server.\n          } else {\n            this.log_('Closing unhealthy connection after timeout.');\n            this.close();\n          }\n        }\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      }, Math.floor(healthyTimeoutMS)) as any;\n    }\n  }\n\n  private nextTransportId_(): string {\n    return 'c:' + this.id + ':' + this.connectionCount++;\n  }\n\n  private disconnReceiver_(conn) {\n    return everConnected => {\n      if (conn === this.conn_) {\n        this.onConnectionLost_(everConnected);\n      } else if (conn === this.secondaryConn_) {\n        this.log_('Secondary connection lost.');\n        this.onSecondaryConnectionLost_();\n      } else {\n        this.log_('closing an old connection');\n      }\n    };\n  }\n\n  private connReceiver_(conn: Transport) {\n    return (message: Indexable) => {\n      if (this.state_ !== RealtimeState.DISCONNECTED) {\n        if (conn === this.rx_) {\n          this.onPrimaryMessageReceived_(message);\n        } else if (conn === this.secondaryConn_) {\n          this.onSecondaryMessageReceived_(message);\n        } else {\n          this.log_('message on old connection');\n        }\n      }\n    };\n  }\n\n  /**\n   * @param dataMsg - An arbitrary data message to be sent to the server\n   */\n  sendRequest(dataMsg: object) {\n    // wrap in a data message envelope and send it on\n    const msg = { t: 'd', d: dataMsg };\n    this.sendData_(msg);\n  }\n\n  tryCleanupConnection() {\n    if (this.tx_ === this.secondaryConn_ && this.rx_ === this.secondaryConn_) {\n      this.log_(\n        'cleaning up and promoting a connection: ' + this.secondaryConn_.connId\n      );\n      this.conn_ = this.secondaryConn_;\n      this.secondaryConn_ = null;\n      // the server will shutdown the old connection\n    }\n  }\n\n  private onSecondaryControl_(controlData: { [k: string]: unknown }) {\n    if (MESSAGE_TYPE in controlData) {\n      const cmd = controlData[MESSAGE_TYPE] as string;\n      if (cmd === SWITCH_ACK) {\n        this.upgradeIfSecondaryHealthy_();\n      } else if (cmd === CONTROL_RESET) {\n        // Most likely the session wasn't valid. Abandon the switch attempt\n        this.log_('Got a reset on secondary, closing it');\n        this.secondaryConn_.close();\n        // If we were already using this connection for something, than we need to fully close\n        if (\n          this.tx_ === this.secondaryConn_ ||\n          this.rx_ === this.secondaryConn_\n        ) {\n          this.close();\n        }\n      } else if (cmd === CONTROL_PONG) {\n        this.log_('got pong on secondary.');\n        this.secondaryResponsesRequired_--;\n        this.upgradeIfSecondaryHealthy_();\n      }\n    }\n  }\n\n  private onSecondaryMessageReceived_(parsedData: Indexable) {\n    const layer: string = requireKey('t', parsedData) as string;\n    const data: unknown = requireKey('d', parsedData);\n    if (layer === 'c') {\n      this.onSecondaryControl_(data as Indexable);\n    } else if (layer === 'd') {\n      // got a data message, but we're still second connection. Need to buffer it up\n      this.pendingDataMessages.push(data);\n    } else {\n      throw new Error('Unknown protocol layer: ' + layer);\n    }\n  }\n\n  private upgradeIfSecondaryHealthy_() {\n    if (this.secondaryResponsesRequired_ <= 0) {\n      this.log_('Secondary connection is healthy.');\n      this.isHealthy_ = true;\n      this.secondaryConn_.markConnectionHealthy();\n      this.proceedWithUpgrade_();\n    } else {\n      // Send a ping to make sure the connection is healthy.\n      this.log_('sending ping on secondary.');\n      this.secondaryConn_.send({ t: 'c', d: { t: PING, d: {} } });\n    }\n  }\n\n  private proceedWithUpgrade_() {\n    // tell this connection to consider itself open\n    this.secondaryConn_.start();\n    // send ack\n    this.log_('sending client ack on secondary');\n    this.secondaryConn_.send({ t: 'c', d: { t: SWITCH_ACK, d: {} } });\n\n    // send end packet on primary transport, switch to sending on this one\n    // can receive on this one, buffer responses until end received on primary transport\n    this.log_('Ending transmission on primary');\n    this.conn_.send({ t: 'c', d: { t: END_TRANSMISSION, d: {} } });\n    this.tx_ = this.secondaryConn_;\n\n    this.tryCleanupConnection();\n  }\n\n  private onPrimaryMessageReceived_(parsedData: { [k: string]: unknown }) {\n    // Must refer to parsedData properties in quotes, so closure doesn't touch them.\n    const layer: string = requireKey('t', parsedData) as string;\n    const data: unknown = requireKey('d', parsedData);\n    if (layer === 'c') {\n      this.onControl_(data as { [k: string]: unknown });\n    } else if (layer === 'd') {\n      this.onDataMessage_(data);\n    }\n  }\n\n  private onDataMessage_(message: unknown) {\n    this.onPrimaryResponse_();\n\n    // We don't do anything with data messages, just kick them up a level\n    this.onMessage_(message);\n  }\n\n  private onPrimaryResponse_() {\n    if (!this.isHealthy_) {\n      this.primaryResponsesRequired_--;\n      if (this.primaryResponsesRequired_ <= 0) {\n        this.log_('Primary connection is healthy.');\n        this.isHealthy_ = true;\n        this.conn_.markConnectionHealthy();\n      }\n    }\n  }\n\n  private onControl_(controlData: { [k: string]: unknown }) {\n    const cmd: string = requireKey(MESSAGE_TYPE, controlData) as string;\n    if (MESSAGE_DATA in controlData) {\n      const payload = controlData[MESSAGE_DATA];\n      if (cmd === SERVER_HELLO) {\n        this.onHandshake_(\n          payload as {\n            ts: number;\n            v: string;\n            h: string;\n            s: string;\n          }\n        );\n      } else if (cmd === END_TRANSMISSION) {\n        this.log_('recvd end transmission on primary');\n        this.rx_ = this.secondaryConn_;\n        for (let i = 0; i < this.pendingDataMessages.length; ++i) {\n          this.onDataMessage_(this.pendingDataMessages[i]);\n        }\n        this.pendingDataMessages = [];\n        this.tryCleanupConnection();\n      } else if (cmd === CONTROL_SHUTDOWN) {\n        // This was previously the 'onKill' callback passed to the lower-level connection\n        // payload in this case is the reason for the shutdown. Generally a human-readable error\n        this.onConnectionShutdown_(payload as string);\n      } else if (cmd === CONTROL_RESET) {\n        // payload in this case is the host we should contact\n        this.onReset_(payload as string);\n      } else if (cmd === CONTROL_ERROR) {\n        error('Server Error: ' + payload);\n      } else if (cmd === CONTROL_PONG) {\n        this.log_('got pong on primary.');\n        this.onPrimaryResponse_();\n        this.sendPingOnPrimaryIfNecessary_();\n      } else {\n        error('Unknown control packet command: ' + cmd);\n      }\n    }\n  }\n\n  /**\n   * @param handshake - The handshake data returned from the server\n   */\n  private onHandshake_(handshake: {\n    ts: number;\n    v: string;\n    h: string;\n    s: string;\n  }): void {\n    const timestamp = handshake.ts;\n    const version = handshake.v;\n    const host = handshake.h;\n    this.sessionId = handshake.s;\n    this.repoInfo_.host = host;\n    // if we've already closed the connection, then don't bother trying to progress further\n    if (this.state_ === RealtimeState.CONNECTING) {\n      this.conn_.start();\n      this.onConnectionEstablished_(this.conn_, timestamp);\n      if (PROTOCOL_VERSION !== version) {\n        warn('Protocol version mismatch detected');\n      }\n      // TODO: do we want to upgrade? when? maybe a delay?\n      this.tryStartUpgrade_();\n    }\n  }\n\n  private tryStartUpgrade_() {\n    const conn = this.transportManager_.upgradeTransport();\n    if (conn) {\n      this.startUpgrade_(conn);\n    }\n  }\n\n  private startUpgrade_(conn: TransportConstructor) {\n    this.secondaryConn_ = new conn(\n      this.nextTransportId_(),\n      this.repoInfo_,\n      this.applicationId_,\n      this.appCheckToken_,\n      this.authToken_,\n      this.sessionId\n    );\n    // For certain transports (WebSockets), we need to send and receive several messages back and forth before we\n    // can consider the transport healthy.\n    this.secondaryResponsesRequired_ =\n      conn['responsesRequiredToBeHealthy'] || 0;\n\n    const onMessage = this.connReceiver_(this.secondaryConn_);\n    const onDisconnect = this.disconnReceiver_(this.secondaryConn_);\n    this.secondaryConn_.open(onMessage, onDisconnect);\n\n    // If we haven't successfully upgraded after UPGRADE_TIMEOUT, give up and kill the secondary.\n    setTimeoutNonBlocking(() => {\n      if (this.secondaryConn_) {\n        this.log_('Timed out trying to upgrade.');\n        this.secondaryConn_.close();\n      }\n    }, Math.floor(UPGRADE_TIMEOUT));\n  }\n\n  private onReset_(host: string) {\n    this.log_('Reset packet received.  New host: ' + host);\n    this.repoInfo_.host = host;\n    // TODO: if we're already \"connected\", we need to trigger a disconnect at the next layer up.\n    // We don't currently support resets after the connection has already been established\n    if (this.state_ === RealtimeState.CONNECTED) {\n      this.close();\n    } else {\n      // Close whatever connections we have open and start again.\n      this.closeConnections_();\n      this.start_();\n    }\n  }\n\n  private onConnectionEstablished_(conn: Transport, timestamp: number) {\n    this.log_('Realtime connection established.');\n    this.conn_ = conn;\n    this.state_ = RealtimeState.CONNECTED;\n\n    if (this.onReady_) {\n      this.onReady_(timestamp, this.sessionId);\n      this.onReady_ = null;\n    }\n\n    // If after 5 seconds we haven't sent enough requests to the server to get the connection healthy,\n    // send some pings.\n    if (this.primaryResponsesRequired_ === 0) {\n      this.log_('Primary connection is healthy.');\n      this.isHealthy_ = true;\n    } else {\n      setTimeoutNonBlocking(() => {\n        this.sendPingOnPrimaryIfNecessary_();\n      }, Math.floor(DELAY_BEFORE_SENDING_EXTRA_REQUESTS));\n    }\n  }\n\n  private sendPingOnPrimaryIfNecessary_() {\n    // If the connection isn't considered healthy yet, we'll send a noop ping packet request.\n    if (!this.isHealthy_ && this.state_ === RealtimeState.CONNECTED) {\n      this.log_('sending ping on primary.');\n      this.sendData_({ t: 'c', d: { t: PING, d: {} } });\n    }\n  }\n\n  private onSecondaryConnectionLost_() {\n    const conn = this.secondaryConn_;\n    this.secondaryConn_ = null;\n    if (this.tx_ === conn || this.rx_ === conn) {\n      // we are relying on this connection already in some capacity. Therefore, a failure is real\n      this.close();\n    }\n  }\n\n  /**\n   * @param everConnected - Whether or not the connection ever reached a server. Used to determine if\n   * we should flush the host cache\n   */\n  private onConnectionLost_(everConnected: boolean) {\n    this.conn_ = null;\n\n    // NOTE: IF you're seeing a Firefox error for this line, I think it might be because it's getting\n    // called on window close and RealtimeState.CONNECTING is no longer defined.  Just a guess.\n    if (!everConnected && this.state_ === RealtimeState.CONNECTING) {\n      this.log_('Realtime connection failed.');\n      // Since we failed to connect at all, clear any cached entry for this namespace in case the machine went away\n      if (this.repoInfo_.isCacheableHost()) {\n        PersistentStorage.remove('host:' + this.repoInfo_.host);\n        // reset the internal host to what we would show the user, i.e. <ns>.firebaseio.com\n        this.repoInfo_.internalHost = this.repoInfo_.host;\n      }\n    } else if (this.state_ === RealtimeState.CONNECTED) {\n      this.log_('Realtime connection lost.');\n    }\n\n    this.close();\n  }\n\n  private onConnectionShutdown_(reason: string) {\n    this.log_('Connection shutdown command received. Shutting down...');\n\n    if (this.onKill_) {\n      this.onKill_(reason);\n      this.onKill_ = null;\n    }\n\n    // We intentionally don't want to fire onDisconnect (kill is a different case),\n    // so clear the callback.\n    this.onDisconnect_ = null;\n\n    this.close();\n  }\n\n  private sendData_(data: object) {\n    if (this.state_ !== RealtimeState.CONNECTED) {\n      throw 'Connection is not connected';\n    } else {\n      this.tx_.send(data);\n    }\n  }\n\n  /**\n   * Cleans up this connection, calling the appropriate callbacks\n   */\n  close() {\n    if (this.state_ !== RealtimeState.DISCONNECTED) {\n      this.log_('Closing realtime connection.');\n      this.state_ = RealtimeState.DISCONNECTED;\n\n      this.closeConnections_();\n\n      if (this.onDisconnect_) {\n        this.onDisconnect_();\n        this.onDisconnect_ = null;\n      }\n    }\n  }\n\n  private closeConnections_() {\n    this.log_('Shutting down all connections');\n    if (this.conn_) {\n      this.conn_.close();\n      this.conn_ = null;\n    }\n\n    if (this.secondaryConn_) {\n      this.secondaryConn_.close();\n      this.secondaryConn_ = null;\n    }\n\n    if (this.healthyTimeout_) {\n      clearTimeout(this.healthyTimeout_);\n      this.healthyTimeout_ = null;\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { QueryContext } from './view/EventRegistration';\n\n/**\n * Interface defining the set of actions that can be performed against the Firebase server\n * (basically corresponds to our wire protocol).\n *\n * @interface\n */\nexport abstract class ServerActions {\n  abstract listen(\n    query: QueryContext,\n    currentHashFn: () => string,\n    tag: number | null,\n    onComplete: (a: string, b: unknown) => void\n  ): void;\n\n  /**\n   * Remove a listen.\n   */\n  abstract unlisten(query: QueryContext, tag: number | null): void;\n\n  /**\n   * Get the server value satisfying this query.\n   */\n  abstract get(query: QueryContext): Promise<string>;\n\n  put(\n    pathString: string,\n    data: unknown,\n    onComplete?: (a: string, b: string) => void,\n    hash?: string\n  ) {}\n\n  merge(\n    pathString: string,\n    data: unknown,\n    onComplete: (a: string, b: string | null) => void,\n    hash?: string\n  ) {}\n\n  /**\n   * Refreshes the auth token for the current connection.\n   * @param token - The authentication token\n   */\n  refreshAuthToken(token: string) {}\n\n  /**\n   * Refreshes the app check token for the current connection.\n   * @param token The app check token\n   */\n  refreshAppCheckToken(token: string) {}\n\n  onDisconnectPut(\n    pathString: string,\n    data: unknown,\n    onComplete?: (a: string, b: string) => void\n  ) {}\n\n  onDisconnectMerge(\n    pathString: string,\n    data: unknown,\n    onComplete?: (a: string, b: string) => void\n  ) {}\n\n  onDisconnectCancel(\n    pathString: string,\n    onComplete?: (a: string, b: string) => void\n  ) {}\n\n  reportStats(stats: { [k: string]: unknown }) {}\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\n/**\n * Base class to be used if you want to emit events. Call the constructor with\n * the set of allowed event names.\n */\nexport abstract class EventEmitter {\n  private listeners_: {\n    [eventType: string]: Array<{\n      callback(...args: unknown[]): void;\n      context: unknown;\n    }>;\n  } = {};\n\n  constructor(private allowedEvents_: string[]) {\n    assert(\n      Array.isArray(allowedEvents_) && allowedEvents_.length > 0,\n      'Requires a non-empty array'\n    );\n  }\n\n  /**\n   * To be overridden by derived classes in order to fire an initial event when\n   * somebody subscribes for data.\n   *\n   * @returns {Array.<*>} Array of parameters to trigger initial event with.\n   */\n  abstract getInitialEvent(eventType: string): unknown[];\n\n  /**\n   * To be called by derived classes to trigger events.\n   */\n  protected trigger(eventType: string, ...varArgs: unknown[]) {\n    if (Array.isArray(this.listeners_[eventType])) {\n      // Clone the list, since callbacks could add/remove listeners.\n      const listeners = [...this.listeners_[eventType]];\n\n      for (let i = 0; i < listeners.length; i++) {\n        listeners[i].callback.apply(listeners[i].context, varArgs);\n      }\n    }\n  }\n\n  on(eventType: string, callback: (a: unknown) => void, context: unknown) {\n    this.validateEventType_(eventType);\n    this.listeners_[eventType] = this.listeners_[eventType] || [];\n    this.listeners_[eventType].push({ callback, context });\n\n    const eventData = this.getInitialEvent(eventType);\n    if (eventData) {\n      callback.apply(context, eventData);\n    }\n  }\n\n  off(eventType: string, callback: (a: unknown) => void, context: unknown) {\n    this.validateEventType_(eventType);\n    const listeners = this.listeners_[eventType] || [];\n    for (let i = 0; i < listeners.length; i++) {\n      if (\n        listeners[i].callback === callback &&\n        (!context || context === listeners[i].context)\n      ) {\n        listeners.splice(i, 1);\n        return;\n      }\n    }\n  }\n\n  private validateEventType_(eventType: string) {\n    assert(\n      this.allowedEvents_.find(et => {\n        return et === eventType;\n      }),\n      'Unknown event: ' + eventType\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, isMobileCordova } from '@firebase/util';\n\nimport { EventEmitter } from './EventEmitter';\n\n/**\n * Monitors online state (as reported by window.online/offline events).\n *\n * The expectation is that this could have many false positives (thinks we are online\n * when we're not), but no false negatives.  So we can safely use it to determine when\n * we definitely cannot reach the internet.\n */\nexport class OnlineMonitor extends EventEmitter {\n  private online_ = true;\n\n  static getInstance() {\n    return new OnlineMonitor();\n  }\n\n  constructor() {\n    super(['online']);\n\n    // We've had repeated complaints that Cordova apps can get stuck \"offline\", e.g.\n    // https://forum.ionicframework.com/t/firebase-connection-is-lost-and-never-come-back/43810\n    // It would seem that the 'online' event does not always fire consistently. So we disable it\n    // for Cordova.\n    if (\n      typeof window !== 'undefined' &&\n      typeof window.addEventListener !== 'undefined' &&\n      !isMobileCordova()\n    ) {\n      window.addEventListener(\n        'online',\n        () => {\n          if (!this.online_) {\n            this.online_ = true;\n            this.trigger('online', true);\n          }\n        },\n        false\n      );\n\n      window.addEventListener(\n        'offline',\n        () => {\n          if (this.online_) {\n            this.online_ = false;\n            this.trigger('online', false);\n          }\n        },\n        false\n      );\n    }\n  }\n\n  getInitialEvent(eventType: string): boolean[] {\n    assert(eventType === 'online', 'Unknown event type: ' + eventType);\n    return [this.online_];\n  }\n\n  currentlyOnline(): boolean {\n    return this.online_;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { stringLength } from '@firebase/util';\n\nimport { nameCompare } from './util';\n\n/** Maximum key depth. */\nconst MAX_PATH_DEPTH = 32;\n\n/** Maximum number of (UTF8) bytes in a Firebase path. */\nconst MAX_PATH_LENGTH_BYTES = 768;\n\n/**\n * An immutable object representing a parsed path.  It's immutable so that you\n * can pass them around to other functions without worrying about them changing\n * it.\n */\n\nexport class Path {\n  pieces_: string[];\n  pieceNum_: number;\n\n  /**\n   * @param pathOrString - Path string to parse, or another path, or the raw\n   * tokens array\n   */\n  constructor(pathOrString: string | string[], pieceNum?: number) {\n    if (pieceNum === void 0) {\n      this.pieces_ = (pathOrString as string).split('/');\n\n      // Remove empty pieces.\n      let copyTo = 0;\n      for (let i = 0; i < this.pieces_.length; i++) {\n        if (this.pieces_[i].length > 0) {\n          this.pieces_[copyTo] = this.pieces_[i];\n          copyTo++;\n        }\n      }\n      this.pieces_.length = copyTo;\n\n      this.pieceNum_ = 0;\n    } else {\n      this.pieces_ = pathOrString as string[];\n      this.pieceNum_ = pieceNum;\n    }\n  }\n\n  toString(): string {\n    let pathString = '';\n    for (let i = this.pieceNum_; i < this.pieces_.length; i++) {\n      if (this.pieces_[i] !== '') {\n        pathString += '/' + this.pieces_[i];\n      }\n    }\n\n    return pathString || '/';\n  }\n}\n\nexport function newEmptyPath(): Path {\n  return new Path('');\n}\n\nexport function pathGetFront(path: Path): string | null {\n  if (path.pieceNum_ >= path.pieces_.length) {\n    return null;\n  }\n\n  return path.pieces_[path.pieceNum_];\n}\n\n/**\n * @returns The number of segments in this path\n */\nexport function pathGetLength(path: Path): number {\n  return path.pieces_.length - path.pieceNum_;\n}\n\nexport function pathPopFront(path: Path): Path {\n  let pieceNum = path.pieceNum_;\n  if (pieceNum < path.pieces_.length) {\n    pieceNum++;\n  }\n  return new Path(path.pieces_, pieceNum);\n}\n\nexport function pathGetBack(path: Path): string | null {\n  if (path.pieceNum_ < path.pieces_.length) {\n    return path.pieces_[path.pieces_.length - 1];\n  }\n\n  return null;\n}\n\nexport function pathToUrlEncodedString(path: Path): string {\n  let pathString = '';\n  for (let i = path.pieceNum_; i < path.pieces_.length; i++) {\n    if (path.pieces_[i] !== '') {\n      pathString += '/' + encodeURIComponent(String(path.pieces_[i]));\n    }\n  }\n\n  return pathString || '/';\n}\n\n/**\n * Shallow copy of the parts of the path.\n *\n */\nexport function pathSlice(path: Path, begin: number = 0): string[] {\n  return path.pieces_.slice(path.pieceNum_ + begin);\n}\n\nexport function pathParent(path: Path): Path | null {\n  if (path.pieceNum_ >= path.pieces_.length) {\n    return null;\n  }\n\n  const pieces = [];\n  for (let i = path.pieceNum_; i < path.pieces_.length - 1; i++) {\n    pieces.push(path.pieces_[i]);\n  }\n\n  return new Path(pieces, 0);\n}\n\nexport function pathChild(path: Path, childPathObj: string | Path): Path {\n  const pieces = [];\n  for (let i = path.pieceNum_; i < path.pieces_.length; i++) {\n    pieces.push(path.pieces_[i]);\n  }\n\n  if (childPathObj instanceof Path) {\n    for (let i = childPathObj.pieceNum_; i < childPathObj.pieces_.length; i++) {\n      pieces.push(childPathObj.pieces_[i]);\n    }\n  } else {\n    const childPieces = childPathObj.split('/');\n    for (let i = 0; i < childPieces.length; i++) {\n      if (childPieces[i].length > 0) {\n        pieces.push(childPieces[i]);\n      }\n    }\n  }\n\n  return new Path(pieces, 0);\n}\n\n/**\n * @returns True if there are no segments in this path\n */\nexport function pathIsEmpty(path: Path): boolean {\n  return path.pieceNum_ >= path.pieces_.length;\n}\n\n/**\n * @returns The path from outerPath to innerPath\n */\nexport function newRelativePath(outerPath: Path, innerPath: Path): Path {\n  const outer = pathGetFront(outerPath),\n    inner = pathGetFront(innerPath);\n  if (outer === null) {\n    return innerPath;\n  } else if (outer === inner) {\n    return newRelativePath(pathPopFront(outerPath), pathPopFront(innerPath));\n  } else {\n    throw new Error(\n      'INTERNAL ERROR: innerPath (' +\n        innerPath +\n        ') is not within ' +\n        'outerPath (' +\n        outerPath +\n        ')'\n    );\n  }\n}\n\n/**\n * @returns -1, 0, 1 if left is less, equal, or greater than the right.\n */\nexport function pathCompare(left: Path, right: Path): number {\n  const leftKeys = pathSlice(left, 0);\n  const rightKeys = pathSlice(right, 0);\n  for (let i = 0; i < leftKeys.length && i < rightKeys.length; i++) {\n    const cmp = nameCompare(leftKeys[i], rightKeys[i]);\n    if (cmp !== 0) {\n      return cmp;\n    }\n  }\n  if (leftKeys.length === rightKeys.length) {\n    return 0;\n  }\n  return leftKeys.length < rightKeys.length ? -1 : 1;\n}\n\n/**\n * @returns true if paths are the same.\n */\nexport function pathEquals(path: Path, other: Path): boolean {\n  if (pathGetLength(path) !== pathGetLength(other)) {\n    return false;\n  }\n\n  for (\n    let i = path.pieceNum_, j = other.pieceNum_;\n    i <= path.pieces_.length;\n    i++, j++\n  ) {\n    if (path.pieces_[i] !== other.pieces_[j]) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\n/**\n * @returns True if this path is a parent of (or the same as) other\n */\nexport function pathContains(path: Path, other: Path): boolean {\n  let i = path.pieceNum_;\n  let j = other.pieceNum_;\n  if (pathGetLength(path) > pathGetLength(other)) {\n    return false;\n  }\n  while (i < path.pieces_.length) {\n    if (path.pieces_[i] !== other.pieces_[j]) {\n      return false;\n    }\n    ++i;\n    ++j;\n  }\n  return true;\n}\n\n/**\n * Dynamic (mutable) path used to count path lengths.\n *\n * This class is used to efficiently check paths for valid\n * length (in UTF8 bytes) and depth (used in path validation).\n *\n * Throws Error exception if path is ever invalid.\n *\n * The definition of a path always begins with '/'.\n */\nexport class ValidationPath {\n  parts_: string[];\n  /** Initialize to number of '/' chars needed in path. */\n  byteLength_: number;\n\n  /**\n   * @param path - Initial Path.\n   * @param errorPrefix_ - Prefix for any error messages.\n   */\n  constructor(path: Path, public errorPrefix_: string) {\n    this.parts_ = pathSlice(path, 0);\n    /** Initialize to number of '/' chars needed in path. */\n    this.byteLength_ = Math.max(1, this.parts_.length);\n\n    for (let i = 0; i < this.parts_.length; i++) {\n      this.byteLength_ += stringLength(this.parts_[i]);\n    }\n    validationPathCheckValid(this);\n  }\n}\n\nexport function validationPathPush(\n  validationPath: ValidationPath,\n  child: string\n): void {\n  // Count the needed '/'\n  if (validationPath.parts_.length > 0) {\n    validationPath.byteLength_ += 1;\n  }\n  validationPath.parts_.push(child);\n  validationPath.byteLength_ += stringLength(child);\n  validationPathCheckValid(validationPath);\n}\n\nexport function validationPathPop(validationPath: ValidationPath): void {\n  const last = validationPath.parts_.pop();\n  validationPath.byteLength_ -= stringLength(last);\n  // Un-count the previous '/'\n  if (validationPath.parts_.length > 0) {\n    validationPath.byteLength_ -= 1;\n  }\n}\n\nfunction validationPathCheckValid(validationPath: ValidationPath): void {\n  if (validationPath.byteLength_ > MAX_PATH_LENGTH_BYTES) {\n    throw new Error(\n      validationPath.errorPrefix_ +\n        'has a key path longer than ' +\n        MAX_PATH_LENGTH_BYTES +\n        ' bytes (' +\n        validationPath.byteLength_ +\n        ').'\n    );\n  }\n  if (validationPath.parts_.length > MAX_PATH_DEPTH) {\n    throw new Error(\n      validationPath.errorPrefix_ +\n        'path specified exceeds the maximum depth that can be written (' +\n        MAX_PATH_DEPTH +\n        ') or object contains a cycle ' +\n        validationPathToErrorString(validationPath)\n    );\n  }\n}\n\n/**\n * String for use in error messages - uses '.' notation for path.\n */\nexport function validationPathToErrorString(\n  validationPath: ValidationPath\n): string {\n  if (validationPath.parts_.length === 0) {\n    return '';\n  }\n  return \"in property '\" + validationPath.parts_.join('.') + \"'\";\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { EventEmitter } from './EventEmitter';\n\ndeclare const document: Document;\n\nexport class VisibilityMonitor extends EventEmitter {\n  private visible_: boolean;\n\n  static getInstance() {\n    return new VisibilityMonitor();\n  }\n\n  constructor() {\n    super(['visible']);\n    let hidden: string;\n    let visibilityChange: string;\n    if (\n      typeof document !== 'undefined' &&\n      typeof document.addEventListener !== 'undefined'\n    ) {\n      if (typeof document['hidden'] !== 'undefined') {\n        // Opera 12.10 and Firefox 18 and later support\n        visibilityChange = 'visibilitychange';\n        hidden = 'hidden';\n      } else if (typeof document['mozHidden'] !== 'undefined') {\n        visibilityChange = 'mozvisibilitychange';\n        hidden = 'mozHidden';\n      } else if (typeof document['msHidden'] !== 'undefined') {\n        visibilityChange = 'msvisibilitychange';\n        hidden = 'msHidden';\n      } else if (typeof document['webkitHidden'] !== 'undefined') {\n        visibilityChange = 'webkitvisibilitychange';\n        hidden = 'webkitHidden';\n      }\n    }\n\n    // Initially, we always assume we are visible. This ensures that in browsers\n    // without page visibility support or in cases where we are never visible\n    // (e.g. chrome extension), we act as if we are visible, i.e. don't delay\n    // reconnects\n    this.visible_ = true;\n\n    if (visibilityChange) {\n      document.addEventListener(\n        visibilityChange,\n        () => {\n          const visible = !document[hidden];\n          if (visible !== this.visible_) {\n            this.visible_ = visible;\n            this.trigger('visible', visible);\n          }\n        },\n        false\n      );\n    }\n  }\n\n  getInitialEvent(eventType: string): boolean[] {\n    assert(eventType === 'visible', 'Unknown event type: ' + eventType);\n    return [this.visible_];\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  assert,\n  contains,\n  Deferred,\n  isEmpty,\n  isMobileCordova,\n  isNodeSdk,\n  isReactNative,\n  isValidFormat,\n  safeGet,\n  stringify,\n  isAdmin\n} from '@firebase/util';\n\nimport { Connection } from '../realtime/Connection';\n\nimport { AppCheckTokenProvider } from './AppCheckTokenProvider';\nimport { AuthTokenProvider } from './AuthTokenProvider';\nimport { RepoInfo } from './RepoInfo';\nimport { ServerActions } from './ServerActions';\nimport { OnlineMonitor } from './util/OnlineMonitor';\nimport { Path } from './util/Path';\nimport { error, log, logWrapper, warn, ObjectToUniqueKey } from './util/util';\nimport { VisibilityMonitor } from './util/VisibilityMonitor';\nimport { SDK_VERSION } from './version';\nimport { QueryContext } from './view/EventRegistration';\n\nconst RECONNECT_MIN_DELAY = 1000;\nconst RECONNECT_MAX_DELAY_DEFAULT = 60 * 5 * 1000; // 5 minutes in milliseconds (Case: 1858)\nconst RECONNECT_MAX_DELAY_FOR_ADMINS = 30 * 1000; // 30 seconds for admin clients (likely to be a backend server)\nconst RECONNECT_DELAY_MULTIPLIER = 1.3;\nconst RECONNECT_DELAY_RESET_TIMEOUT = 30000; // Reset delay back to MIN_DELAY after being connected for 30sec.\nconst SERVER_KILL_INTERRUPT_REASON = 'server_kill';\n\n// If auth fails repeatedly, we'll assume something is wrong and log a warning / back off.\nconst INVALID_TOKEN_THRESHOLD = 3;\n\ninterface ListenSpec {\n  onComplete(s: string, p?: unknown): void;\n\n  hashFn(): string;\n\n  query: QueryContext;\n  tag: number | null;\n}\n\ninterface OnDisconnectRequest {\n  pathString: string;\n  action: string;\n  data: unknown;\n  onComplete?: (a: string, b: string) => void;\n}\n\ninterface OutstandingPut {\n  action: string;\n  request: object;\n  queued?: boolean;\n  onComplete: (a: string, b?: string) => void;\n}\n\ninterface OutstandingGet {\n  request: object;\n  onComplete: (response: { [k: string]: unknown }) => void;\n}\n\n/**\n * Firebase connection.  Abstracts wire protocol and handles reconnecting.\n *\n * NOTE: All JSON objects sent to the realtime connection must have property names enclosed\n * in quotes to make sure the closure compiler does not minify them.\n */\nexport class PersistentConnection extends ServerActions {\n  // Used for diagnostic logging.\n  id = PersistentConnection.nextPersistentConnectionId_++;\n  private log_ = logWrapper('p:' + this.id + ':');\n\n  private interruptReasons_: { [reason: string]: boolean } = {};\n  private readonly listens: Map<\n    /* path */ string,\n    Map</* queryId */ string, ListenSpec>\n  > = new Map();\n  private outstandingPuts_: OutstandingPut[] = [];\n  private outstandingGets_: OutstandingGet[] = [];\n  private outstandingPutCount_ = 0;\n  private outstandingGetCount_ = 0;\n  private onDisconnectRequestQueue_: OnDisconnectRequest[] = [];\n  private connected_ = false;\n  private reconnectDelay_ = RECONNECT_MIN_DELAY;\n  private maxReconnectDelay_ = RECONNECT_MAX_DELAY_DEFAULT;\n  private securityDebugCallback_: ((a: object) => void) | null = null;\n  lastSessionId: string | null = null;\n\n  private establishConnectionTimer_: number | null = null;\n\n  private visible_: boolean = false;\n\n  // Before we get connected, we keep a queue of pending messages to send.\n  private requestCBHash_: { [k: number]: (a: unknown) => void } = {};\n  private requestNumber_ = 0;\n\n  private realtime_: {\n    sendRequest(a: object): void;\n    close(): void;\n  } | null = null;\n\n  private authToken_: string | null = null;\n  private appCheckToken_: string | null = null;\n  private forceTokenRefresh_ = false;\n  private invalidAuthTokenCount_ = 0;\n  private invalidAppCheckTokenCount_ = 0;\n\n  private firstConnection_ = true;\n  private lastConnectionAttemptTime_: number | null = null;\n  private lastConnectionEstablishedTime_: number | null = null;\n\n  private static nextPersistentConnectionId_ = 0;\n\n  /**\n   * Counter for number of connections created. Mainly used for tagging in the logs\n   */\n  private static nextConnectionId_ = 0;\n\n  /**\n   * @param repoInfo_ - Data about the namespace we are connecting to\n   * @param applicationId_ - The Firebase App ID for this project\n   * @param onDataUpdate_ - A callback for new data from the server\n   */\n  constructor(\n    private repoInfo_: RepoInfo,\n    private applicationId_: string,\n    private onDataUpdate_: (\n      a: string,\n      b: unknown,\n      c: boolean,\n      d: number | null\n    ) => void,\n    private onConnectStatus_: (a: boolean) => void,\n    private onServerInfoUpdate_: (a: unknown) => void,\n    private authTokenProvider_: AuthTokenProvider,\n    private appCheckTokenProvider_: AppCheckTokenProvider,\n    private authOverride_?: object | null\n  ) {\n    super();\n\n    if (authOverride_ && !isNodeSdk()) {\n      throw new Error(\n        'Auth override specified in options, but not supported on non Node.js platforms'\n      );\n    }\n\n    VisibilityMonitor.getInstance().on('visible', this.onVisible_, this);\n\n    if (repoInfo_.host.indexOf('fblocal') === -1) {\n      OnlineMonitor.getInstance().on('online', this.onOnline_, this);\n    }\n  }\n\n  protected sendRequest(\n    action: string,\n    body: unknown,\n    onResponse?: (a: unknown) => void\n  ) {\n    const curReqNum = ++this.requestNumber_;\n\n    const msg = { r: curReqNum, a: action, b: body };\n    this.log_(stringify(msg));\n    assert(\n      this.connected_,\n      \"sendRequest call when we're not connected not allowed.\"\n    );\n    this.realtime_.sendRequest(msg);\n    if (onResponse) {\n      this.requestCBHash_[curReqNum] = onResponse;\n    }\n  }\n\n  get(query: QueryContext): Promise<string> {\n    this.initConnection_();\n\n    const deferred = new Deferred<string>();\n    const request = {\n      p: query._path.toString(),\n      q: query._queryObject\n    };\n    const outstandingGet = {\n      action: 'g',\n      request,\n      onComplete: (message: { [k: string]: unknown }) => {\n        const payload = message['d'] as string;\n        if (message['s'] === 'ok') {\n          deferred.resolve(payload);\n        } else {\n          deferred.reject(payload);\n        }\n      }\n    };\n    this.outstandingGets_.push(outstandingGet);\n    this.outstandingGetCount_++;\n    const index = this.outstandingGets_.length - 1;\n\n    if (this.connected_) {\n      this.sendGet_(index);\n    }\n\n    return deferred.promise;\n  }\n\n  listen(\n    query: QueryContext,\n    currentHashFn: () => string,\n    tag: number | null,\n    onComplete: (a: string, b: unknown) => void\n  ) {\n    this.initConnection_();\n\n    const queryId = query._queryIdentifier;\n    const pathString = query._path.toString();\n    this.log_('Listen called for ' + pathString + ' ' + queryId);\n    if (!this.listens.has(pathString)) {\n      this.listens.set(pathString, new Map());\n    }\n    assert(\n      query._queryParams.isDefault() || !query._queryParams.loadsAllData(),\n      'listen() called for non-default but complete query'\n    );\n    assert(\n      !this.listens.get(pathString)!.has(queryId),\n      `listen() called twice for same path/queryId.`\n    );\n    const listenSpec: ListenSpec = {\n      onComplete,\n      hashFn: currentHashFn,\n      query,\n      tag\n    };\n    this.listens.get(pathString)!.set(queryId, listenSpec);\n\n    if (this.connected_) {\n      this.sendListen_(listenSpec);\n    }\n  }\n\n  private sendGet_(index: number) {\n    const get = this.outstandingGets_[index];\n    this.sendRequest('g', get.request, (message: { [k: string]: unknown }) => {\n      delete this.outstandingGets_[index];\n      this.outstandingGetCount_--;\n      if (this.outstandingGetCount_ === 0) {\n        this.outstandingGets_ = [];\n      }\n      if (get.onComplete) {\n        get.onComplete(message);\n      }\n    });\n  }\n\n  private sendListen_(listenSpec: ListenSpec) {\n    const query = listenSpec.query;\n    const pathString = query._path.toString();\n    const queryId = query._queryIdentifier;\n    this.log_('Listen on ' + pathString + ' for ' + queryId);\n    const req: { [k: string]: unknown } = { /*path*/ p: pathString };\n\n    const action = 'q';\n\n    // Only bother to send query if it's non-default.\n    if (listenSpec.tag) {\n      req['q'] = query._queryObject;\n      req['t'] = listenSpec.tag;\n    }\n\n    req[/*hash*/ 'h'] = listenSpec.hashFn();\n\n    this.sendRequest(action, req, (message: { [k: string]: unknown }) => {\n      const payload: unknown = message[/*data*/ 'd'];\n      const status = message[/*status*/ 's'] as string;\n\n      // print warnings in any case...\n      PersistentConnection.warnOnListenWarnings_(payload, query);\n\n      const currentListenSpec =\n        this.listens.get(pathString) &&\n        this.listens.get(pathString)!.get(queryId);\n      // only trigger actions if the listen hasn't been removed and readded\n      if (currentListenSpec === listenSpec) {\n        this.log_('listen response', message);\n\n        if (status !== 'ok') {\n          this.removeListen_(pathString, queryId);\n        }\n\n        if (listenSpec.onComplete) {\n          listenSpec.onComplete(status, payload);\n        }\n      }\n    });\n  }\n\n  private static warnOnListenWarnings_(payload: unknown, query: QueryContext) {\n    if (payload && typeof payload === 'object' && contains(payload, 'w')) {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      const warnings = safeGet(payload as any, 'w');\n      if (Array.isArray(warnings) && ~warnings.indexOf('no_index')) {\n        const indexSpec =\n          '\".indexOn\": \"' + query._queryParams.getIndex().toString() + '\"';\n        const indexPath = query._path.toString();\n        warn(\n          `Using an unspecified index. Your data will be downloaded and ` +\n            `filtered on the client. Consider adding ${indexSpec} at ` +\n            `${indexPath} to your security rules for better performance.`\n        );\n      }\n    }\n  }\n\n  refreshAuthToken(token: string) {\n    this.authToken_ = token;\n    this.log_('Auth token refreshed');\n    if (this.authToken_) {\n      this.tryAuth();\n    } else {\n      //If we're connected we want to let the server know to unauthenticate us. If we're not connected, simply delete\n      //the credential so we dont become authenticated next time we connect.\n      if (this.connected_) {\n        this.sendRequest('unauth', {}, () => {});\n      }\n    }\n\n    this.reduceReconnectDelayIfAdminCredential_(token);\n  }\n\n  private reduceReconnectDelayIfAdminCredential_(credential: string) {\n    // NOTE: This isn't intended to be bulletproof (a malicious developer can always just modify the client).\n    // Additionally, we don't bother resetting the max delay back to the default if auth fails / expires.\n    const isFirebaseSecret = credential && credential.length === 40;\n    if (isFirebaseSecret || isAdmin(credential)) {\n      this.log_(\n        'Admin auth credential detected.  Reducing max reconnect time.'\n      );\n      this.maxReconnectDelay_ = RECONNECT_MAX_DELAY_FOR_ADMINS;\n    }\n  }\n\n  refreshAppCheckToken(token: string | null) {\n    this.appCheckToken_ = token;\n    this.log_('App check token refreshed');\n    if (this.appCheckToken_) {\n      this.tryAppCheck();\n    } else {\n      //If we're connected we want to let the server know to unauthenticate us.\n      //If we're not connected, simply delete the credential so we dont become\n      // authenticated next time we connect.\n      if (this.connected_) {\n        this.sendRequest('unappeck', {}, () => {});\n      }\n    }\n  }\n\n  /**\n   * Attempts to authenticate with the given credentials. If the authentication attempt fails, it's triggered like\n   * a auth revoked (the connection is closed).\n   */\n  tryAuth() {\n    if (this.connected_ && this.authToken_) {\n      const token = this.authToken_;\n      const authMethod = isValidFormat(token) ? 'auth' : 'gauth';\n      const requestData: { [k: string]: unknown } = { cred: token };\n      if (this.authOverride_ === null) {\n        requestData['noauth'] = true;\n      } else if (typeof this.authOverride_ === 'object') {\n        requestData['authvar'] = this.authOverride_;\n      }\n      this.sendRequest(\n        authMethod,\n        requestData,\n        (res: { [k: string]: unknown }) => {\n          const status = res[/*status*/ 's'] as string;\n          const data = (res[/*data*/ 'd'] as string) || 'error';\n\n          if (this.authToken_ === token) {\n            if (status === 'ok') {\n              this.invalidAuthTokenCount_ = 0;\n            } else {\n              // Triggers reconnect and force refresh for auth token\n              this.onAuthRevoked_(status, data);\n            }\n          }\n        }\n      );\n    }\n  }\n\n  /**\n   * Attempts to authenticate with the given token. If the authentication\n   * attempt fails, it's triggered like the token was revoked (the connection is\n   * closed).\n   */\n  tryAppCheck() {\n    if (this.connected_ && this.appCheckToken_) {\n      this.sendRequest(\n        'appcheck',\n        { 'token': this.appCheckToken_ },\n        (res: { [k: string]: unknown }) => {\n          const status = res[/*status*/ 's'] as string;\n          const data = (res[/*data*/ 'd'] as string) || 'error';\n          if (status === 'ok') {\n            this.invalidAppCheckTokenCount_ = 0;\n          } else {\n            this.onAppCheckRevoked_(status, data);\n          }\n        }\n      );\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  unlisten(query: QueryContext, tag: number | null) {\n    const pathString = query._path.toString();\n    const queryId = query._queryIdentifier;\n\n    this.log_('Unlisten called for ' + pathString + ' ' + queryId);\n\n    assert(\n      query._queryParams.isDefault() || !query._queryParams.loadsAllData(),\n      'unlisten() called for non-default but complete query'\n    );\n    const listen = this.removeListen_(pathString, queryId);\n    if (listen && this.connected_) {\n      this.sendUnlisten_(pathString, queryId, query._queryObject, tag);\n    }\n  }\n\n  private sendUnlisten_(\n    pathString: string,\n    queryId: string,\n    queryObj: object,\n    tag: number | null\n  ) {\n    this.log_('Unlisten on ' + pathString + ' for ' + queryId);\n\n    const req: { [k: string]: unknown } = { /*path*/ p: pathString };\n    const action = 'n';\n    // Only bother sending queryId if it's non-default.\n    if (tag) {\n      req['q'] = queryObj;\n      req['t'] = tag;\n    }\n\n    this.sendRequest(action, req);\n  }\n\n  onDisconnectPut(\n    pathString: string,\n    data: unknown,\n    onComplete?: (a: string, b: string) => void\n  ) {\n    this.initConnection_();\n\n    if (this.connected_) {\n      this.sendOnDisconnect_('o', pathString, data, onComplete);\n    } else {\n      this.onDisconnectRequestQueue_.push({\n        pathString,\n        action: 'o',\n        data,\n        onComplete\n      });\n    }\n  }\n\n  onDisconnectMerge(\n    pathString: string,\n    data: unknown,\n    onComplete?: (a: string, b: string) => void\n  ) {\n    this.initConnection_();\n\n    if (this.connected_) {\n      this.sendOnDisconnect_('om', pathString, data, onComplete);\n    } else {\n      this.onDisconnectRequestQueue_.push({\n        pathString,\n        action: 'om',\n        data,\n        onComplete\n      });\n    }\n  }\n\n  onDisconnectCancel(\n    pathString: string,\n    onComplete?: (a: string, b: string) => void\n  ) {\n    this.initConnection_();\n\n    if (this.connected_) {\n      this.sendOnDisconnect_('oc', pathString, null, onComplete);\n    } else {\n      this.onDisconnectRequestQueue_.push({\n        pathString,\n        action: 'oc',\n        data: null,\n        onComplete\n      });\n    }\n  }\n\n  private sendOnDisconnect_(\n    action: string,\n    pathString: string,\n    data: unknown,\n    onComplete: (a: string, b: string) => void\n  ) {\n    const request = { /*path*/ p: pathString, /*data*/ d: data };\n    this.log_('onDisconnect ' + action, request);\n    this.sendRequest(action, request, (response: { [k: string]: unknown }) => {\n      if (onComplete) {\n        setTimeout(() => {\n          onComplete(\n            response[/*status*/ 's'] as string,\n            response[/* data */ 'd'] as string\n          );\n        }, Math.floor(0));\n      }\n    });\n  }\n\n  put(\n    pathString: string,\n    data: unknown,\n    onComplete?: (a: string, b: string) => void,\n    hash?: string\n  ) {\n    this.putInternal('p', pathString, data, onComplete, hash);\n  }\n\n  merge(\n    pathString: string,\n    data: unknown,\n    onComplete: (a: string, b: string | null) => void,\n    hash?: string\n  ) {\n    this.putInternal('m', pathString, data, onComplete, hash);\n  }\n\n  putInternal(\n    action: string,\n    pathString: string,\n    data: unknown,\n    onComplete: (a: string, b: string | null) => void,\n    hash?: string\n  ) {\n    this.initConnection_();\n\n    const request: { [k: string]: unknown } = {\n      /*path*/ p: pathString,\n      /*data*/ d: data\n    };\n\n    if (hash !== undefined) {\n      request[/*hash*/ 'h'] = hash;\n    }\n\n    // TODO: Only keep track of the most recent put for a given path?\n    this.outstandingPuts_.push({\n      action,\n      request,\n      onComplete\n    });\n\n    this.outstandingPutCount_++;\n    const index = this.outstandingPuts_.length - 1;\n\n    if (this.connected_) {\n      this.sendPut_(index);\n    } else {\n      this.log_('Buffering put: ' + pathString);\n    }\n  }\n\n  private sendPut_(index: number) {\n    const action = this.outstandingPuts_[index].action;\n    const request = this.outstandingPuts_[index].request;\n    const onComplete = this.outstandingPuts_[index].onComplete;\n    this.outstandingPuts_[index].queued = this.connected_;\n\n    this.sendRequest(action, request, (message: { [k: string]: unknown }) => {\n      this.log_(action + ' response', message);\n\n      delete this.outstandingPuts_[index];\n      this.outstandingPutCount_--;\n\n      // Clean up array occasionally.\n      if (this.outstandingPutCount_ === 0) {\n        this.outstandingPuts_ = [];\n      }\n\n      if (onComplete) {\n        onComplete(\n          message[/*status*/ 's'] as string,\n          message[/* data */ 'd'] as string\n        );\n      }\n    });\n  }\n\n  reportStats(stats: { [k: string]: unknown }) {\n    // If we're not connected, we just drop the stats.\n    if (this.connected_) {\n      const request = { /*counters*/ c: stats };\n      this.log_('reportStats', request);\n\n      this.sendRequest(/*stats*/ 's', request, result => {\n        const status = result[/*status*/ 's'];\n        if (status !== 'ok') {\n          const errorReason = result[/* data */ 'd'];\n          this.log_('reportStats', 'Error sending stats: ' + errorReason);\n        }\n      });\n    }\n  }\n\n  private onDataMessage_(message: { [k: string]: unknown }) {\n    if ('r' in message) {\n      // this is a response\n      this.log_('from server: ' + stringify(message));\n      const reqNum = message['r'] as string;\n      const onResponse = this.requestCBHash_[reqNum];\n      if (onResponse) {\n        delete this.requestCBHash_[reqNum];\n        onResponse(message[/*body*/ 'b']);\n      }\n    } else if ('error' in message) {\n      throw 'A server-side error has occurred: ' + message['error'];\n    } else if ('a' in message) {\n      // a and b are action and body, respectively\n      this.onDataPush_(message['a'] as string, message['b'] as {});\n    }\n  }\n\n  private onDataPush_(action: string, body: { [k: string]: unknown }) {\n    this.log_('handleServerMessage', action, body);\n    if (action === 'd') {\n      this.onDataUpdate_(\n        body[/*path*/ 'p'] as string,\n        body[/*data*/ 'd'],\n        /*isMerge*/ false,\n        body['t'] as number\n      );\n    } else if (action === 'm') {\n      this.onDataUpdate_(\n        body[/*path*/ 'p'] as string,\n        body[/*data*/ 'd'],\n        /*isMerge=*/ true,\n        body['t'] as number\n      );\n    } else if (action === 'c') {\n      this.onListenRevoked_(\n        body[/*path*/ 'p'] as string,\n        body[/*query*/ 'q'] as unknown[]\n      );\n    } else if (action === 'ac') {\n      this.onAuthRevoked_(\n        body[/*status code*/ 's'] as string,\n        body[/* explanation */ 'd'] as string\n      );\n    } else if (action === 'apc') {\n      this.onAppCheckRevoked_(\n        body[/*status code*/ 's'] as string,\n        body[/* explanation */ 'd'] as string\n      );\n    } else if (action === 'sd') {\n      this.onSecurityDebugPacket_(body);\n    } else {\n      error(\n        'Unrecognized action received from server: ' +\n          stringify(action) +\n          '\\nAre you using the latest client?'\n      );\n    }\n  }\n\n  private onReady_(timestamp: number, sessionId: string) {\n    this.log_('connection ready');\n    this.connected_ = true;\n    this.lastConnectionEstablishedTime_ = new Date().getTime();\n    this.handleTimestamp_(timestamp);\n    this.lastSessionId = sessionId;\n    if (this.firstConnection_) {\n      this.sendConnectStats_();\n    }\n    this.restoreState_();\n    this.firstConnection_ = false;\n    this.onConnectStatus_(true);\n  }\n\n  private scheduleConnect_(timeout: number) {\n    assert(\n      !this.realtime_,\n      \"Scheduling a connect when we're already connected/ing?\"\n    );\n\n    if (this.establishConnectionTimer_) {\n      clearTimeout(this.establishConnectionTimer_);\n    }\n\n    // NOTE: Even when timeout is 0, it's important to do a setTimeout to work around an infuriating \"Security Error\" in\n    // Firefox when trying to write to our long-polling iframe in some scenarios (e.g. Forge or our unit tests).\n\n    this.establishConnectionTimer_ = setTimeout(() => {\n      this.establishConnectionTimer_ = null;\n      this.establishConnection_();\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    }, Math.floor(timeout)) as any;\n  }\n\n  private initConnection_() {\n    if (!this.realtime_ && this.firstConnection_) {\n      this.scheduleConnect_(0);\n    }\n  }\n\n  private onVisible_(visible: boolean) {\n    // NOTE: Tabbing away and back to a window will defeat our reconnect backoff, but I think that's fine.\n    if (\n      visible &&\n      !this.visible_ &&\n      this.reconnectDelay_ === this.maxReconnectDelay_\n    ) {\n      this.log_('Window became visible.  Reducing delay.');\n      this.reconnectDelay_ = RECONNECT_MIN_DELAY;\n\n      if (!this.realtime_) {\n        this.scheduleConnect_(0);\n      }\n    }\n    this.visible_ = visible;\n  }\n\n  private onOnline_(online: boolean) {\n    if (online) {\n      this.log_('Browser went online.');\n      this.reconnectDelay_ = RECONNECT_MIN_DELAY;\n      if (!this.realtime_) {\n        this.scheduleConnect_(0);\n      }\n    } else {\n      this.log_('Browser went offline.  Killing connection.');\n      if (this.realtime_) {\n        this.realtime_.close();\n      }\n    }\n  }\n\n  private onRealtimeDisconnect_() {\n    this.log_('data client disconnected');\n    this.connected_ = false;\n    this.realtime_ = null;\n\n    // Since we don't know if our sent transactions succeeded or not, we need to cancel them.\n    this.cancelSentTransactions_();\n\n    // Clear out the pending requests.\n    this.requestCBHash_ = {};\n\n    if (this.shouldReconnect_()) {\n      if (!this.visible_) {\n        this.log_(\"Window isn't visible.  Delaying reconnect.\");\n        this.reconnectDelay_ = this.maxReconnectDelay_;\n        this.lastConnectionAttemptTime_ = new Date().getTime();\n      } else if (this.lastConnectionEstablishedTime_) {\n        // If we've been connected long enough, reset reconnect delay to minimum.\n        const timeSinceLastConnectSucceeded =\n          new Date().getTime() - this.lastConnectionEstablishedTime_;\n        if (timeSinceLastConnectSucceeded > RECONNECT_DELAY_RESET_TIMEOUT) {\n          this.reconnectDelay_ = RECONNECT_MIN_DELAY;\n        }\n        this.lastConnectionEstablishedTime_ = null;\n      }\n\n      const timeSinceLastConnectAttempt =\n        new Date().getTime() - this.lastConnectionAttemptTime_;\n      let reconnectDelay = Math.max(\n        0,\n        this.reconnectDelay_ - timeSinceLastConnectAttempt\n      );\n      reconnectDelay = Math.random() * reconnectDelay;\n\n      this.log_('Trying to reconnect in ' + reconnectDelay + 'ms');\n      this.scheduleConnect_(reconnectDelay);\n\n      // Adjust reconnect delay for next time.\n      this.reconnectDelay_ = Math.min(\n        this.maxReconnectDelay_,\n        this.reconnectDelay_ * RECONNECT_DELAY_MULTIPLIER\n      );\n    }\n    this.onConnectStatus_(false);\n  }\n\n  private async establishConnection_() {\n    if (this.shouldReconnect_()) {\n      this.log_('Making a connection attempt');\n      this.lastConnectionAttemptTime_ = new Date().getTime();\n      this.lastConnectionEstablishedTime_ = null;\n      const onDataMessage = this.onDataMessage_.bind(this);\n      const onReady = this.onReady_.bind(this);\n      const onDisconnect = this.onRealtimeDisconnect_.bind(this);\n      const connId = this.id + ':' + PersistentConnection.nextConnectionId_++;\n      const lastSessionId = this.lastSessionId;\n      let canceled = false;\n      let connection: Connection | null = null;\n      const closeFn = function () {\n        if (connection) {\n          connection.close();\n        } else {\n          canceled = true;\n          onDisconnect();\n        }\n      };\n      const sendRequestFn = function (msg: object) {\n        assert(\n          connection,\n          \"sendRequest call when we're not connected not allowed.\"\n        );\n        connection.sendRequest(msg);\n      };\n\n      this.realtime_ = {\n        close: closeFn,\n        sendRequest: sendRequestFn\n      };\n\n      const forceRefresh = this.forceTokenRefresh_;\n      this.forceTokenRefresh_ = false;\n\n      try {\n        // First fetch auth and app check token, and establish connection after\n        // fetching the token was successful\n        const [authToken, appCheckToken] = await Promise.all([\n          this.authTokenProvider_.getToken(forceRefresh),\n          this.appCheckTokenProvider_.getToken(forceRefresh)\n        ]);\n\n        if (!canceled) {\n          log('getToken() completed. Creating connection.');\n          this.authToken_ = authToken && authToken.accessToken;\n          this.appCheckToken_ = appCheckToken && appCheckToken.token;\n          connection = new Connection(\n            connId,\n            this.repoInfo_,\n            this.applicationId_,\n            this.appCheckToken_,\n            this.authToken_,\n            onDataMessage,\n            onReady,\n            onDisconnect,\n            /* onKill= */ reason => {\n              warn(reason + ' (' + this.repoInfo_.toString() + ')');\n              this.interrupt(SERVER_KILL_INTERRUPT_REASON);\n            },\n            lastSessionId\n          );\n        } else {\n          log('getToken() completed but was canceled');\n        }\n      } catch (error) {\n        this.log_('Failed to get token: ' + error);\n        if (!canceled) {\n          if (this.repoInfo_.nodeAdmin) {\n            // This may be a critical error for the Admin Node.js SDK, so log a warning.\n            // But getToken() may also just have temporarily failed, so we still want to\n            // continue retrying.\n            warn(error);\n          }\n          closeFn();\n        }\n      }\n    }\n  }\n\n  interrupt(reason: string) {\n    log('Interrupting connection for reason: ' + reason);\n    this.interruptReasons_[reason] = true;\n    if (this.realtime_) {\n      this.realtime_.close();\n    } else {\n      if (this.establishConnectionTimer_) {\n        clearTimeout(this.establishConnectionTimer_);\n        this.establishConnectionTimer_ = null;\n      }\n      if (this.connected_) {\n        this.onRealtimeDisconnect_();\n      }\n    }\n  }\n\n  resume(reason: string) {\n    log('Resuming connection for reason: ' + reason);\n    delete this.interruptReasons_[reason];\n    if (isEmpty(this.interruptReasons_)) {\n      this.reconnectDelay_ = RECONNECT_MIN_DELAY;\n      if (!this.realtime_) {\n        this.scheduleConnect_(0);\n      }\n    }\n  }\n\n  private handleTimestamp_(timestamp: number) {\n    const delta = timestamp - new Date().getTime();\n    this.onServerInfoUpdate_({ serverTimeOffset: delta });\n  }\n\n  private cancelSentTransactions_() {\n    for (let i = 0; i < this.outstandingPuts_.length; i++) {\n      const put = this.outstandingPuts_[i];\n      if (put && /*hash*/ 'h' in put.request && put.queued) {\n        if (put.onComplete) {\n          put.onComplete('disconnect');\n        }\n\n        delete this.outstandingPuts_[i];\n        this.outstandingPutCount_--;\n      }\n    }\n\n    // Clean up array occasionally.\n    if (this.outstandingPutCount_ === 0) {\n      this.outstandingPuts_ = [];\n    }\n  }\n\n  private onListenRevoked_(pathString: string, query?: unknown[]) {\n    // Remove the listen and manufacture a \"permission_denied\" error for the failed listen.\n    let queryId;\n    if (!query) {\n      queryId = 'default';\n    } else {\n      queryId = query.map(q => ObjectToUniqueKey(q)).join('$');\n    }\n    const listen = this.removeListen_(pathString, queryId);\n    if (listen && listen.onComplete) {\n      listen.onComplete('permission_denied');\n    }\n  }\n\n  private removeListen_(pathString: string, queryId: string): ListenSpec {\n    const normalizedPathString = new Path(pathString).toString(); // normalize path.\n    let listen;\n    if (this.listens.has(normalizedPathString)) {\n      const map = this.listens.get(normalizedPathString)!;\n      listen = map.get(queryId);\n      map.delete(queryId);\n      if (map.size === 0) {\n        this.listens.delete(normalizedPathString);\n      }\n    } else {\n      // all listens for this path has already been removed\n      listen = undefined;\n    }\n    return listen;\n  }\n\n  private onAuthRevoked_(statusCode: string, explanation: string) {\n    log('Auth token revoked: ' + statusCode + '/' + explanation);\n    this.authToken_ = null;\n    this.forceTokenRefresh_ = true;\n    this.realtime_.close();\n    if (statusCode === 'invalid_token' || statusCode === 'permission_denied') {\n      // We'll wait a couple times before logging the warning / increasing the\n      // retry period since oauth tokens will report as \"invalid\" if they're\n      // just expired. Plus there may be transient issues that resolve themselves.\n      this.invalidAuthTokenCount_++;\n      if (this.invalidAuthTokenCount_ >= INVALID_TOKEN_THRESHOLD) {\n        // Set a long reconnect delay because recovery is unlikely\n        this.reconnectDelay_ = RECONNECT_MAX_DELAY_FOR_ADMINS;\n\n        // Notify the auth token provider that the token is invalid, which will log\n        // a warning\n        this.authTokenProvider_.notifyForInvalidToken();\n      }\n    }\n  }\n\n  private onAppCheckRevoked_(statusCode: string, explanation: string) {\n    log('App check token revoked: ' + statusCode + '/' + explanation);\n    this.appCheckToken_ = null;\n    this.forceTokenRefresh_ = true;\n    // Note: We don't close the connection as the developer may not have\n    // enforcement enabled. The backend closes connections with enforcements.\n    if (statusCode === 'invalid_token' || statusCode === 'permission_denied') {\n      // We'll wait a couple times before logging the warning / increasing the\n      // retry period since oauth tokens will report as \"invalid\" if they're\n      // just expired. Plus there may be transient issues that resolve themselves.\n      this.invalidAppCheckTokenCount_++;\n      if (this.invalidAppCheckTokenCount_ >= INVALID_TOKEN_THRESHOLD) {\n        this.appCheckTokenProvider_.notifyForInvalidToken();\n      }\n    }\n  }\n\n  private onSecurityDebugPacket_(body: { [k: string]: unknown }) {\n    if (this.securityDebugCallback_) {\n      this.securityDebugCallback_(body);\n    } else {\n      if ('msg' in body) {\n        console.log(\n          'FIREBASE: ' + (body['msg'] as string).replace('\\n', '\\nFIREBASE: ')\n        );\n      }\n    }\n  }\n\n  private restoreState_() {\n    //Re-authenticate ourselves if we have a credential stored.\n    this.tryAuth();\n    this.tryAppCheck();\n\n    // Puts depend on having received the corresponding data update from the server before they complete, so we must\n    // make sure to send listens before puts.\n    for (const queries of this.listens.values()) {\n      for (const listenSpec of queries.values()) {\n        this.sendListen_(listenSpec);\n      }\n    }\n\n    for (let i = 0; i < this.outstandingPuts_.length; i++) {\n      if (this.outstandingPuts_[i]) {\n        this.sendPut_(i);\n      }\n    }\n\n    while (this.onDisconnectRequestQueue_.length) {\n      const request = this.onDisconnectRequestQueue_.shift();\n      this.sendOnDisconnect_(\n        request.action,\n        request.pathString,\n        request.data,\n        request.onComplete\n      );\n    }\n\n    for (let i = 0; i < this.outstandingGets_.length; i++) {\n      if (this.outstandingGets_[i]) {\n        this.sendGet_(i);\n      }\n    }\n  }\n\n  /**\n   * Sends client stats for first connection\n   */\n  private sendConnectStats_() {\n    const stats: { [k: string]: number } = {};\n\n    let clientName = 'js';\n    if (isNodeSdk()) {\n      if (this.repoInfo_.nodeAdmin) {\n        clientName = 'admin_node';\n      } else {\n        clientName = 'node';\n      }\n    }\n\n    stats['sdk.' + clientName + '.' + SDK_VERSION.replace(/\\./g, '-')] = 1;\n\n    if (isMobileCordova()) {\n      stats['framework.cordova'] = 1;\n    } else if (isReactNative()) {\n      stats['framework.reactnative'] = 1;\n    }\n    this.reportStats(stats);\n  }\n\n  private shouldReconnect_(): boolean {\n    const online = OnlineMonitor.getInstance().currentlyOnline();\n    return isEmpty(this.interruptReasons_) && online;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Comparator } from '../../util/SortedMap';\nimport { MIN_NAME } from '../../util/util';\nimport { Node, NamedNode } from '../Node';\n\nexport abstract class Index {\n  abstract compare(a: NamedNode, b: NamedNode): number;\n\n  abstract isDefinedOn(node: Node): boolean;\n\n  /**\n   * @returns A standalone comparison function for\n   * this index\n   */\n  getCompare(): Comparator<NamedNode> {\n    return this.compare.bind(this);\n  }\n\n  /**\n   * Given a before and after value for a node, determine if the indexed value has changed. Even if they are different,\n   * it's possible that the changes are isolated to parts of the snapshot that are not indexed.\n   *\n   *\n   * @returns True if the portion of the snapshot being indexed changed between oldNode and newNode\n   */\n  indexedValueChanged(oldNode: Node, newNode: Node): boolean {\n    const oldWrapped = new NamedNode(MIN_NAME, oldNode);\n    const newWrapped = new NamedNode(MIN_NAME, newNode);\n    return this.compare(oldWrapped, newWrapped) !== 0;\n  }\n\n  /**\n   * @returns a node wrapper that will sort equal to or less than\n   * any other node wrapper, using this index\n   */\n  minPost(): NamedNode {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return (NamedNode as any).MIN;\n  }\n\n  /**\n   * @returns a node wrapper that will sort greater than or equal to\n   * any other node wrapper, using this index\n   */\n  abstract maxPost(): NamedNode;\n\n  abstract makePost(indexValue: unknown, name: string): NamedNode;\n\n  /**\n   * @returns String representation for inclusion in a query spec\n   */\n  abstract toString(): string;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, assertionError } from '@firebase/util';\n\nimport { nameCompare, MAX_NAME } from '../../util/util';\nimport { ChildrenNode } from '../ChildrenNode';\nimport { Node, NamedNode } from '../Node';\n\nimport { Index } from './Index';\n\nlet __EMPTY_NODE: ChildrenNode;\n\nexport class KeyIndex extends Index {\n  static get __EMPTY_NODE() {\n    return __EMPTY_NODE;\n  }\n\n  static set __EMPTY_NODE(val) {\n    __EMPTY_NODE = val;\n  }\n  compare(a: NamedNode, b: NamedNode): number {\n    return nameCompare(a.name, b.name);\n  }\n  isDefinedOn(node: Node): boolean {\n    // We could probably return true here (since every node has a key), but it's never called\n    // so just leaving unimplemented for now.\n    throw assertionError('KeyIndex.isDefinedOn not expected to be called.');\n  }\n  indexedValueChanged(oldNode: Node, newNode: Node): boolean {\n    return false; // The key for a node never changes.\n  }\n  minPost() {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return (NamedNode as any).MIN;\n  }\n  maxPost(): NamedNode {\n    // TODO: This should really be created once and cached in a static property, but\n    // NamedNode isn't defined yet, so I can't use it in a static.  Bleh.\n    return new NamedNode(MAX_NAME, __EMPTY_NODE);\n  }\n\n  makePost(indexValue: string, name: string): NamedNode {\n    assert(\n      typeof indexValue === 'string',\n      'KeyIndex indexValue must always be a string.'\n    );\n    // We just use empty node, but it'll never be compared, since our comparator only looks at name.\n    return new NamedNode(indexValue, __EMPTY_NODE);\n  }\n\n  /**\n   * @returns String representation for inclusion in a query spec\n   */\n  toString(): string {\n    return '.key';\n  }\n}\n\nexport const KEY_INDEX = new KeyIndex();\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Implementation of an immutable SortedMap using a Left-leaning\n * Red-Black Tree, adapted from the implementation in Mugs\n * (http://mads379.github.com/mugs/) by Mads Hartmann Jensen\n * (mads379\\@gmail.com).\n *\n * Original paper on Left-leaning Red-Black Trees:\n *   http://www.cs.princeton.edu/~rs/talks/LLRB/LLRB.pdf\n *\n * Invariant 1: No red node has a red child\n * Invariant 2: Every leaf path has the same number of black nodes\n * Invariant 3: Only the left child can be red (left leaning)\n */\n\n// TODO: There are some improvements I'd like to make to improve memory / perf:\n//  * Create two prototypes, LLRedNode and LLBlackNode, instead of storing a\n//    color property in every node.\n// TODO: It would also be good (and possibly necessary) to create a base\n// interface for LLRBNode and LLRBEmptyNode.\n\nexport type Comparator<K> = (key1: K, key2: K) => number;\n\n/**\n * An iterator over an LLRBNode.\n */\nexport class SortedMapIterator<K, V, T> {\n  private nodeStack_: Array<LLRBNode<K, V> | LLRBEmptyNode<K, V>> = [];\n\n  /**\n   * @param node - Node to iterate.\n   * @param isReverse_ - Whether or not to iterate in reverse\n   */\n  constructor(\n    node: LLRBNode<K, V> | LLRBEmptyNode<K, V>,\n    startKey: K | null,\n    comparator: Comparator<K>,\n    private isReverse_: boolean,\n    private resultGenerator_: ((k: K, v: V) => T) | null = null\n  ) {\n    let cmp = 1;\n    while (!node.isEmpty()) {\n      node = node as LLRBNode<K, V>;\n      cmp = startKey ? comparator(node.key, startKey) : 1;\n      // flip the comparison if we're going in reverse\n      if (isReverse_) {\n        cmp *= -1;\n      }\n\n      if (cmp < 0) {\n        // This node is less than our start key. ignore it\n        if (this.isReverse_) {\n          node = node.left;\n        } else {\n          node = node.right;\n        }\n      } else if (cmp === 0) {\n        // This node is exactly equal to our start key. Push it on the stack, but stop iterating;\n        this.nodeStack_.push(node);\n        break;\n      } else {\n        // This node is greater than our start key, add it to the stack and move to the next one\n        this.nodeStack_.push(node);\n        if (this.isReverse_) {\n          node = node.right;\n        } else {\n          node = node.left;\n        }\n      }\n    }\n  }\n\n  getNext(): T {\n    if (this.nodeStack_.length === 0) {\n      return null;\n    }\n\n    let node = this.nodeStack_.pop();\n    let result: T;\n    if (this.resultGenerator_) {\n      result = this.resultGenerator_(node.key, node.value);\n    } else {\n      result = { key: node.key, value: node.value } as unknown as T;\n    }\n\n    if (this.isReverse_) {\n      node = node.left;\n      while (!node.isEmpty()) {\n        this.nodeStack_.push(node);\n        node = node.right;\n      }\n    } else {\n      node = node.right;\n      while (!node.isEmpty()) {\n        this.nodeStack_.push(node);\n        node = node.left;\n      }\n    }\n\n    return result;\n  }\n\n  hasNext(): boolean {\n    return this.nodeStack_.length > 0;\n  }\n\n  peek(): T {\n    if (this.nodeStack_.length === 0) {\n      return null;\n    }\n\n    const node = this.nodeStack_[this.nodeStack_.length - 1];\n    if (this.resultGenerator_) {\n      return this.resultGenerator_(node.key, node.value);\n    } else {\n      return { key: node.key, value: node.value } as unknown as T;\n    }\n  }\n}\n\n/**\n * Represents a node in a Left-leaning Red-Black tree.\n */\nexport class LLRBNode<K, V> {\n  color: boolean;\n  left: LLRBNode<K, V> | LLRBEmptyNode<K, V>;\n  right: LLRBNode<K, V> | LLRBEmptyNode<K, V>;\n\n  /**\n   * @param key - Key associated with this node.\n   * @param value - Value associated with this node.\n   * @param color - Whether this node is red.\n   * @param left - Left child.\n   * @param right - Right child.\n   */\n  constructor(\n    public key: K,\n    public value: V,\n    color: boolean | null,\n    left?: LLRBNode<K, V> | LLRBEmptyNode<K, V> | null,\n    right?: LLRBNode<K, V> | LLRBEmptyNode<K, V> | null\n  ) {\n    this.color = color != null ? color : LLRBNode.RED;\n    this.left =\n      left != null ? left : (SortedMap.EMPTY_NODE as LLRBEmptyNode<K, V>);\n    this.right =\n      right != null ? right : (SortedMap.EMPTY_NODE as LLRBEmptyNode<K, V>);\n  }\n\n  static RED = true;\n  static BLACK = false;\n\n  /**\n   * Returns a copy of the current node, optionally replacing pieces of it.\n   *\n   * @param key - New key for the node, or null.\n   * @param value - New value for the node, or null.\n   * @param color - New color for the node, or null.\n   * @param left - New left child for the node, or null.\n   * @param right - New right child for the node, or null.\n   * @returns The node copy.\n   */\n  copy(\n    key: K | null,\n    value: V | null,\n    color: boolean | null,\n    left: LLRBNode<K, V> | LLRBEmptyNode<K, V> | null,\n    right: LLRBNode<K, V> | LLRBEmptyNode<K, V> | null\n  ): LLRBNode<K, V> {\n    return new LLRBNode(\n      key != null ? key : this.key,\n      value != null ? value : this.value,\n      color != null ? color : this.color,\n      left != null ? left : this.left,\n      right != null ? right : this.right\n    );\n  }\n\n  /**\n   * @returns The total number of nodes in the tree.\n   */\n  count(): number {\n    return this.left.count() + 1 + this.right.count();\n  }\n\n  /**\n   * @returns True if the tree is empty.\n   */\n  isEmpty(): boolean {\n    return false;\n  }\n\n  /**\n   * Traverses the tree in key order and calls the specified action function\n   * for each node.\n   *\n   * @param action - Callback function to be called for each\n   *   node.  If it returns true, traversal is aborted.\n   * @returns The first truthy value returned by action, or the last falsey\n   *   value returned by action\n   */\n  inorderTraversal(action: (k: K, v: V) => unknown): boolean {\n    return (\n      this.left.inorderTraversal(action) ||\n      !!action(this.key, this.value) ||\n      this.right.inorderTraversal(action)\n    );\n  }\n\n  /**\n   * Traverses the tree in reverse key order and calls the specified action function\n   * for each node.\n   *\n   * @param action - Callback function to be called for each\n   * node.  If it returns true, traversal is aborted.\n   * @returns True if traversal was aborted.\n   */\n  reverseTraversal(action: (k: K, v: V) => void): boolean {\n    return (\n      this.right.reverseTraversal(action) ||\n      action(this.key, this.value) ||\n      this.left.reverseTraversal(action)\n    );\n  }\n\n  /**\n   * @returns The minimum node in the tree.\n   */\n  private min_(): LLRBNode<K, V> {\n    if (this.left.isEmpty()) {\n      return this;\n    } else {\n      return (this.left as LLRBNode<K, V>).min_();\n    }\n  }\n\n  /**\n   * @returns The maximum key in the tree.\n   */\n  minKey(): K {\n    return this.min_().key;\n  }\n\n  /**\n   * @returns The maximum key in the tree.\n   */\n  maxKey(): K {\n    if (this.right.isEmpty()) {\n      return this.key;\n    } else {\n      return this.right.maxKey();\n    }\n  }\n\n  /**\n   * @param key - Key to insert.\n   * @param value - Value to insert.\n   * @param comparator - Comparator.\n   * @returns New tree, with the key/value added.\n   */\n  insert(key: K, value: V, comparator: Comparator<K>): LLRBNode<K, V> {\n    let n: LLRBNode<K, V> = this;\n    const cmp = comparator(key, n.key);\n    if (cmp < 0) {\n      n = n.copy(null, null, null, n.left.insert(key, value, comparator), null);\n    } else if (cmp === 0) {\n      n = n.copy(null, value, null, null, null);\n    } else {\n      n = n.copy(\n        null,\n        null,\n        null,\n        null,\n        n.right.insert(key, value, comparator)\n      );\n    }\n    return n.fixUp_();\n  }\n\n  /**\n   * @returns New tree, with the minimum key removed.\n   */\n  private removeMin_(): LLRBNode<K, V> | LLRBEmptyNode<K, V> {\n    if (this.left.isEmpty()) {\n      return SortedMap.EMPTY_NODE as LLRBEmptyNode<K, V>;\n    }\n    let n: LLRBNode<K, V> = this;\n    if (!n.left.isRed_() && !n.left.left.isRed_()) {\n      n = n.moveRedLeft_();\n    }\n    n = n.copy(null, null, null, (n.left as LLRBNode<K, V>).removeMin_(), null);\n    return n.fixUp_();\n  }\n\n  /**\n   * @param key - The key of the item to remove.\n   * @param comparator - Comparator.\n   * @returns New tree, with the specified item removed.\n   */\n  remove(\n    key: K,\n    comparator: Comparator<K>\n  ): LLRBNode<K, V> | LLRBEmptyNode<K, V> {\n    let n, smallest;\n    n = this;\n    if (comparator(key, n.key) < 0) {\n      if (!n.left.isEmpty() && !n.left.isRed_() && !n.left.left.isRed_()) {\n        n = n.moveRedLeft_();\n      }\n      n = n.copy(null, null, null, n.left.remove(key, comparator), null);\n    } else {\n      if (n.left.isRed_()) {\n        n = n.rotateRight_();\n      }\n      if (!n.right.isEmpty() && !n.right.isRed_() && !n.right.left.isRed_()) {\n        n = n.moveRedRight_();\n      }\n      if (comparator(key, n.key) === 0) {\n        if (n.right.isEmpty()) {\n          return SortedMap.EMPTY_NODE as LLRBEmptyNode<K, V>;\n        } else {\n          smallest = (n.right as LLRBNode<K, V>).min_();\n          n = n.copy(\n            smallest.key,\n            smallest.value,\n            null,\n            null,\n            (n.right as LLRBNode<K, V>).removeMin_()\n          );\n        }\n      }\n      n = n.copy(null, null, null, null, n.right.remove(key, comparator));\n    }\n    return n.fixUp_();\n  }\n\n  /**\n   * @returns Whether this is a RED node.\n   */\n  isRed_(): boolean {\n    return this.color;\n  }\n\n  /**\n   * @returns New tree after performing any needed rotations.\n   */\n  private fixUp_(): LLRBNode<K, V> {\n    let n: LLRBNode<K, V> = this;\n    if (n.right.isRed_() && !n.left.isRed_()) {\n      n = n.rotateLeft_();\n    }\n    if (n.left.isRed_() && n.left.left.isRed_()) {\n      n = n.rotateRight_();\n    }\n    if (n.left.isRed_() && n.right.isRed_()) {\n      n = n.colorFlip_();\n    }\n    return n;\n  }\n\n  /**\n   * @returns New tree, after moveRedLeft.\n   */\n  private moveRedLeft_(): LLRBNode<K, V> {\n    let n = this.colorFlip_();\n    if (n.right.left.isRed_()) {\n      n = n.copy(\n        null,\n        null,\n        null,\n        null,\n        (n.right as LLRBNode<K, V>).rotateRight_()\n      );\n      n = n.rotateLeft_();\n      n = n.colorFlip_();\n    }\n    return n;\n  }\n\n  /**\n   * @returns New tree, after moveRedRight.\n   */\n  private moveRedRight_(): LLRBNode<K, V> {\n    let n = this.colorFlip_();\n    if (n.left.left.isRed_()) {\n      n = n.rotateRight_();\n      n = n.colorFlip_();\n    }\n    return n;\n  }\n\n  /**\n   * @returns New tree, after rotateLeft.\n   */\n  private rotateLeft_(): LLRBNode<K, V> {\n    const nl = this.copy(null, null, LLRBNode.RED, null, this.right.left);\n    return this.right.copy(null, null, this.color, nl, null) as LLRBNode<K, V>;\n  }\n\n  /**\n   * @returns New tree, after rotateRight.\n   */\n  private rotateRight_(): LLRBNode<K, V> {\n    const nr = this.copy(null, null, LLRBNode.RED, this.left.right, null);\n    return this.left.copy(null, null, this.color, null, nr) as LLRBNode<K, V>;\n  }\n\n  /**\n   * @returns Newt ree, after colorFlip.\n   */\n  private colorFlip_(): LLRBNode<K, V> {\n    const left = this.left.copy(null, null, !this.left.color, null, null);\n    const right = this.right.copy(null, null, !this.right.color, null, null);\n    return this.copy(null, null, !this.color, left, right);\n  }\n\n  /**\n   * For testing.\n   *\n   * @returns True if all is well.\n   */\n  private checkMaxDepth_(): boolean {\n    const blackDepth = this.check_();\n    return Math.pow(2.0, blackDepth) <= this.count() + 1;\n  }\n\n  check_(): number {\n    if (this.isRed_() && this.left.isRed_()) {\n      throw new Error(\n        'Red node has red child(' + this.key + ',' + this.value + ')'\n      );\n    }\n    if (this.right.isRed_()) {\n      throw new Error(\n        'Right child of (' + this.key + ',' + this.value + ') is red'\n      );\n    }\n    const blackDepth = this.left.check_();\n    if (blackDepth !== this.right.check_()) {\n      throw new Error('Black depths differ');\n    } else {\n      return blackDepth + (this.isRed_() ? 0 : 1);\n    }\n  }\n}\n\n/**\n * Represents an empty node (a leaf node in the Red-Black Tree).\n */\nexport class LLRBEmptyNode<K, V> {\n  key: K;\n  value: V;\n  left: LLRBNode<K, V> | LLRBEmptyNode<K, V>;\n  right: LLRBNode<K, V> | LLRBEmptyNode<K, V>;\n  color: boolean;\n\n  /**\n   * Returns a copy of the current node.\n   *\n   * @returns The node copy.\n   */\n  copy(\n    key: K | null,\n    value: V | null,\n    color: boolean | null,\n    left: LLRBNode<K, V> | LLRBEmptyNode<K, V> | null,\n    right: LLRBNode<K, V> | LLRBEmptyNode<K, V> | null\n  ): LLRBEmptyNode<K, V> {\n    return this;\n  }\n\n  /**\n   * Returns a copy of the tree, with the specified key/value added.\n   *\n   * @param key - Key to be added.\n   * @param value - Value to be added.\n   * @param comparator - Comparator.\n   * @returns New tree, with item added.\n   */\n  insert(key: K, value: V, comparator: Comparator<K>): LLRBNode<K, V> {\n    return new LLRBNode(key, value, null);\n  }\n\n  /**\n   * Returns a copy of the tree, with the specified key removed.\n   *\n   * @param key - The key to remove.\n   * @param comparator - Comparator.\n   * @returns New tree, with item removed.\n   */\n  remove(key: K, comparator: Comparator<K>): LLRBEmptyNode<K, V> {\n    return this;\n  }\n\n  /**\n   * @returns The total number of nodes in the tree.\n   */\n  count(): number {\n    return 0;\n  }\n\n  /**\n   * @returns True if the tree is empty.\n   */\n  isEmpty(): boolean {\n    return true;\n  }\n\n  /**\n   * Traverses the tree in key order and calls the specified action function\n   * for each node.\n   *\n   * @param action - Callback function to be called for each\n   * node.  If it returns true, traversal is aborted.\n   * @returns True if traversal was aborted.\n   */\n  inorderTraversal(action: (k: K, v: V) => unknown): boolean {\n    return false;\n  }\n\n  /**\n   * Traverses the tree in reverse key order and calls the specified action function\n   * for each node.\n   *\n   * @param action - Callback function to be called for each\n   * node.  If it returns true, traversal is aborted.\n   * @returns True if traversal was aborted.\n   */\n  reverseTraversal(action: (k: K, v: V) => void): boolean {\n    return false;\n  }\n\n  minKey(): null {\n    return null;\n  }\n\n  maxKey(): null {\n    return null;\n  }\n\n  check_(): number {\n    return 0;\n  }\n\n  /**\n   * @returns Whether this node is red.\n   */\n  isRed_() {\n    return false;\n  }\n}\n\n/**\n * An immutable sorted map implementation, based on a Left-leaning Red-Black\n * tree.\n */\nexport class SortedMap<K, V> {\n  /**\n   * Always use the same empty node, to reduce memory.\n   */\n  static EMPTY_NODE = new LLRBEmptyNode();\n\n  /**\n   * @param comparator_ - Key comparator.\n   * @param root_ - Optional root node for the map.\n   */\n  constructor(\n    private comparator_: Comparator<K>,\n    private root_:\n      | LLRBNode<K, V>\n      | LLRBEmptyNode<K, V> = SortedMap.EMPTY_NODE as LLRBEmptyNode<K, V>\n  ) {}\n\n  /**\n   * Returns a copy of the map, with the specified key/value added or replaced.\n   * (TODO: We should perhaps rename this method to 'put')\n   *\n   * @param key - Key to be added.\n   * @param value - Value to be added.\n   * @returns New map, with item added.\n   */\n  insert(key: K, value: V): SortedMap<K, V> {\n    return new SortedMap(\n      this.comparator_,\n      this.root_\n        .insert(key, value, this.comparator_)\n        .copy(null, null, LLRBNode.BLACK, null, null)\n    );\n  }\n\n  /**\n   * Returns a copy of the map, with the specified key removed.\n   *\n   * @param key - The key to remove.\n   * @returns New map, with item removed.\n   */\n  remove(key: K): SortedMap<K, V> {\n    return new SortedMap(\n      this.comparator_,\n      this.root_\n        .remove(key, this.comparator_)\n        .copy(null, null, LLRBNode.BLACK, null, null)\n    );\n  }\n\n  /**\n   * Returns the value of the node with the given key, or null.\n   *\n   * @param key - The key to look up.\n   * @returns The value of the node with the given key, or null if the\n   * key doesn't exist.\n   */\n  get(key: K): V | null {\n    let cmp;\n    let node = this.root_;\n    while (!node.isEmpty()) {\n      cmp = this.comparator_(key, node.key);\n      if (cmp === 0) {\n        return node.value;\n      } else if (cmp < 0) {\n        node = node.left;\n      } else if (cmp > 0) {\n        node = node.right;\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Returns the key of the item *before* the specified key, or null if key is the first item.\n   * @param key - The key to find the predecessor of\n   * @returns The predecessor key.\n   */\n  getPredecessorKey(key: K): K | null {\n    let cmp,\n      node = this.root_,\n      rightParent = null;\n    while (!node.isEmpty()) {\n      cmp = this.comparator_(key, node.key);\n      if (cmp === 0) {\n        if (!node.left.isEmpty()) {\n          node = node.left;\n          while (!node.right.isEmpty()) {\n            node = node.right;\n          }\n          return node.key;\n        } else if (rightParent) {\n          return rightParent.key;\n        } else {\n          return null; // first item.\n        }\n      } else if (cmp < 0) {\n        node = node.left;\n      } else if (cmp > 0) {\n        rightParent = node;\n        node = node.right;\n      }\n    }\n\n    throw new Error(\n      'Attempted to find predecessor key for a nonexistent key.  What gives?'\n    );\n  }\n\n  /**\n   * @returns True if the map is empty.\n   */\n  isEmpty(): boolean {\n    return this.root_.isEmpty();\n  }\n\n  /**\n   * @returns The total number of nodes in the map.\n   */\n  count(): number {\n    return this.root_.count();\n  }\n\n  /**\n   * @returns The minimum key in the map.\n   */\n  minKey(): K | null {\n    return this.root_.minKey();\n  }\n\n  /**\n   * @returns The maximum key in the map.\n   */\n  maxKey(): K | null {\n    return this.root_.maxKey();\n  }\n\n  /**\n   * Traverses the map in key order and calls the specified action function\n   * for each key/value pair.\n   *\n   * @param action - Callback function to be called\n   * for each key/value pair.  If action returns true, traversal is aborted.\n   * @returns The first truthy value returned by action, or the last falsey\n   *   value returned by action\n   */\n  inorderTraversal(action: (k: K, v: V) => unknown): boolean {\n    return this.root_.inorderTraversal(action);\n  }\n\n  /**\n   * Traverses the map in reverse key order and calls the specified action function\n   * for each key/value pair.\n   *\n   * @param action - Callback function to be called\n   * for each key/value pair.  If action returns true, traversal is aborted.\n   * @returns True if the traversal was aborted.\n   */\n  reverseTraversal(action: (k: K, v: V) => void): boolean {\n    return this.root_.reverseTraversal(action);\n  }\n\n  /**\n   * Returns an iterator over the SortedMap.\n   * @returns The iterator.\n   */\n  getIterator<T>(\n    resultGenerator?: (k: K, v: V) => T\n  ): SortedMapIterator<K, V, T> {\n    return new SortedMapIterator(\n      this.root_,\n      null,\n      this.comparator_,\n      false,\n      resultGenerator\n    );\n  }\n\n  getIteratorFrom<T>(\n    key: K,\n    resultGenerator?: (k: K, v: V) => T\n  ): SortedMapIterator<K, V, T> {\n    return new SortedMapIterator(\n      this.root_,\n      key,\n      this.comparator_,\n      false,\n      resultGenerator\n    );\n  }\n\n  getReverseIteratorFrom<T>(\n    key: K,\n    resultGenerator?: (k: K, v: V) => T\n  ): SortedMapIterator<K, V, T> {\n    return new SortedMapIterator(\n      this.root_,\n      key,\n      this.comparator_,\n      true,\n      resultGenerator\n    );\n  }\n\n  getReverseIterator<T>(\n    resultGenerator?: (k: K, v: V) => T\n  ): SortedMapIterator<K, V, T> {\n    return new SortedMapIterator(\n      this.root_,\n      null,\n      this.comparator_,\n      true,\n      resultGenerator\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { nameCompare } from '../util/util';\n\nimport { NamedNode } from './Node';\n\nexport function NAME_ONLY_COMPARATOR(left: NamedNode, right: NamedNode) {\n  return nameCompare(left.name, right.name);\n}\n\nexport function NAME_COMPARATOR(left: string, right: string) {\n  return nameCompare(left, right);\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, contains } from '@firebase/util';\n\nimport { Indexable } from '../util/misc';\nimport { doubleToIEEE754String } from '../util/util';\n\nimport { Node } from './Node';\n\nlet MAX_NODE: Node;\n\nexport function setMaxNode(val: Node) {\n  MAX_NODE = val;\n}\n\nexport const priorityHashText = function (priority: string | number): string {\n  if (typeof priority === 'number') {\n    return 'number:' + doubleToIEEE754String(priority);\n  } else {\n    return 'string:' + priority;\n  }\n};\n\n/**\n * Validates that a priority snapshot Node is valid.\n */\nexport const validatePriorityNode = function (priorityNode: Node) {\n  if (priorityNode.isLeafNode()) {\n    const val = priorityNode.val();\n    assert(\n      typeof val === 'string' ||\n        typeof val === 'number' ||\n        (typeof val === 'object' && contains(val as Indexable, '.sv')),\n      'Priority must be a string or number.'\n    );\n  } else {\n    assert(\n      priorityNode === MAX_NODE || priorityNode.isEmpty(),\n      'priority of unexpected type.'\n    );\n  }\n  // Don't call getPriority() on MAX_NODE to avoid hitting assertion.\n  assert(\n    priorityNode === MAX_NODE || priorityNode.getPriority().isEmpty(),\n    \"Priority nodes can't have a priority of their own.\"\n  );\n};\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { Indexable } from '../util/misc';\nimport {\n  Path,\n  pathGetFront,\n  pathGetLength,\n  pathIsEmpty,\n  pathPopFront\n} from '../util/Path';\nimport { doubleToIEEE754String, sha1 } from '../util/util';\n\nimport { ChildrenNodeConstructor } from './ChildrenNode';\nimport { Index } from './indexes/Index';\nimport { Node } from './Node';\nimport { priorityHashText, validatePriorityNode } from './snap';\n\nlet __childrenNodeConstructor: ChildrenNodeConstructor;\n\n/**\n * LeafNode is a class for storing leaf nodes in a DataSnapshot.  It\n * implements Node and stores the value of the node (a string,\n * number, or boolean) accessible via getValue().\n */\nexport class LeafNode implements Node {\n  static set __childrenNodeConstructor(val: ChildrenNodeConstructor) {\n    __childrenNodeConstructor = val;\n  }\n\n  static get __childrenNodeConstructor() {\n    return __childrenNodeConstructor;\n  }\n\n  /**\n   * The sort order for comparing leaf nodes of different types. If two leaf nodes have\n   * the same type, the comparison falls back to their value\n   */\n  static VALUE_TYPE_ORDER = ['object', 'boolean', 'number', 'string'];\n\n  private lazyHash_: string | null = null;\n\n  /**\n   * @param value_ - The value to store in this leaf node. The object type is\n   * possible in the event of a deferred value\n   * @param priorityNode_ - The priority of this node.\n   */\n  constructor(\n    private readonly value_: string | number | boolean | Indexable,\n    private priorityNode_: Node = LeafNode.__childrenNodeConstructor.EMPTY_NODE\n  ) {\n    assert(\n      this.value_ !== undefined && this.value_ !== null,\n      \"LeafNode shouldn't be created with null/undefined value.\"\n    );\n\n    validatePriorityNode(this.priorityNode_);\n  }\n\n  /** @inheritDoc */\n  isLeafNode(): boolean {\n    return true;\n  }\n\n  /** @inheritDoc */\n  getPriority(): Node {\n    return this.priorityNode_;\n  }\n\n  /** @inheritDoc */\n  updatePriority(newPriorityNode: Node): Node {\n    return new LeafNode(this.value_, newPriorityNode);\n  }\n\n  /** @inheritDoc */\n  getImmediateChild(childName: string): Node {\n    // Hack to treat priority as a regular child\n    if (childName === '.priority') {\n      return this.priorityNode_;\n    } else {\n      return LeafNode.__childrenNodeConstructor.EMPTY_NODE;\n    }\n  }\n\n  /** @inheritDoc */\n  getChild(path: Path): Node {\n    if (pathIsEmpty(path)) {\n      return this;\n    } else if (pathGetFront(path) === '.priority') {\n      return this.priorityNode_;\n    } else {\n      return LeafNode.__childrenNodeConstructor.EMPTY_NODE;\n    }\n  }\n  hasChild(): boolean {\n    return false;\n  }\n\n  /** @inheritDoc */\n  getPredecessorChildName(childName: string, childNode: Node): null {\n    return null;\n  }\n\n  /** @inheritDoc */\n  updateImmediateChild(childName: string, newChildNode: Node): Node {\n    if (childName === '.priority') {\n      return this.updatePriority(newChildNode);\n    } else if (newChildNode.isEmpty() && childName !== '.priority') {\n      return this;\n    } else {\n      return LeafNode.__childrenNodeConstructor.EMPTY_NODE.updateImmediateChild(\n        childName,\n        newChildNode\n      ).updatePriority(this.priorityNode_);\n    }\n  }\n\n  /** @inheritDoc */\n  updateChild(path: Path, newChildNode: Node): Node {\n    const front = pathGetFront(path);\n    if (front === null) {\n      return newChildNode;\n    } else if (newChildNode.isEmpty() && front !== '.priority') {\n      return this;\n    } else {\n      assert(\n        front !== '.priority' || pathGetLength(path) === 1,\n        '.priority must be the last token in a path'\n      );\n\n      return this.updateImmediateChild(\n        front,\n        LeafNode.__childrenNodeConstructor.EMPTY_NODE.updateChild(\n          pathPopFront(path),\n          newChildNode\n        )\n      );\n    }\n  }\n\n  /** @inheritDoc */\n  isEmpty(): boolean {\n    return false;\n  }\n\n  /** @inheritDoc */\n  numChildren(): number {\n    return 0;\n  }\n\n  /** @inheritDoc */\n  forEachChild(index: Index, action: (s: string, n: Node) => void): boolean {\n    return false;\n  }\n  val(exportFormat?: boolean): {} {\n    if (exportFormat && !this.getPriority().isEmpty()) {\n      return {\n        '.value': this.getValue(),\n        '.priority': this.getPriority().val()\n      };\n    } else {\n      return this.getValue();\n    }\n  }\n\n  /** @inheritDoc */\n  hash(): string {\n    if (this.lazyHash_ === null) {\n      let toHash = '';\n      if (!this.priorityNode_.isEmpty()) {\n        toHash +=\n          'priority:' +\n          priorityHashText(this.priorityNode_.val() as number | string) +\n          ':';\n      }\n\n      const type = typeof this.value_;\n      toHash += type + ':';\n      if (type === 'number') {\n        toHash += doubleToIEEE754String(this.value_ as number);\n      } else {\n        toHash += this.value_;\n      }\n      this.lazyHash_ = sha1(toHash);\n    }\n    return this.lazyHash_;\n  }\n\n  /**\n   * Returns the value of the leaf node.\n   * @returns The value of the node.\n   */\n  getValue(): Indexable | string | number | boolean {\n    return this.value_;\n  }\n  compareTo(other: Node): number {\n    if (other === LeafNode.__childrenNodeConstructor.EMPTY_NODE) {\n      return 1;\n    } else if (other instanceof LeafNode.__childrenNodeConstructor) {\n      return -1;\n    } else {\n      assert(other.isLeafNode(), 'Unknown node type');\n      return this.compareToLeafNode_(other as LeafNode);\n    }\n  }\n\n  /**\n   * Comparison specifically for two leaf nodes\n   */\n  private compareToLeafNode_(otherLeaf: LeafNode): number {\n    const otherLeafType = typeof otherLeaf.value_;\n    const thisLeafType = typeof this.value_;\n    const otherIndex = LeafNode.VALUE_TYPE_ORDER.indexOf(otherLeafType);\n    const thisIndex = LeafNode.VALUE_TYPE_ORDER.indexOf(thisLeafType);\n    assert(otherIndex >= 0, 'Unknown leaf type: ' + otherLeafType);\n    assert(thisIndex >= 0, 'Unknown leaf type: ' + thisLeafType);\n    if (otherIndex === thisIndex) {\n      // Same type, compare values\n      if (thisLeafType === 'object') {\n        // Deferred value nodes are all equal, but we should also never get to this point...\n        return 0;\n      } else {\n        // Note that this works because true > false, all others are number or string comparisons\n        if (this.value_ < otherLeaf.value_) {\n          return -1;\n        } else if (this.value_ === otherLeaf.value_) {\n          return 0;\n        } else {\n          return 1;\n        }\n      }\n    } else {\n      return thisIndex - otherIndex;\n    }\n  }\n  withIndex(): Node {\n    return this;\n  }\n  isIndexed(): boolean {\n    return true;\n  }\n  equals(other: Node): boolean {\n    if (other === this) {\n      return true;\n    } else if (other.isLeafNode()) {\n      const otherLeaf = other as LeafNode;\n      return (\n        this.value_ === otherLeaf.value_ &&\n        this.priorityNode_.equals(otherLeaf.priorityNode_)\n      );\n    } else {\n      return false;\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { nameCompare, MAX_NAME } from '../../util/util';\nimport { LeafNode } from '../LeafNode';\nimport { NamedNode, Node } from '../Node';\n\nimport { Index } from './Index';\n\nlet nodeFromJSON: (a: unknown) => Node;\nlet MAX_NODE: Node;\n\nexport function setNodeFromJSON(val: (a: unknown) => Node) {\n  nodeFromJSON = val;\n}\n\nexport function setMaxNode(val: Node) {\n  MAX_NODE = val;\n}\n\nexport class PriorityIndex extends Index {\n  compare(a: NamedNode, b: NamedNode): number {\n    const aPriority = a.node.getPriority();\n    const bPriority = b.node.getPriority();\n    const indexCmp = aPriority.compareTo(bPriority);\n    if (indexCmp === 0) {\n      return nameCompare(a.name, b.name);\n    } else {\n      return indexCmp;\n    }\n  }\n  isDefinedOn(node: Node): boolean {\n    return !node.getPriority().isEmpty();\n  }\n  indexedValueChanged(oldNode: Node, newNode: Node): boolean {\n    return !oldNode.getPriority().equals(newNode.getPriority());\n  }\n  minPost(): NamedNode {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return (NamedNode as any).MIN;\n  }\n  maxPost(): NamedNode {\n    return new NamedNode(MAX_NAME, new LeafNode('[PRIORITY-POST]', MAX_NODE));\n  }\n\n  makePost(indexValue: unknown, name: string): NamedNode {\n    const priorityNode = nodeFromJSON(indexValue);\n    return new NamedNode(name, new LeafNode('[PRIORITY-POST]', priorityNode));\n  }\n\n  /**\n   * @returns String representation for inclusion in a query spec\n   */\n  toString(): string {\n    return '.priority';\n  }\n}\n\nexport const PRIORITY_INDEX = new PriorityIndex();\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { LLRBNode, SortedMap } from '../util/SortedMap';\n\nimport { NamedNode } from './Node';\n\nconst LOG_2 = Math.log(2);\n\nclass Base12Num {\n  count: number;\n  private current_: number;\n  private bits_: number;\n\n  constructor(length: number) {\n    const logBase2 = (num: number) =>\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      parseInt((Math.log(num) / LOG_2) as any, 10);\n    const bitMask = (bits: number) => parseInt(Array(bits + 1).join('1'), 2);\n    this.count = logBase2(length + 1);\n    this.current_ = this.count - 1;\n    const mask = bitMask(this.count);\n    this.bits_ = (length + 1) & mask;\n  }\n\n  nextBitIsOne(): boolean {\n    //noinspection JSBitwiseOperatorUsage\n    const result = !(this.bits_ & (0x1 << this.current_));\n    this.current_--;\n    return result;\n  }\n}\n\n/**\n * Takes a list of child nodes and constructs a SortedSet using the given comparison\n * function\n *\n * Uses the algorithm described in the paper linked here:\n * http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.46.1458\n *\n * @param childList - Unsorted list of children\n * @param cmp - The comparison method to be used\n * @param keyFn - An optional function to extract K from a node wrapper, if K's\n * type is not NamedNode\n * @param mapSortFn - An optional override for comparator used by the generated sorted map\n */\nexport const buildChildSet = function <K, V>(\n  childList: NamedNode[],\n  cmp: (a: NamedNode, b: NamedNode) => number,\n  keyFn?: (a: NamedNode) => K,\n  mapSortFn?: (a: K, b: K) => number\n): SortedMap<K, V> {\n  childList.sort(cmp);\n\n  const buildBalancedTree = function (\n    low: number,\n    high: number\n  ): LLRBNode<K, V> | null {\n    const length = high - low;\n    let namedNode: NamedNode;\n    let key: K;\n    if (length === 0) {\n      return null;\n    } else if (length === 1) {\n      namedNode = childList[low];\n      key = keyFn ? keyFn(namedNode) : (namedNode as unknown as K);\n      return new LLRBNode(\n        key,\n        namedNode.node as unknown as V,\n        LLRBNode.BLACK,\n        null,\n        null\n      );\n    } else {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      const middle = parseInt((length / 2) as any, 10) + low;\n      const left = buildBalancedTree(low, middle);\n      const right = buildBalancedTree(middle + 1, high);\n      namedNode = childList[middle];\n      key = keyFn ? keyFn(namedNode) : (namedNode as unknown as K);\n      return new LLRBNode(\n        key,\n        namedNode.node as unknown as V,\n        LLRBNode.BLACK,\n        left,\n        right\n      );\n    }\n  };\n\n  const buildFrom12Array = function (base12: Base12Num): LLRBNode<K, V> {\n    let node: LLRBNode<K, V> = null;\n    let root = null;\n    let index = childList.length;\n\n    const buildPennant = function (chunkSize: number, color: boolean) {\n      const low = index - chunkSize;\n      const high = index;\n      index -= chunkSize;\n      const childTree = buildBalancedTree(low + 1, high);\n      const namedNode = childList[low];\n      const key: K = keyFn ? keyFn(namedNode) : (namedNode as unknown as K);\n      attachPennant(\n        new LLRBNode(\n          key,\n          namedNode.node as unknown as V,\n          color,\n          null,\n          childTree\n        )\n      );\n    };\n\n    const attachPennant = function (pennant: LLRBNode<K, V>) {\n      if (node) {\n        node.left = pennant;\n        node = pennant;\n      } else {\n        root = pennant;\n        node = pennant;\n      }\n    };\n\n    for (let i = 0; i < base12.count; ++i) {\n      const isOne = base12.nextBitIsOne();\n      // The number of nodes taken in each slice is 2^(arr.length - (i + 1))\n      const chunkSize = Math.pow(2, base12.count - (i + 1));\n      if (isOne) {\n        buildPennant(chunkSize, LLRBNode.BLACK);\n      } else {\n        // current == 2\n        buildPennant(chunkSize, LLRBNode.BLACK);\n        buildPennant(chunkSize, LLRBNode.RED);\n      }\n    }\n    return root;\n  };\n\n  const base12 = new Base12Num(childList.length);\n  const root = buildFrom12Array(base12);\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  return new SortedMap<K, V>(mapSortFn || (cmp as any), root);\n};\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, contains, map, safeGet } from '@firebase/util';\n\nimport { SortedMap } from '../util/SortedMap';\n\nimport { buildChildSet } from './childSet';\nimport { Index } from './indexes/Index';\nimport { KEY_INDEX } from './indexes/KeyIndex';\nimport { PRIORITY_INDEX } from './indexes/PriorityIndex';\nimport { NamedNode, Node } from './Node';\n\nlet _defaultIndexMap: IndexMap;\n\nconst fallbackObject = {};\n\nexport class IndexMap {\n  /**\n   * The default IndexMap for nodes without a priority\n   */\n  static get Default(): IndexMap {\n    assert(\n      fallbackObject && PRIORITY_INDEX,\n      'ChildrenNode.ts has not been loaded'\n    );\n    _defaultIndexMap =\n      _defaultIndexMap ||\n      new IndexMap(\n        { '.priority': fallbackObject },\n        { '.priority': PRIORITY_INDEX }\n      );\n    return _defaultIndexMap;\n  }\n\n  constructor(\n    private indexes_: {\n      [k: string]: SortedMap<NamedNode, Node> | /*FallbackType*/ object;\n    },\n    private indexSet_: { [k: string]: Index }\n  ) {}\n\n  get(indexKey: string): SortedMap<NamedNode, Node> | null {\n    const sortedMap = safeGet(this.indexes_, indexKey);\n    if (!sortedMap) {\n      throw new Error('No index defined for ' + indexKey);\n    }\n\n    if (sortedMap instanceof SortedMap) {\n      return sortedMap;\n    } else {\n      // The index exists, but it falls back to just name comparison. Return null so that the calling code uses the\n      // regular child map\n      return null;\n    }\n  }\n\n  hasIndex(indexDefinition: Index): boolean {\n    return contains(this.indexSet_, indexDefinition.toString());\n  }\n\n  addIndex(\n    indexDefinition: Index,\n    existingChildren: SortedMap<string, Node>\n  ): IndexMap {\n    assert(\n      indexDefinition !== KEY_INDEX,\n      \"KeyIndex always exists and isn't meant to be added to the IndexMap.\"\n    );\n    const childList = [];\n    let sawIndexedValue = false;\n    const iter = existingChildren.getIterator(NamedNode.Wrap);\n    let next = iter.getNext();\n    while (next) {\n      sawIndexedValue =\n        sawIndexedValue || indexDefinition.isDefinedOn(next.node);\n      childList.push(next);\n      next = iter.getNext();\n    }\n    let newIndex;\n    if (sawIndexedValue) {\n      newIndex = buildChildSet(childList, indexDefinition.getCompare());\n    } else {\n      newIndex = fallbackObject;\n    }\n    const indexName = indexDefinition.toString();\n    const newIndexSet = { ...this.indexSet_ };\n    newIndexSet[indexName] = indexDefinition;\n    const newIndexes = { ...this.indexes_ };\n    newIndexes[indexName] = newIndex;\n    return new IndexMap(newIndexes, newIndexSet);\n  }\n\n  /**\n   * Ensure that this node is properly tracked in any indexes that we're maintaining\n   */\n  addToIndexes(\n    namedNode: NamedNode,\n    existingChildren: SortedMap<string, Node>\n  ): IndexMap {\n    const newIndexes = map(\n      this.indexes_,\n      (indexedChildren: SortedMap<NamedNode, Node>, indexName: string) => {\n        const index = safeGet(this.indexSet_, indexName);\n        assert(index, 'Missing index implementation for ' + indexName);\n        if (indexedChildren === fallbackObject) {\n          // Check to see if we need to index everything\n          if (index.isDefinedOn(namedNode.node)) {\n            // We need to build this index\n            const childList = [];\n            const iter = existingChildren.getIterator(NamedNode.Wrap);\n            let next = iter.getNext();\n            while (next) {\n              if (next.name !== namedNode.name) {\n                childList.push(next);\n              }\n              next = iter.getNext();\n            }\n            childList.push(namedNode);\n            return buildChildSet(childList, index.getCompare());\n          } else {\n            // No change, this remains a fallback\n            return fallbackObject;\n          }\n        } else {\n          const existingSnap = existingChildren.get(namedNode.name);\n          let newChildren = indexedChildren;\n          if (existingSnap) {\n            newChildren = newChildren.remove(\n              new NamedNode(namedNode.name, existingSnap)\n            );\n          }\n          return newChildren.insert(namedNode, namedNode.node);\n        }\n      }\n    );\n    return new IndexMap(newIndexes, this.indexSet_);\n  }\n\n  /**\n   * Create a new IndexMap instance with the given value removed\n   */\n  removeFromIndexes(\n    namedNode: NamedNode,\n    existingChildren: SortedMap<string, Node>\n  ): IndexMap {\n    const newIndexes = map(\n      this.indexes_,\n      (indexedChildren: SortedMap<NamedNode, Node>) => {\n        if (indexedChildren === fallbackObject) {\n          // This is the fallback. Just return it, nothing to do in this case\n          return indexedChildren;\n        } else {\n          const existingSnap = existingChildren.get(namedNode.name);\n          if (existingSnap) {\n            return indexedChildren.remove(\n              new NamedNode(namedNode.name, existingSnap)\n            );\n          } else {\n            // No record of this child\n            return indexedChildren;\n          }\n        }\n      }\n    );\n    return new IndexMap(newIndexes, this.indexSet_);\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { Path, pathGetFront, pathGetLength, pathPopFront } from '../util/Path';\nimport { SortedMap, SortedMapIterator } from '../util/SortedMap';\nimport { MAX_NAME, MIN_NAME, sha1 } from '../util/util';\n\nimport { NAME_COMPARATOR } from './comparators';\nimport { Index } from './indexes/Index';\nimport { KEY_INDEX, KeyIndex } from './indexes/KeyIndex';\nimport {\n  PRIORITY_INDEX,\n  setMaxNode as setPriorityMaxNode\n} from './indexes/PriorityIndex';\nimport { IndexMap } from './IndexMap';\nimport { LeafNode } from './LeafNode';\nimport { NamedNode, Node } from './Node';\nimport { priorityHashText, setMaxNode, validatePriorityNode } from './snap';\n\nexport interface ChildrenNodeConstructor {\n  new (\n    children_: SortedMap<string, Node>,\n    priorityNode_: Node | null,\n    indexMap_: IndexMap\n  ): ChildrenNode;\n  EMPTY_NODE: ChildrenNode;\n}\n\n// TODO: For memory savings, don't store priorityNode_ if it's empty.\n\nlet EMPTY_NODE: ChildrenNode;\n\n/**\n * ChildrenNode is a class for storing internal nodes in a DataSnapshot\n * (i.e. nodes with children).  It implements Node and stores the\n * list of children in the children property, sorted by child name.\n */\nexport class ChildrenNode implements Node {\n  private lazyHash_: string | null = null;\n\n  static get EMPTY_NODE(): ChildrenNode {\n    return (\n      EMPTY_NODE ||\n      (EMPTY_NODE = new ChildrenNode(\n        new SortedMap<string, Node>(NAME_COMPARATOR),\n        null,\n        IndexMap.Default\n      ))\n    );\n  }\n\n  /**\n   * @param children_ - List of children of this node..\n   * @param priorityNode_ - The priority of this node (as a snapshot node).\n   */\n  constructor(\n    private readonly children_: SortedMap<string, Node>,\n    private readonly priorityNode_: Node | null,\n    private indexMap_: IndexMap\n  ) {\n    /**\n     * Note: The only reason we allow null priority is for EMPTY_NODE, since we can't use\n     * EMPTY_NODE as the priority of EMPTY_NODE.  We might want to consider making EMPTY_NODE its own\n     * class instead of an empty ChildrenNode.\n     */\n    if (this.priorityNode_) {\n      validatePriorityNode(this.priorityNode_);\n    }\n\n    if (this.children_.isEmpty()) {\n      assert(\n        !this.priorityNode_ || this.priorityNode_.isEmpty(),\n        'An empty node cannot have a priority'\n      );\n    }\n  }\n\n  /** @inheritDoc */\n  isLeafNode(): boolean {\n    return false;\n  }\n\n  /** @inheritDoc */\n  getPriority(): Node {\n    return this.priorityNode_ || EMPTY_NODE;\n  }\n\n  /** @inheritDoc */\n  updatePriority(newPriorityNode: Node): Node {\n    if (this.children_.isEmpty()) {\n      // Don't allow priorities on empty nodes\n      return this;\n    } else {\n      return new ChildrenNode(this.children_, newPriorityNode, this.indexMap_);\n    }\n  }\n\n  /** @inheritDoc */\n  getImmediateChild(childName: string): Node {\n    // Hack to treat priority as a regular child\n    if (childName === '.priority') {\n      return this.getPriority();\n    } else {\n      const child = this.children_.get(childName);\n      return child === null ? EMPTY_NODE : child;\n    }\n  }\n\n  /** @inheritDoc */\n  getChild(path: Path): Node {\n    const front = pathGetFront(path);\n    if (front === null) {\n      return this;\n    }\n\n    return this.getImmediateChild(front).getChild(pathPopFront(path));\n  }\n\n  /** @inheritDoc */\n  hasChild(childName: string): boolean {\n    return this.children_.get(childName) !== null;\n  }\n\n  /** @inheritDoc */\n  updateImmediateChild(childName: string, newChildNode: Node): Node {\n    assert(newChildNode, 'We should always be passing snapshot nodes');\n    if (childName === '.priority') {\n      return this.updatePriority(newChildNode);\n    } else {\n      const namedNode = new NamedNode(childName, newChildNode);\n      let newChildren, newIndexMap;\n      if (newChildNode.isEmpty()) {\n        newChildren = this.children_.remove(childName);\n        newIndexMap = this.indexMap_.removeFromIndexes(\n          namedNode,\n          this.children_\n        );\n      } else {\n        newChildren = this.children_.insert(childName, newChildNode);\n        newIndexMap = this.indexMap_.addToIndexes(namedNode, this.children_);\n      }\n\n      const newPriority = newChildren.isEmpty()\n        ? EMPTY_NODE\n        : this.priorityNode_;\n      return new ChildrenNode(newChildren, newPriority, newIndexMap);\n    }\n  }\n\n  /** @inheritDoc */\n  updateChild(path: Path, newChildNode: Node): Node {\n    const front = pathGetFront(path);\n    if (front === null) {\n      return newChildNode;\n    } else {\n      assert(\n        pathGetFront(path) !== '.priority' || pathGetLength(path) === 1,\n        '.priority must be the last token in a path'\n      );\n      const newImmediateChild = this.getImmediateChild(front).updateChild(\n        pathPopFront(path),\n        newChildNode\n      );\n      return this.updateImmediateChild(front, newImmediateChild);\n    }\n  }\n\n  /** @inheritDoc */\n  isEmpty(): boolean {\n    return this.children_.isEmpty();\n  }\n\n  /** @inheritDoc */\n  numChildren(): number {\n    return this.children_.count();\n  }\n\n  private static INTEGER_REGEXP_ = /^(0|[1-9]\\d*)$/;\n\n  /** @inheritDoc */\n  val(exportFormat?: boolean): object {\n    if (this.isEmpty()) {\n      return null;\n    }\n\n    const obj: { [k: string]: unknown } = {};\n    let numKeys = 0,\n      maxKey = 0,\n      allIntegerKeys = true;\n    this.forEachChild(PRIORITY_INDEX, (key: string, childNode: Node) => {\n      obj[key] = childNode.val(exportFormat);\n\n      numKeys++;\n      if (allIntegerKeys && ChildrenNode.INTEGER_REGEXP_.test(key)) {\n        maxKey = Math.max(maxKey, Number(key));\n      } else {\n        allIntegerKeys = false;\n      }\n    });\n\n    if (!exportFormat && allIntegerKeys && maxKey < 2 * numKeys) {\n      // convert to array.\n      const array: unknown[] = [];\n      // eslint-disable-next-line guard-for-in\n      for (const key in obj) {\n        array[key as unknown as number] = obj[key];\n      }\n\n      return array;\n    } else {\n      if (exportFormat && !this.getPriority().isEmpty()) {\n        obj['.priority'] = this.getPriority().val();\n      }\n      return obj;\n    }\n  }\n\n  /** @inheritDoc */\n  hash(): string {\n    if (this.lazyHash_ === null) {\n      let toHash = '';\n      if (!this.getPriority().isEmpty()) {\n        toHash +=\n          'priority:' +\n          priorityHashText(this.getPriority().val() as string | number) +\n          ':';\n      }\n\n      this.forEachChild(PRIORITY_INDEX, (key, childNode) => {\n        const childHash = childNode.hash();\n        if (childHash !== '') {\n          toHash += ':' + key + ':' + childHash;\n        }\n      });\n\n      this.lazyHash_ = toHash === '' ? '' : sha1(toHash);\n    }\n    return this.lazyHash_;\n  }\n\n  /** @inheritDoc */\n  getPredecessorChildName(\n    childName: string,\n    childNode: Node,\n    index: Index\n  ): string {\n    const idx = this.resolveIndex_(index);\n    if (idx) {\n      const predecessor = idx.getPredecessorKey(\n        new NamedNode(childName, childNode)\n      );\n      return predecessor ? predecessor.name : null;\n    } else {\n      return this.children_.getPredecessorKey(childName);\n    }\n  }\n\n  getFirstChildName(indexDefinition: Index): string | null {\n    const idx = this.resolveIndex_(indexDefinition);\n    if (idx) {\n      const minKey = idx.minKey();\n      return minKey && minKey.name;\n    } else {\n      return this.children_.minKey();\n    }\n  }\n\n  getFirstChild(indexDefinition: Index): NamedNode | null {\n    const minKey = this.getFirstChildName(indexDefinition);\n    if (minKey) {\n      return new NamedNode(minKey, this.children_.get(minKey));\n    } else {\n      return null;\n    }\n  }\n\n  /**\n   * Given an index, return the key name of the largest value we have, according to that index\n   */\n  getLastChildName(indexDefinition: Index): string | null {\n    const idx = this.resolveIndex_(indexDefinition);\n    if (idx) {\n      const maxKey = idx.maxKey();\n      return maxKey && maxKey.name;\n    } else {\n      return this.children_.maxKey();\n    }\n  }\n\n  getLastChild(indexDefinition: Index): NamedNode | null {\n    const maxKey = this.getLastChildName(indexDefinition);\n    if (maxKey) {\n      return new NamedNode(maxKey, this.children_.get(maxKey));\n    } else {\n      return null;\n    }\n  }\n  forEachChild(\n    index: Index,\n    action: (key: string, node: Node) => boolean | void\n  ): boolean {\n    const idx = this.resolveIndex_(index);\n    if (idx) {\n      return idx.inorderTraversal(wrappedNode => {\n        return action(wrappedNode.name, wrappedNode.node);\n      });\n    } else {\n      return this.children_.inorderTraversal(action);\n    }\n  }\n\n  getIterator(\n    indexDefinition: Index\n  ): SortedMapIterator<string | NamedNode, Node, NamedNode> {\n    return this.getIteratorFrom(indexDefinition.minPost(), indexDefinition);\n  }\n\n  getIteratorFrom(\n    startPost: NamedNode,\n    indexDefinition: Index\n  ): SortedMapIterator<string | NamedNode, Node, NamedNode> {\n    const idx = this.resolveIndex_(indexDefinition);\n    if (idx) {\n      return idx.getIteratorFrom(startPost, key => key);\n    } else {\n      const iterator = this.children_.getIteratorFrom(\n        startPost.name,\n        NamedNode.Wrap\n      );\n      let next = iterator.peek();\n      while (next != null && indexDefinition.compare(next, startPost) < 0) {\n        iterator.getNext();\n        next = iterator.peek();\n      }\n      return iterator;\n    }\n  }\n\n  getReverseIterator(\n    indexDefinition: Index\n  ): SortedMapIterator<string | NamedNode, Node, NamedNode> {\n    return this.getReverseIteratorFrom(\n      indexDefinition.maxPost(),\n      indexDefinition\n    );\n  }\n\n  getReverseIteratorFrom(\n    endPost: NamedNode,\n    indexDefinition: Index\n  ): SortedMapIterator<string | NamedNode, Node, NamedNode> {\n    const idx = this.resolveIndex_(indexDefinition);\n    if (idx) {\n      return idx.getReverseIteratorFrom(endPost, key => {\n        return key;\n      });\n    } else {\n      const iterator = this.children_.getReverseIteratorFrom(\n        endPost.name,\n        NamedNode.Wrap\n      );\n      let next = iterator.peek();\n      while (next != null && indexDefinition.compare(next, endPost) > 0) {\n        iterator.getNext();\n        next = iterator.peek();\n      }\n      return iterator;\n    }\n  }\n  compareTo(other: ChildrenNode): number {\n    if (this.isEmpty()) {\n      if (other.isEmpty()) {\n        return 0;\n      } else {\n        return -1;\n      }\n    } else if (other.isLeafNode() || other.isEmpty()) {\n      return 1;\n    } else if (other === MAX_NODE) {\n      return -1;\n    } else {\n      // Must be another node with children.\n      return 0;\n    }\n  }\n  withIndex(indexDefinition: Index): Node {\n    if (\n      indexDefinition === KEY_INDEX ||\n      this.indexMap_.hasIndex(indexDefinition)\n    ) {\n      return this;\n    } else {\n      const newIndexMap = this.indexMap_.addIndex(\n        indexDefinition,\n        this.children_\n      );\n      return new ChildrenNode(this.children_, this.priorityNode_, newIndexMap);\n    }\n  }\n  isIndexed(index: Index): boolean {\n    return index === KEY_INDEX || this.indexMap_.hasIndex(index);\n  }\n  equals(other: Node): boolean {\n    if (other === this) {\n      return true;\n    } else if (other.isLeafNode()) {\n      return false;\n    } else {\n      const otherChildrenNode = other as ChildrenNode;\n      if (!this.getPriority().equals(otherChildrenNode.getPriority())) {\n        return false;\n      } else if (\n        this.children_.count() === otherChildrenNode.children_.count()\n      ) {\n        const thisIter = this.getIterator(PRIORITY_INDEX);\n        const otherIter = otherChildrenNode.getIterator(PRIORITY_INDEX);\n        let thisCurrent = thisIter.getNext();\n        let otherCurrent = otherIter.getNext();\n        while (thisCurrent && otherCurrent) {\n          if (\n            thisCurrent.name !== otherCurrent.name ||\n            !thisCurrent.node.equals(otherCurrent.node)\n          ) {\n            return false;\n          }\n          thisCurrent = thisIter.getNext();\n          otherCurrent = otherIter.getNext();\n        }\n        return thisCurrent === null && otherCurrent === null;\n      } else {\n        return false;\n      }\n    }\n  }\n\n  /**\n   * Returns a SortedMap ordered by index, or null if the default (by-key) ordering can be used\n   * instead.\n   *\n   */\n  private resolveIndex_(\n    indexDefinition: Index\n  ): SortedMap<NamedNode, Node> | null {\n    if (indexDefinition === KEY_INDEX) {\n      return null;\n    } else {\n      return this.indexMap_.get(indexDefinition.toString());\n    }\n  }\n}\n\nexport class MaxNode extends ChildrenNode {\n  constructor() {\n    super(\n      new SortedMap<string, Node>(NAME_COMPARATOR),\n      ChildrenNode.EMPTY_NODE,\n      IndexMap.Default\n    );\n  }\n\n  compareTo(other: Node): number {\n    if (other === this) {\n      return 0;\n    } else {\n      return 1;\n    }\n  }\n\n  equals(other: Node): boolean {\n    // Not that we every compare it, but MAX_NODE is only ever equal to itself\n    return other === this;\n  }\n\n  getPriority(): MaxNode {\n    return this;\n  }\n\n  getImmediateChild(childName: string): ChildrenNode {\n    return ChildrenNode.EMPTY_NODE;\n  }\n\n  isEmpty(): boolean {\n    return false;\n  }\n}\n\n/**\n * Marker that will sort higher than any other snapshot.\n */\nexport const MAX_NODE = new MaxNode();\n\n/**\n * Document NamedNode extensions\n */\ndeclare module './Node' {\n  interface NamedNode {\n    MIN: NamedNode;\n    MAX: NamedNode;\n  }\n}\n\nObject.defineProperties(NamedNode, {\n  MIN: {\n    value: new NamedNode(MIN_NAME, ChildrenNode.EMPTY_NODE)\n  },\n  MAX: {\n    value: new NamedNode(MAX_NAME, MAX_NODE)\n  }\n});\n\n/**\n * Reference Extensions\n */\nKeyIndex.__EMPTY_NODE = ChildrenNode.EMPTY_NODE;\nLeafNode.__childrenNodeConstructor = ChildrenNode;\nsetMaxNode(MAX_NODE);\nsetPriorityMaxNode(MAX_NODE);\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { contains, assert } from '@firebase/util';\n\nimport { Indexable } from '../util/misc';\nimport { SortedMap } from '../util/SortedMap';\nimport { each } from '../util/util';\n\nimport { ChildrenNode } from './ChildrenNode';\nimport { buildChildSet } from './childSet';\nimport { NAME_COMPARATOR, NAME_ONLY_COMPARATOR } from './comparators';\nimport { PRIORITY_INDEX, setNodeFromJSON } from './indexes/PriorityIndex';\nimport { IndexMap } from './IndexMap';\nimport { LeafNode } from './LeafNode';\nimport { NamedNode, Node } from './Node';\n\nconst USE_HINZE = true;\n\n/**\n * Constructs a snapshot node representing the passed JSON and returns it.\n * @param json - JSON to create a node for.\n * @param priority - Optional priority to use.  This will be ignored if the\n * passed JSON contains a .priority property.\n */\nexport function nodeFromJSON(\n  json: unknown | null,\n  priority: unknown = null\n): Node {\n  if (json === null) {\n    return ChildrenNode.EMPTY_NODE;\n  }\n\n  if (typeof json === 'object' && '.priority' in json) {\n    priority = json['.priority'];\n  }\n\n  assert(\n    priority === null ||\n      typeof priority === 'string' ||\n      typeof priority === 'number' ||\n      (typeof priority === 'object' && '.sv' in (priority as object)),\n    'Invalid priority type found: ' + typeof priority\n  );\n\n  if (typeof json === 'object' && '.value' in json && json['.value'] !== null) {\n    json = json['.value'];\n  }\n\n  // Valid leaf nodes include non-objects or server-value wrapper objects\n  if (typeof json !== 'object' || '.sv' in json) {\n    const jsonLeaf = json as string | number | boolean | Indexable;\n    return new LeafNode(jsonLeaf, nodeFromJSON(priority));\n  }\n\n  if (!(json instanceof Array) && USE_HINZE) {\n    const children: NamedNode[] = [];\n    let childrenHavePriority = false;\n    const hinzeJsonObj = json;\n    each(hinzeJsonObj, (key, child) => {\n      if (key.substring(0, 1) !== '.') {\n        // Ignore metadata nodes\n        const childNode = nodeFromJSON(child);\n        if (!childNode.isEmpty()) {\n          childrenHavePriority =\n            childrenHavePriority || !childNode.getPriority().isEmpty();\n          children.push(new NamedNode(key, childNode));\n        }\n      }\n    });\n\n    if (children.length === 0) {\n      return ChildrenNode.EMPTY_NODE;\n    }\n\n    const childSet = buildChildSet(\n      children,\n      NAME_ONLY_COMPARATOR,\n      namedNode => namedNode.name,\n      NAME_COMPARATOR\n    ) as SortedMap<string, Node>;\n    if (childrenHavePriority) {\n      const sortedChildSet = buildChildSet(\n        children,\n        PRIORITY_INDEX.getCompare()\n      );\n      return new ChildrenNode(\n        childSet,\n        nodeFromJSON(priority),\n        new IndexMap(\n          { '.priority': sortedChildSet },\n          { '.priority': PRIORITY_INDEX }\n        )\n      );\n    } else {\n      return new ChildrenNode(\n        childSet,\n        nodeFromJSON(priority),\n        IndexMap.Default\n      );\n    }\n  } else {\n    let node: Node = ChildrenNode.EMPTY_NODE;\n    each(json, (key: string, childData: unknown) => {\n      if (contains(json as object, key)) {\n        if (key.substring(0, 1) !== '.') {\n          // ignore metadata nodes.\n          const childNode = nodeFromJSON(childData);\n          if (childNode.isLeafNode() || !childNode.isEmpty()) {\n            node = node.updateImmediateChild(key, childNode);\n          }\n        }\n      }\n    });\n\n    return node.updatePriority(nodeFromJSON(priority));\n  }\n}\n\nsetNodeFromJSON(nodeFromJSON);\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { Path, pathGetFront, pathIsEmpty, pathSlice } from '../../util/Path';\nimport { MAX_NAME, nameCompare } from '../../util/util';\nimport { ChildrenNode, MAX_NODE } from '../ChildrenNode';\nimport { NamedNode, Node } from '../Node';\nimport { nodeFromJSON } from '../nodeFromJSON';\n\nimport { Index } from './Index';\n\nexport class PathIndex extends Index {\n  constructor(private indexPath_: Path) {\n    super();\n\n    assert(\n      !pathIsEmpty(indexPath_) && pathGetFront(indexPath_) !== '.priority',\n      \"Can't create PathIndex with empty path or .priority key\"\n    );\n  }\n\n  protected extractChild(snap: Node): Node {\n    return snap.getChild(this.indexPath_);\n  }\n  isDefinedOn(node: Node): boolean {\n    return !node.getChild(this.indexPath_).isEmpty();\n  }\n  compare(a: NamedNode, b: NamedNode): number {\n    const aChild = this.extractChild(a.node);\n    const bChild = this.extractChild(b.node);\n    const indexCmp = aChild.compareTo(bChild);\n    if (indexCmp === 0) {\n      return nameCompare(a.name, b.name);\n    } else {\n      return indexCmp;\n    }\n  }\n  makePost(indexValue: object, name: string): NamedNode {\n    const valueNode = nodeFromJSON(indexValue);\n    const node = ChildrenNode.EMPTY_NODE.updateChild(\n      this.indexPath_,\n      valueNode\n    );\n    return new NamedNode(name, node);\n  }\n  maxPost(): NamedNode {\n    const node = ChildrenNode.EMPTY_NODE.updateChild(this.indexPath_, MAX_NODE);\n    return new NamedNode(MAX_NAME, node);\n  }\n  toString(): string {\n    return pathSlice(this.indexPath_, 0).join('/');\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { nameCompare } from '../../util/util';\nimport { NamedNode, Node } from '../Node';\nimport { nodeFromJSON } from '../nodeFromJSON';\n\nimport { Index } from './Index';\n\nexport class ValueIndex extends Index {\n  compare(a: NamedNode, b: NamedNode): number {\n    const indexCmp = a.node.compareTo(b.node);\n    if (indexCmp === 0) {\n      return nameCompare(a.name, b.name);\n    } else {\n      return indexCmp;\n    }\n  }\n  isDefinedOn(node: Node): boolean {\n    return true;\n  }\n  indexedValueChanged(oldNode: Node, newNode: Node): boolean {\n    return !oldNode.equals(newNode);\n  }\n  minPost(): NamedNode {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return (NamedNode as any).MIN;\n  }\n  maxPost(): NamedNode {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return (NamedNode as any).MAX;\n  }\n\n  makePost(indexValue: object, name: string): NamedNode {\n    const valueNode = nodeFromJSON(indexValue);\n    return new NamedNode(name, valueNode);\n  }\n\n  /**\n   * @returns String representation for inclusion in a query spec\n   */\n  toString(): string {\n    return '.value';\n  }\n}\n\nexport const VALUE_INDEX = new ValueIndex();\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Node } from '../snap/Node';\n\nexport const enum ChangeType {\n  /** Event type for a child added */\n  CHILD_ADDED = 'child_added',\n  /** Event type for a child removed */\n  CHILD_REMOVED = 'child_removed',\n  /** Event type for a child changed */\n  CHILD_CHANGED = 'child_changed',\n  /** Event type for a child moved */\n  CHILD_MOVED = 'child_moved',\n  /** Event type for a value change */\n  VALUE = 'value'\n}\n\nexport interface Change {\n  /** @param type - The event type */\n  type: ChangeType;\n  /** @param snapshotNode - The data */\n  snapshotNode: Node;\n  /** @param childName - The name for this child, if it's a child even */\n  childName?: string;\n  /** @param oldSnap - Used for intermediate processing of child changed events */\n  oldSnap?: Node;\n  /**  * @param prevName - The name for the previous child, if applicable */\n  prevName?: string | null;\n}\n\nexport function changeValue(snapshotNode: Node): Change {\n  return { type: ChangeType.VALUE, snapshotNode };\n}\n\nexport function changeChildAdded(\n  childName: string,\n  snapshotNode: Node\n): Change {\n  return { type: ChangeType.CHILD_ADDED, snapshotNode, childName };\n}\n\nexport function changeChildRemoved(\n  childName: string,\n  snapshotNode: Node\n): Change {\n  return { type: ChangeType.CHILD_REMOVED, snapshotNode, childName };\n}\n\nexport function changeChildChanged(\n  childName: string,\n  snapshotNode: Node,\n  oldSnap: Node\n): Change {\n  return {\n    type: ChangeType.CHILD_CHANGED,\n    snapshotNode,\n    childName,\n    oldSnap\n  };\n}\n\nexport function changeChildMoved(\n  childName: string,\n  snapshotNode: Node\n): Change {\n  return { type: ChangeType.CHILD_MOVED, snapshotNode, childName };\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { ChildrenNode } from '../../snap/ChildrenNode';\nimport { Index } from '../../snap/indexes/Index';\nimport { PRIORITY_INDEX } from '../../snap/indexes/PriorityIndex';\nimport { Node } from '../../snap/Node';\nimport { Path } from '../../util/Path';\nimport {\n  changeChildAdded,\n  changeChildChanged,\n  changeChildRemoved\n} from '../Change';\nimport { ChildChangeAccumulator } from '../ChildChangeAccumulator';\nimport { CompleteChildSource } from '../CompleteChildSource';\n\nimport { NodeFilter } from './NodeFilter';\n\n/**\n * Doesn't really filter nodes but applies an index to the node and keeps track of any changes\n */\nexport class IndexedFilter implements NodeFilter {\n  constructor(private readonly index_: Index) {}\n\n  updateChild(\n    snap: Node,\n    key: string,\n    newChild: Node,\n    affectedPath: Path,\n    source: CompleteChildSource,\n    optChangeAccumulator: ChildChangeAccumulator | null\n  ): Node {\n    assert(\n      snap.isIndexed(this.index_),\n      'A node must be indexed if only a child is updated'\n    );\n    const oldChild = snap.getImmediateChild(key);\n    // Check if anything actually changed.\n    if (\n      oldChild.getChild(affectedPath).equals(newChild.getChild(affectedPath))\n    ) {\n      // There's an edge case where a child can enter or leave the view because affectedPath was set to null.\n      // In this case, affectedPath will appear null in both the old and new snapshots.  So we need\n      // to avoid treating these cases as \"nothing changed.\"\n      if (oldChild.isEmpty() === newChild.isEmpty()) {\n        // Nothing changed.\n\n        // This assert should be valid, but it's expensive (can dominate perf testing) so don't actually do it.\n        //assert(oldChild.equals(newChild), 'Old and new snapshots should be equal.');\n        return snap;\n      }\n    }\n\n    if (optChangeAccumulator != null) {\n      if (newChild.isEmpty()) {\n        if (snap.hasChild(key)) {\n          optChangeAccumulator.trackChildChange(\n            changeChildRemoved(key, oldChild)\n          );\n        } else {\n          assert(\n            snap.isLeafNode(),\n            'A child remove without an old child only makes sense on a leaf node'\n          );\n        }\n      } else if (oldChild.isEmpty()) {\n        optChangeAccumulator.trackChildChange(changeChildAdded(key, newChild));\n      } else {\n        optChangeAccumulator.trackChildChange(\n          changeChildChanged(key, newChild, oldChild)\n        );\n      }\n    }\n    if (snap.isLeafNode() && newChild.isEmpty()) {\n      return snap;\n    } else {\n      // Make sure the node is indexed\n      return snap.updateImmediateChild(key, newChild).withIndex(this.index_);\n    }\n  }\n  updateFullNode(\n    oldSnap: Node,\n    newSnap: Node,\n    optChangeAccumulator: ChildChangeAccumulator | null\n  ): Node {\n    if (optChangeAccumulator != null) {\n      if (!oldSnap.isLeafNode()) {\n        oldSnap.forEachChild(PRIORITY_INDEX, (key, childNode) => {\n          if (!newSnap.hasChild(key)) {\n            optChangeAccumulator.trackChildChange(\n              changeChildRemoved(key, childNode)\n            );\n          }\n        });\n      }\n      if (!newSnap.isLeafNode()) {\n        newSnap.forEachChild(PRIORITY_INDEX, (key, childNode) => {\n          if (oldSnap.hasChild(key)) {\n            const oldChild = oldSnap.getImmediateChild(key);\n            if (!oldChild.equals(childNode)) {\n              optChangeAccumulator.trackChildChange(\n                changeChildChanged(key, childNode, oldChild)\n              );\n            }\n          } else {\n            optChangeAccumulator.trackChildChange(\n              changeChildAdded(key, childNode)\n            );\n          }\n        });\n      }\n    }\n    return newSnap.withIndex(this.index_);\n  }\n  updatePriority(oldSnap: Node, newPriority: Node): Node {\n    if (oldSnap.isEmpty()) {\n      return ChildrenNode.EMPTY_NODE;\n    } else {\n      return oldSnap.updatePriority(newPriority);\n    }\n  }\n  filtersNodes(): boolean {\n    return false;\n  }\n  getIndexedFilter(): IndexedFilter {\n    return this;\n  }\n  getIndex(): Index {\n    return this.index_;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { NamedNode, Node } from '../../../core/snap/Node';\nimport { ChildrenNode } from '../../snap/ChildrenNode';\nimport { Index } from '../../snap/indexes/Index';\nimport { PRIORITY_INDEX } from '../../snap/indexes/PriorityIndex';\nimport { Path } from '../../util/Path';\nimport { ChildChangeAccumulator } from '../ChildChangeAccumulator';\nimport { CompleteChildSource } from '../CompleteChildSource';\nimport { QueryParams } from '../QueryParams';\n\nimport { IndexedFilter } from './IndexedFilter';\nimport { NodeFilter } from './NodeFilter';\n\n/**\n * Filters nodes by range and uses an IndexFilter to track any changes after filtering the node\n */\nexport class RangedFilter implements NodeFilter {\n  private indexedFilter_: IndexedFilter;\n\n  private index_: Index;\n\n  private startPost_: NamedNode;\n\n  private endPost_: NamedNode;\n\n  private startIsInclusive_: boolean;\n\n  private endIsInclusive_: boolean;\n\n  constructor(params: QueryParams) {\n    this.indexedFilter_ = new IndexedFilter(params.getIndex());\n    this.index_ = params.getIndex();\n    this.startPost_ = RangedFilter.getStartPost_(params);\n    this.endPost_ = RangedFilter.getEndPost_(params);\n    this.startIsInclusive_ = !params.startAfterSet_;\n    this.endIsInclusive_ = !params.endBeforeSet_;\n  }\n\n  getStartPost(): NamedNode {\n    return this.startPost_;\n  }\n\n  getEndPost(): NamedNode {\n    return this.endPost_;\n  }\n\n  matches(node: NamedNode): boolean {\n    const isWithinStart = this.startIsInclusive_\n      ? this.index_.compare(this.getStartPost(), node) <= 0\n      : this.index_.compare(this.getStartPost(), node) < 0;\n    const isWithinEnd = this.endIsInclusive_\n      ? this.index_.compare(node, this.getEndPost()) <= 0\n      : this.index_.compare(node, this.getEndPost()) < 0;\n    return isWithinStart && isWithinEnd;\n  }\n  updateChild(\n    snap: Node,\n    key: string,\n    newChild: Node,\n    affectedPath: Path,\n    source: CompleteChildSource,\n    optChangeAccumulator: ChildChangeAccumulator | null\n  ): Node {\n    if (!this.matches(new NamedNode(key, newChild))) {\n      newChild = ChildrenNode.EMPTY_NODE;\n    }\n    return this.indexedFilter_.updateChild(\n      snap,\n      key,\n      newChild,\n      affectedPath,\n      source,\n      optChangeAccumulator\n    );\n  }\n  updateFullNode(\n    oldSnap: Node,\n    newSnap: Node,\n    optChangeAccumulator: ChildChangeAccumulator | null\n  ): Node {\n    if (newSnap.isLeafNode()) {\n      // Make sure we have a children node with the correct index, not a leaf node;\n      newSnap = ChildrenNode.EMPTY_NODE;\n    }\n    let filtered = newSnap.withIndex(this.index_);\n    // Don't support priorities on queries\n    filtered = filtered.updatePriority(ChildrenNode.EMPTY_NODE);\n    const self = this;\n    newSnap.forEachChild(PRIORITY_INDEX, (key, childNode) => {\n      if (!self.matches(new NamedNode(key, childNode))) {\n        filtered = filtered.updateImmediateChild(key, ChildrenNode.EMPTY_NODE);\n      }\n    });\n    return this.indexedFilter_.updateFullNode(\n      oldSnap,\n      filtered,\n      optChangeAccumulator\n    );\n  }\n  updatePriority(oldSnap: Node, newPriority: Node): Node {\n    // Don't support priorities on queries\n    return oldSnap;\n  }\n  filtersNodes(): boolean {\n    return true;\n  }\n  getIndexedFilter(): IndexedFilter {\n    return this.indexedFilter_;\n  }\n  getIndex(): Index {\n    return this.index_;\n  }\n\n  private static getStartPost_(params: QueryParams): NamedNode {\n    if (params.hasStart()) {\n      const startName = params.getIndexStartName();\n      return params.getIndex().makePost(params.getIndexStartValue(), startName);\n    } else {\n      return params.getIndex().minPost();\n    }\n  }\n\n  private static getEndPost_(params: QueryParams): NamedNode {\n    if (params.hasEnd()) {\n      const endName = params.getIndexEndName();\n      return params.getIndex().makePost(params.getIndexEndValue(), endName);\n    } else {\n      return params.getIndex().maxPost();\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { ChildrenNode } from '../../snap/ChildrenNode';\nimport { Index } from '../../snap/indexes/Index';\nimport { NamedNode, Node } from '../../snap/Node';\nimport { Path } from '../../util/Path';\nimport {\n  changeChildAdded,\n  changeChildChanged,\n  changeChildRemoved\n} from '../Change';\nimport { ChildChangeAccumulator } from '../ChildChangeAccumulator';\nimport { CompleteChildSource } from '../CompleteChildSource';\nimport { QueryParams } from '../QueryParams';\n\nimport { IndexedFilter } from './IndexedFilter';\nimport { NodeFilter } from './NodeFilter';\nimport { RangedFilter } from './RangedFilter';\n\n/**\n * Applies a limit and a range to a node and uses RangedFilter to do the heavy lifting where possible\n */\nexport class LimitedFilter implements NodeFilter {\n  private readonly rangedFilter_: RangedFilter;\n\n  private readonly index_: Index;\n\n  private readonly limit_: number;\n\n  private readonly reverse_: boolean;\n\n  private readonly startIsInclusive_: boolean;\n\n  private readonly endIsInclusive_: boolean;\n\n  constructor(params: QueryParams) {\n    this.rangedFilter_ = new RangedFilter(params);\n    this.index_ = params.getIndex();\n    this.limit_ = params.getLimit();\n    this.reverse_ = !params.isViewFromLeft();\n    this.startIsInclusive_ = !params.startAfterSet_;\n    this.endIsInclusive_ = !params.endBeforeSet_;\n  }\n  updateChild(\n    snap: Node,\n    key: string,\n    newChild: Node,\n    affectedPath: Path,\n    source: CompleteChildSource,\n    optChangeAccumulator: ChildChangeAccumulator | null\n  ): Node {\n    if (!this.rangedFilter_.matches(new NamedNode(key, newChild))) {\n      newChild = ChildrenNode.EMPTY_NODE;\n    }\n    if (snap.getImmediateChild(key).equals(newChild)) {\n      // No change\n      return snap;\n    } else if (snap.numChildren() < this.limit_) {\n      return this.rangedFilter_\n        .getIndexedFilter()\n        .updateChild(\n          snap,\n          key,\n          newChild,\n          affectedPath,\n          source,\n          optChangeAccumulator\n        );\n    } else {\n      return this.fullLimitUpdateChild_(\n        snap,\n        key,\n        newChild,\n        source,\n        optChangeAccumulator\n      );\n    }\n  }\n  updateFullNode(\n    oldSnap: Node,\n    newSnap: Node,\n    optChangeAccumulator: ChildChangeAccumulator | null\n  ): Node {\n    let filtered;\n    if (newSnap.isLeafNode() || newSnap.isEmpty()) {\n      // Make sure we have a children node with the correct index, not a leaf node;\n      filtered = ChildrenNode.EMPTY_NODE.withIndex(this.index_);\n    } else {\n      if (\n        this.limit_ * 2 < newSnap.numChildren() &&\n        newSnap.isIndexed(this.index_)\n      ) {\n        // Easier to build up a snapshot, since what we're given has more than twice the elements we want\n        filtered = ChildrenNode.EMPTY_NODE.withIndex(this.index_);\n        // anchor to the startPost, endPost, or last element as appropriate\n        let iterator;\n        if (this.reverse_) {\n          iterator = (newSnap as ChildrenNode).getReverseIteratorFrom(\n            this.rangedFilter_.getEndPost(),\n            this.index_\n          );\n        } else {\n          iterator = (newSnap as ChildrenNode).getIteratorFrom(\n            this.rangedFilter_.getStartPost(),\n            this.index_\n          );\n        }\n        let count = 0;\n        while (iterator.hasNext() && count < this.limit_) {\n          const next = iterator.getNext();\n          if (!this.withinDirectionalStart(next)) {\n            // if we have not reached the start, skip to the next element\n            continue;\n          } else if (!this.withinDirectionalEnd(next)) {\n            // if we have reached the end, stop adding elements\n            break;\n          } else {\n            filtered = filtered.updateImmediateChild(next.name, next.node);\n            count++;\n          }\n        }\n      } else {\n        // The snap contains less than twice the limit. Faster to delete from the snap than build up a new one\n        filtered = newSnap.withIndex(this.index_);\n        // Don't support priorities on queries\n        filtered = filtered.updatePriority(\n          ChildrenNode.EMPTY_NODE\n        ) as ChildrenNode;\n\n        let iterator;\n        if (this.reverse_) {\n          iterator = filtered.getReverseIterator(this.index_);\n        } else {\n          iterator = filtered.getIterator(this.index_);\n        }\n\n        let count = 0;\n        while (iterator.hasNext()) {\n          const next = iterator.getNext();\n          const inRange =\n            count < this.limit_ &&\n            this.withinDirectionalStart(next) &&\n            this.withinDirectionalEnd(next);\n          if (inRange) {\n            count++;\n          } else {\n            filtered = filtered.updateImmediateChild(\n              next.name,\n              ChildrenNode.EMPTY_NODE\n            );\n          }\n        }\n      }\n    }\n    return this.rangedFilter_\n      .getIndexedFilter()\n      .updateFullNode(oldSnap, filtered, optChangeAccumulator);\n  }\n  updatePriority(oldSnap: Node, newPriority: Node): Node {\n    // Don't support priorities on queries\n    return oldSnap;\n  }\n  filtersNodes(): boolean {\n    return true;\n  }\n  getIndexedFilter(): IndexedFilter {\n    return this.rangedFilter_.getIndexedFilter();\n  }\n  getIndex(): Index {\n    return this.index_;\n  }\n\n  private fullLimitUpdateChild_(\n    snap: Node,\n    childKey: string,\n    childSnap: Node,\n    source: CompleteChildSource,\n    changeAccumulator: ChildChangeAccumulator | null\n  ): Node {\n    // TODO: rename all cache stuff etc to general snap terminology\n    let cmp;\n    if (this.reverse_) {\n      const indexCmp = this.index_.getCompare();\n      cmp = (a: NamedNode, b: NamedNode) => indexCmp(b, a);\n    } else {\n      cmp = this.index_.getCompare();\n    }\n    const oldEventCache = snap as ChildrenNode;\n    assert(oldEventCache.numChildren() === this.limit_, '');\n    const newChildNamedNode = new NamedNode(childKey, childSnap);\n    const windowBoundary = this.reverse_\n      ? oldEventCache.getFirstChild(this.index_)\n      : (oldEventCache.getLastChild(this.index_) as NamedNode);\n    const inRange = this.rangedFilter_.matches(newChildNamedNode);\n    if (oldEventCache.hasChild(childKey)) {\n      const oldChildSnap = oldEventCache.getImmediateChild(childKey);\n      let nextChild = source.getChildAfterChild(\n        this.index_,\n        windowBoundary,\n        this.reverse_\n      );\n      while (\n        nextChild != null &&\n        (nextChild.name === childKey || oldEventCache.hasChild(nextChild.name))\n      ) {\n        // There is a weird edge case where a node is updated as part of a merge in the write tree, but hasn't\n        // been applied to the limited filter yet. Ignore this next child which will be updated later in\n        // the limited filter...\n        nextChild = source.getChildAfterChild(\n          this.index_,\n          nextChild,\n          this.reverse_\n        );\n      }\n      const compareNext =\n        nextChild == null ? 1 : cmp(nextChild, newChildNamedNode);\n      const remainsInWindow =\n        inRange && !childSnap.isEmpty() && compareNext >= 0;\n      if (remainsInWindow) {\n        if (changeAccumulator != null) {\n          changeAccumulator.trackChildChange(\n            changeChildChanged(childKey, childSnap, oldChildSnap)\n          );\n        }\n        return oldEventCache.updateImmediateChild(childKey, childSnap);\n      } else {\n        if (changeAccumulator != null) {\n          changeAccumulator.trackChildChange(\n            changeChildRemoved(childKey, oldChildSnap)\n          );\n        }\n        const newEventCache = oldEventCache.updateImmediateChild(\n          childKey,\n          ChildrenNode.EMPTY_NODE\n        );\n        const nextChildInRange =\n          nextChild != null && this.rangedFilter_.matches(nextChild);\n        if (nextChildInRange) {\n          if (changeAccumulator != null) {\n            changeAccumulator.trackChildChange(\n              changeChildAdded(nextChild.name, nextChild.node)\n            );\n          }\n          return newEventCache.updateImmediateChild(\n            nextChild.name,\n            nextChild.node\n          );\n        } else {\n          return newEventCache;\n        }\n      }\n    } else if (childSnap.isEmpty()) {\n      // we're deleting a node, but it was not in the window, so ignore it\n      return snap;\n    } else if (inRange) {\n      if (cmp(windowBoundary, newChildNamedNode) >= 0) {\n        if (changeAccumulator != null) {\n          changeAccumulator.trackChildChange(\n            changeChildRemoved(windowBoundary.name, windowBoundary.node)\n          );\n          changeAccumulator.trackChildChange(\n            changeChildAdded(childKey, childSnap)\n          );\n        }\n        return oldEventCache\n          .updateImmediateChild(childKey, childSnap)\n          .updateImmediateChild(windowBoundary.name, ChildrenNode.EMPTY_NODE);\n      } else {\n        return snap;\n      }\n    } else {\n      return snap;\n    }\n  }\n\n  private withinDirectionalStart = (node: NamedNode) =>\n    this.reverse_ ? this.withinEndPost(node) : this.withinStartPost(node);\n\n  private withinDirectionalEnd = (node: NamedNode) =>\n    this.reverse_ ? this.withinStartPost(node) : this.withinEndPost(node);\n\n  private withinStartPost = (node: NamedNode) => {\n    const compareRes = this.index_.compare(\n      this.rangedFilter_.getStartPost(),\n      node\n    );\n    return this.startIsInclusive_ ? compareRes <= 0 : compareRes < 0;\n  };\n\n  private withinEndPost = (node: NamedNode) => {\n    const compareRes = this.index_.compare(\n      node,\n      this.rangedFilter_.getEndPost()\n    );\n    return this.endIsInclusive_ ? compareRes <= 0 : compareRes < 0;\n  };\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, stringify } from '@firebase/util';\n\nimport { Index } from '../snap/indexes/Index';\nimport { KEY_INDEX } from '../snap/indexes/KeyIndex';\nimport { PathIndex } from '../snap/indexes/PathIndex';\nimport { PRIORITY_INDEX, PriorityIndex } from '../snap/indexes/PriorityIndex';\nimport { VALUE_INDEX } from '../snap/indexes/ValueIndex';\nimport { MAX_NAME, MIN_NAME } from '../util/util';\n\nimport { IndexedFilter } from './filter/IndexedFilter';\nimport { LimitedFilter } from './filter/LimitedFilter';\nimport { NodeFilter } from './filter/NodeFilter';\nimport { RangedFilter } from './filter/RangedFilter';\n\n/**\n * Wire Protocol Constants\n */\nconst enum WIRE_PROTOCOL_CONSTANTS {\n  INDEX_START_VALUE = 'sp',\n  INDEX_START_NAME = 'sn',\n  INDEX_START_IS_INCLUSIVE = 'sin',\n  INDEX_END_VALUE = 'ep',\n  INDEX_END_NAME = 'en',\n  INDEX_END_IS_INCLUSIVE = 'ein',\n  LIMIT = 'l',\n  VIEW_FROM = 'vf',\n  VIEW_FROM_LEFT = 'l',\n  VIEW_FROM_RIGHT = 'r',\n  INDEX = 'i'\n}\n\n/**\n * REST Query Constants\n */\nconst enum REST_QUERY_CONSTANTS {\n  ORDER_BY = 'orderBy',\n  PRIORITY_INDEX = '$priority',\n  VALUE_INDEX = '$value',\n  KEY_INDEX = '$key',\n  START_AFTER = 'startAfter',\n  START_AT = 'startAt',\n  END_AT = 'endAt',\n  END_BEFORE = 'endBefore',\n  LIMIT_TO_FIRST = 'limitToFirst',\n  LIMIT_TO_LAST = 'limitToLast'\n}\n\n/**\n * This class is an immutable-from-the-public-api struct containing a set of query parameters defining a\n * range to be returned for a particular location. It is assumed that validation of parameters is done at the\n * user-facing API level, so it is not done here.\n *\n * @internal\n */\nexport class QueryParams {\n  limitSet_ = false;\n  startSet_ = false;\n  startNameSet_ = false;\n  startAfterSet_ = false; // can only be true if startSet_ is true\n  endSet_ = false;\n  endNameSet_ = false;\n  endBeforeSet_ = false; // can only be true if endSet_ is true\n  limit_ = 0;\n  viewFrom_ = '';\n  indexStartValue_: unknown | null = null;\n  indexStartName_ = '';\n  indexEndValue_: unknown | null = null;\n  indexEndName_ = '';\n  index_: PriorityIndex = PRIORITY_INDEX;\n\n  hasStart(): boolean {\n    return this.startSet_;\n  }\n\n  /**\n   * @returns True if it would return from left.\n   */\n  isViewFromLeft(): boolean {\n    if (this.viewFrom_ === '') {\n      // limit(), rather than limitToFirst or limitToLast was called.\n      // This means that only one of startSet_ and endSet_ is true. Use them\n      // to calculate which side of the view to anchor to. If neither is set,\n      // anchor to the end.\n      return this.startSet_;\n    } else {\n      return this.viewFrom_ === WIRE_PROTOCOL_CONSTANTS.VIEW_FROM_LEFT;\n    }\n  }\n\n  /**\n   * Only valid to call if hasStart() returns true\n   */\n  getIndexStartValue(): unknown {\n    assert(this.startSet_, 'Only valid if start has been set');\n    return this.indexStartValue_;\n  }\n\n  /**\n   * Only valid to call if hasStart() returns true.\n   * Returns the starting key name for the range defined by these query parameters\n   */\n  getIndexStartName(): string {\n    assert(this.startSet_, 'Only valid if start has been set');\n    if (this.startNameSet_) {\n      return this.indexStartName_;\n    } else {\n      return MIN_NAME;\n    }\n  }\n\n  hasEnd(): boolean {\n    return this.endSet_;\n  }\n\n  /**\n   * Only valid to call if hasEnd() returns true.\n   */\n  getIndexEndValue(): unknown {\n    assert(this.endSet_, 'Only valid if end has been set');\n    return this.indexEndValue_;\n  }\n\n  /**\n   * Only valid to call if hasEnd() returns true.\n   * Returns the end key name for the range defined by these query parameters\n   */\n  getIndexEndName(): string {\n    assert(this.endSet_, 'Only valid if end has been set');\n    if (this.endNameSet_) {\n      return this.indexEndName_;\n    } else {\n      return MAX_NAME;\n    }\n  }\n\n  hasLimit(): boolean {\n    return this.limitSet_;\n  }\n\n  /**\n   * @returns True if a limit has been set and it has been explicitly anchored\n   */\n  hasAnchoredLimit(): boolean {\n    return this.limitSet_ && this.viewFrom_ !== '';\n  }\n\n  /**\n   * Only valid to call if hasLimit() returns true\n   */\n  getLimit(): number {\n    assert(this.limitSet_, 'Only valid if limit has been set');\n    return this.limit_;\n  }\n\n  getIndex(): Index {\n    return this.index_;\n  }\n\n  loadsAllData(): boolean {\n    return !(this.startSet_ || this.endSet_ || this.limitSet_);\n  }\n\n  isDefault(): boolean {\n    return this.loadsAllData() && this.index_ === PRIORITY_INDEX;\n  }\n\n  copy(): QueryParams {\n    const copy = new QueryParams();\n    copy.limitSet_ = this.limitSet_;\n    copy.limit_ = this.limit_;\n    copy.startSet_ = this.startSet_;\n    copy.startAfterSet_ = this.startAfterSet_;\n    copy.indexStartValue_ = this.indexStartValue_;\n    copy.startNameSet_ = this.startNameSet_;\n    copy.indexStartName_ = this.indexStartName_;\n    copy.endSet_ = this.endSet_;\n    copy.endBeforeSet_ = this.endBeforeSet_;\n    copy.indexEndValue_ = this.indexEndValue_;\n    copy.endNameSet_ = this.endNameSet_;\n    copy.indexEndName_ = this.indexEndName_;\n    copy.index_ = this.index_;\n    copy.viewFrom_ = this.viewFrom_;\n    return copy;\n  }\n}\n\nexport function queryParamsGetNodeFilter(queryParams: QueryParams): NodeFilter {\n  if (queryParams.loadsAllData()) {\n    return new IndexedFilter(queryParams.getIndex());\n  } else if (queryParams.hasLimit()) {\n    return new LimitedFilter(queryParams);\n  } else {\n    return new RangedFilter(queryParams);\n  }\n}\n\nexport function queryParamsLimit(\n  queryParams: QueryParams,\n  newLimit: number\n): QueryParams {\n  const newParams = queryParams.copy();\n  newParams.limitSet_ = true;\n  newParams.limit_ = newLimit;\n  newParams.viewFrom_ = '';\n  return newParams;\n}\n\nexport function queryParamsLimitToFirst(\n  queryParams: QueryParams,\n  newLimit: number\n): QueryParams {\n  const newParams = queryParams.copy();\n  newParams.limitSet_ = true;\n  newParams.limit_ = newLimit;\n  newParams.viewFrom_ = WIRE_PROTOCOL_CONSTANTS.VIEW_FROM_LEFT;\n  return newParams;\n}\n\nexport function queryParamsLimitToLast(\n  queryParams: QueryParams,\n  newLimit: number\n): QueryParams {\n  const newParams = queryParams.copy();\n  newParams.limitSet_ = true;\n  newParams.limit_ = newLimit;\n  newParams.viewFrom_ = WIRE_PROTOCOL_CONSTANTS.VIEW_FROM_RIGHT;\n  return newParams;\n}\n\nexport function queryParamsStartAt(\n  queryParams: QueryParams,\n  indexValue: unknown,\n  key?: string | null\n): QueryParams {\n  const newParams = queryParams.copy();\n  newParams.startSet_ = true;\n  if (indexValue === undefined) {\n    indexValue = null;\n  }\n  newParams.indexStartValue_ = indexValue;\n  if (key != null) {\n    newParams.startNameSet_ = true;\n    newParams.indexStartName_ = key;\n  } else {\n    newParams.startNameSet_ = false;\n    newParams.indexStartName_ = '';\n  }\n  return newParams;\n}\n\nexport function queryParamsStartAfter(\n  queryParams: QueryParams,\n  indexValue: unknown,\n  key?: string | null\n): QueryParams {\n  let params: QueryParams;\n  if (queryParams.index_ === KEY_INDEX || !!key) {\n    params = queryParamsStartAt(queryParams, indexValue, key);\n  } else {\n    params = queryParamsStartAt(queryParams, indexValue, MAX_NAME);\n  }\n  params.startAfterSet_ = true;\n  return params;\n}\n\nexport function queryParamsEndAt(\n  queryParams: QueryParams,\n  indexValue: unknown,\n  key?: string | null\n): QueryParams {\n  const newParams = queryParams.copy();\n  newParams.endSet_ = true;\n  if (indexValue === undefined) {\n    indexValue = null;\n  }\n  newParams.indexEndValue_ = indexValue;\n  if (key !== undefined) {\n    newParams.endNameSet_ = true;\n    newParams.indexEndName_ = key;\n  } else {\n    newParams.endNameSet_ = false;\n    newParams.indexEndName_ = '';\n  }\n  return newParams;\n}\n\nexport function queryParamsEndBefore(\n  queryParams: QueryParams,\n  indexValue: unknown,\n  key?: string | null\n): QueryParams {\n  let params: QueryParams;\n  if (queryParams.index_ === KEY_INDEX || !!key) {\n    params = queryParamsEndAt(queryParams, indexValue, key);\n  } else {\n    params = queryParamsEndAt(queryParams, indexValue, MIN_NAME);\n  }\n  params.endBeforeSet_ = true;\n  return params;\n}\n\nexport function queryParamsOrderBy(\n  queryParams: QueryParams,\n  index: Index\n): QueryParams {\n  const newParams = queryParams.copy();\n  newParams.index_ = index;\n  return newParams;\n}\n\n/**\n * Returns a set of REST query string parameters representing this query.\n *\n * @returns query string parameters\n */\nexport function queryParamsToRestQueryStringParameters(\n  queryParams: QueryParams\n): Record<string, string | number> {\n  const qs: Record<string, string | number> = {};\n\n  if (queryParams.isDefault()) {\n    return qs;\n  }\n\n  let orderBy;\n  if (queryParams.index_ === PRIORITY_INDEX) {\n    orderBy = REST_QUERY_CONSTANTS.PRIORITY_INDEX;\n  } else if (queryParams.index_ === VALUE_INDEX) {\n    orderBy = REST_QUERY_CONSTANTS.VALUE_INDEX;\n  } else if (queryParams.index_ === KEY_INDEX) {\n    orderBy = REST_QUERY_CONSTANTS.KEY_INDEX;\n  } else {\n    assert(queryParams.index_ instanceof PathIndex, 'Unrecognized index type!');\n    orderBy = queryParams.index_.toString();\n  }\n  qs[REST_QUERY_CONSTANTS.ORDER_BY] = stringify(orderBy);\n\n  if (queryParams.startSet_) {\n    const startParam = queryParams.startAfterSet_\n      ? REST_QUERY_CONSTANTS.START_AFTER\n      : REST_QUERY_CONSTANTS.START_AT;\n    qs[startParam] = stringify(queryParams.indexStartValue_);\n    if (queryParams.startNameSet_) {\n      qs[startParam] += ',' + stringify(queryParams.indexStartName_);\n    }\n  }\n\n  if (queryParams.endSet_) {\n    const endParam = queryParams.endBeforeSet_\n      ? REST_QUERY_CONSTANTS.END_BEFORE\n      : REST_QUERY_CONSTANTS.END_AT;\n    qs[endParam] = stringify(queryParams.indexEndValue_);\n    if (queryParams.endNameSet_) {\n      qs[endParam] += ',' + stringify(queryParams.indexEndName_);\n    }\n  }\n\n  if (queryParams.limitSet_) {\n    if (queryParams.isViewFromLeft()) {\n      qs[REST_QUERY_CONSTANTS.LIMIT_TO_FIRST] = queryParams.limit_;\n    } else {\n      qs[REST_QUERY_CONSTANTS.LIMIT_TO_LAST] = queryParams.limit_;\n    }\n  }\n\n  return qs;\n}\n\nexport function queryParamsGetQueryObject(\n  queryParams: QueryParams\n): Record<string, unknown> {\n  const obj: Record<string, unknown> = {};\n  if (queryParams.startSet_) {\n    obj[WIRE_PROTOCOL_CONSTANTS.INDEX_START_VALUE] =\n      queryParams.indexStartValue_;\n    if (queryParams.startNameSet_) {\n      obj[WIRE_PROTOCOL_CONSTANTS.INDEX_START_NAME] =\n        queryParams.indexStartName_;\n    }\n    obj[WIRE_PROTOCOL_CONSTANTS.INDEX_START_IS_INCLUSIVE] =\n      !queryParams.startAfterSet_;\n  }\n  if (queryParams.endSet_) {\n    obj[WIRE_PROTOCOL_CONSTANTS.INDEX_END_VALUE] = queryParams.indexEndValue_;\n    if (queryParams.endNameSet_) {\n      obj[WIRE_PROTOCOL_CONSTANTS.INDEX_END_NAME] = queryParams.indexEndName_;\n    }\n    obj[WIRE_PROTOCOL_CONSTANTS.INDEX_END_IS_INCLUSIVE] =\n      !queryParams.endBeforeSet_;\n  }\n  if (queryParams.limitSet_) {\n    obj[WIRE_PROTOCOL_CONSTANTS.LIMIT] = queryParams.limit_;\n    let viewFrom = queryParams.viewFrom_;\n    if (viewFrom === '') {\n      if (queryParams.isViewFromLeft()) {\n        viewFrom = WIRE_PROTOCOL_CONSTANTS.VIEW_FROM_LEFT;\n      } else {\n        viewFrom = WIRE_PROTOCOL_CONSTANTS.VIEW_FROM_RIGHT;\n      }\n    }\n    obj[WIRE_PROTOCOL_CONSTANTS.VIEW_FROM] = viewFrom;\n  }\n  // For now, priority index is the default, so we only specify if it's some other index\n  if (queryParams.index_ !== PRIORITY_INDEX) {\n    obj[WIRE_PROTOCOL_CONSTANTS.INDEX] = queryParams.index_.toString();\n  }\n  return obj;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  assert,\n  jsonEval,\n  safeGet,\n  querystring,\n  Deferred\n} from '@firebase/util';\n\nimport { AppCheckTokenProvider } from './AppCheckTokenProvider';\nimport { AuthTokenProvider } from './AuthTokenProvider';\nimport { RepoInfo } from './RepoInfo';\nimport { ServerActions } from './ServerActions';\nimport { logWrapper, warn } from './util/util';\nimport { QueryContext } from './view/EventRegistration';\nimport { queryParamsToRestQueryStringParameters } from './view/QueryParams';\n\n/**\n * An implementation of ServerActions that communicates with the server via REST requests.\n * This is mostly useful for compatibility with crawlers, where we don't want to spin up a full\n * persistent connection (using WebSockets or long-polling)\n */\nexport class ReadonlyRestClient extends ServerActions {\n  reportStats(stats: { [k: string]: unknown }): void {\n    throw new Error('Method not implemented.');\n  }\n\n  /** @private {function(...[*])} */\n  private log_: (...args: unknown[]) => void = logWrapper('p:rest:');\n\n  /**\n   * We don't actually need to track listens, except to prevent us calling an onComplete for a listen\n   * that's been removed. :-/\n   */\n  private listens_: { [k: string]: object } = {};\n\n  static getListenId_(query: QueryContext, tag?: number | null): string {\n    if (tag !== undefined) {\n      return 'tag$' + tag;\n    } else {\n      assert(\n        query._queryParams.isDefault(),\n        \"should have a tag if it's not a default query.\"\n      );\n      return query._path.toString();\n    }\n  }\n\n  /**\n   * @param repoInfo_ - Data about the namespace we are connecting to\n   * @param onDataUpdate_ - A callback for new data from the server\n   */\n  constructor(\n    private repoInfo_: RepoInfo,\n    private onDataUpdate_: (\n      a: string,\n      b: unknown,\n      c: boolean,\n      d: number | null\n    ) => void,\n    private authTokenProvider_: AuthTokenProvider,\n    private appCheckTokenProvider_: AppCheckTokenProvider\n  ) {\n    super();\n  }\n\n  /** @inheritDoc */\n  listen(\n    query: QueryContext,\n    currentHashFn: () => string,\n    tag: number | null,\n    onComplete: (a: string, b: unknown) => void\n  ) {\n    const pathString = query._path.toString();\n    this.log_('Listen called for ' + pathString + ' ' + query._queryIdentifier);\n\n    // Mark this listener so we can tell if it's removed.\n    const listenId = ReadonlyRestClient.getListenId_(query, tag);\n    const thisListen = {};\n    this.listens_[listenId] = thisListen;\n\n    const queryStringParameters = queryParamsToRestQueryStringParameters(\n      query._queryParams\n    );\n\n    this.restRequest_(\n      pathString + '.json',\n      queryStringParameters,\n      (error, result) => {\n        let data = result;\n\n        if (error === 404) {\n          data = null;\n          error = null;\n        }\n\n        if (error === null) {\n          this.onDataUpdate_(pathString, data, /*isMerge=*/ false, tag);\n        }\n\n        if (safeGet(this.listens_, listenId) === thisListen) {\n          let status;\n          if (!error) {\n            status = 'ok';\n          } else if (error === 401) {\n            status = 'permission_denied';\n          } else {\n            status = 'rest_error:' + error;\n          }\n\n          onComplete(status, null);\n        }\n      }\n    );\n  }\n\n  /** @inheritDoc */\n  unlisten(query: QueryContext, tag: number | null) {\n    const listenId = ReadonlyRestClient.getListenId_(query, tag);\n    delete this.listens_[listenId];\n  }\n\n  get(query: QueryContext): Promise<string> {\n    const queryStringParameters = queryParamsToRestQueryStringParameters(\n      query._queryParams\n    );\n\n    const pathString = query._path.toString();\n\n    const deferred = new Deferred<string>();\n\n    this.restRequest_(\n      pathString + '.json',\n      queryStringParameters,\n      (error, result) => {\n        let data = result;\n\n        if (error === 404) {\n          data = null;\n          error = null;\n        }\n\n        if (error === null) {\n          this.onDataUpdate_(\n            pathString,\n            data,\n            /*isMerge=*/ false,\n            /*tag=*/ null\n          );\n          deferred.resolve(data as string);\n        } else {\n          deferred.reject(new Error(data as string));\n        }\n      }\n    );\n    return deferred.promise;\n  }\n\n  /** @inheritDoc */\n  refreshAuthToken(token: string) {\n    // no-op since we just always call getToken.\n  }\n\n  /**\n   * Performs a REST request to the given path, with the provided query string parameters,\n   * and any auth credentials we have.\n   */\n  private restRequest_(\n    pathString: string,\n    queryStringParameters: { [k: string]: string | number } = {},\n    callback: ((a: number | null, b?: unknown) => void) | null\n  ) {\n    queryStringParameters['format'] = 'export';\n\n    return Promise.all([\n      this.authTokenProvider_.getToken(/*forceRefresh=*/ false),\n      this.appCheckTokenProvider_.getToken(/*forceRefresh=*/ false)\n    ]).then(([authToken, appCheckToken]) => {\n      if (authToken && authToken.accessToken) {\n        queryStringParameters['auth'] = authToken.accessToken;\n      }\n      if (appCheckToken && appCheckToken.token) {\n        queryStringParameters['ac'] = appCheckToken.token;\n      }\n\n      const url =\n        (this.repoInfo_.secure ? 'https://' : 'http://') +\n        this.repoInfo_.host +\n        pathString +\n        '?' +\n        'ns=' +\n        this.repoInfo_.namespace +\n        querystring(queryStringParameters);\n\n      this.log_('Sending REST request for ' + url);\n      const xhr = new XMLHttpRequest();\n      xhr.onreadystatechange = () => {\n        if (callback && xhr.readyState === 4) {\n          this.log_(\n            'REST Response for ' + url + ' received. status:',\n            xhr.status,\n            'response:',\n            xhr.responseText\n          );\n          let res = null;\n          if (xhr.status >= 200 && xhr.status < 300) {\n            try {\n              res = jsonEval(xhr.responseText);\n            } catch (e) {\n              warn(\n                'Failed to parse JSON response for ' +\n                  url +\n                  ': ' +\n                  xhr.responseText\n              );\n            }\n            callback(null, res);\n          } else {\n            // 401 and 404 are expected.\n            if (xhr.status !== 401 && xhr.status !== 404) {\n              warn(\n                'Got unsuccessful REST response for ' +\n                  url +\n                  ' Status: ' +\n                  xhr.status\n              );\n            }\n            callback(xhr.status);\n          }\n          callback = null;\n        }\n      };\n\n      xhr.open('GET', url, /*asynchronous=*/ true);\n      xhr.send();\n    });\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { PRIORITY_INDEX } from './snap/indexes/PriorityIndex';\nimport { Node } from './snap/Node';\nimport { Path, pathGetFront, pathIsEmpty, pathPopFront } from './util/Path';\n\n/**\n * Helper class to store a sparse set of snapshots.\n */\nexport interface SparseSnapshotTree {\n  value: Node | null;\n  readonly children: Map<string, SparseSnapshotTree>;\n}\n\nexport function newSparseSnapshotTree(): SparseSnapshotTree {\n  return {\n    value: null,\n    children: new Map()\n  };\n}\n\n/**\n * Gets the node stored at the given path if one exists.\n * Only seems to be used in tests.\n *\n * @param path - Path to look up snapshot for.\n * @returns The retrieved node, or null.\n */\nexport function sparseSnapshotTreeFind(\n  sparseSnapshotTree: SparseSnapshotTree,\n  path: Path\n): Node | null {\n  if (sparseSnapshotTree.value != null) {\n    return sparseSnapshotTree.value.getChild(path);\n  } else if (!pathIsEmpty(path) && sparseSnapshotTree.children.size > 0) {\n    const childKey = pathGetFront(path);\n    path = pathPopFront(path);\n    if (sparseSnapshotTree.children.has(childKey)) {\n      const childTree = sparseSnapshotTree.children.get(childKey);\n      return sparseSnapshotTreeFind(childTree, path);\n    } else {\n      return null;\n    }\n  } else {\n    return null;\n  }\n}\n\n/**\n * Stores the given node at the specified path. If there is already a node\n * at a shallower path, it merges the new data into that snapshot node.\n *\n * @param path - Path to look up snapshot for.\n * @param data - The new data, or null.\n */\nexport function sparseSnapshotTreeRemember(\n  sparseSnapshotTree: SparseSnapshotTree,\n  path: Path,\n  data: Node\n): void {\n  if (pathIsEmpty(path)) {\n    sparseSnapshotTree.value = data;\n    sparseSnapshotTree.children.clear();\n  } else if (sparseSnapshotTree.value !== null) {\n    sparseSnapshotTree.value = sparseSnapshotTree.value.updateChild(path, data);\n  } else {\n    const childKey = pathGetFront(path);\n    if (!sparseSnapshotTree.children.has(childKey)) {\n      sparseSnapshotTree.children.set(childKey, newSparseSnapshotTree());\n    }\n\n    const child = sparseSnapshotTree.children.get(childKey);\n    path = pathPopFront(path);\n    sparseSnapshotTreeRemember(child, path, data);\n  }\n}\n\n/**\n * Purge the data at path from the cache.\n *\n * @param path - Path to look up snapshot for.\n * @returns True if this node should now be removed.\n */\nexport function sparseSnapshotTreeForget(\n  sparseSnapshotTree: SparseSnapshotTree,\n  path: Path\n): boolean {\n  if (pathIsEmpty(path)) {\n    sparseSnapshotTree.value = null;\n    sparseSnapshotTree.children.clear();\n    return true;\n  } else {\n    if (sparseSnapshotTree.value !== null) {\n      if (sparseSnapshotTree.value.isLeafNode()) {\n        // We're trying to forget a node that doesn't exist\n        return false;\n      } else {\n        const value = sparseSnapshotTree.value;\n        sparseSnapshotTree.value = null;\n\n        value.forEachChild(PRIORITY_INDEX, (key, tree) => {\n          sparseSnapshotTreeRemember(sparseSnapshotTree, new Path(key), tree);\n        });\n\n        return sparseSnapshotTreeForget(sparseSnapshotTree, path);\n      }\n    } else if (sparseSnapshotTree.children.size > 0) {\n      const childKey = pathGetFront(path);\n      path = pathPopFront(path);\n      if (sparseSnapshotTree.children.has(childKey)) {\n        const safeToRemove = sparseSnapshotTreeForget(\n          sparseSnapshotTree.children.get(childKey),\n          path\n        );\n        if (safeToRemove) {\n          sparseSnapshotTree.children.delete(childKey);\n        }\n      }\n\n      return sparseSnapshotTree.children.size === 0;\n    } else {\n      return true;\n    }\n  }\n}\n\n/**\n * Recursively iterates through all of the stored tree and calls the\n * callback on each one.\n *\n * @param prefixPath - Path to look up node for.\n * @param func - The function to invoke for each tree.\n */\nexport function sparseSnapshotTreeForEachTree(\n  sparseSnapshotTree: SparseSnapshotTree,\n  prefixPath: Path,\n  func: (a: Path, b: Node) => unknown\n): void {\n  if (sparseSnapshotTree.value !== null) {\n    func(prefixPath, sparseSnapshotTree.value);\n  } else {\n    sparseSnapshotTreeForEachChild(sparseSnapshotTree, (key, tree) => {\n      const path = new Path(prefixPath.toString() + '/' + key);\n      sparseSnapshotTreeForEachTree(tree, path, func);\n    });\n  }\n}\n\n/**\n * Iterates through each immediate child and triggers the callback.\n * Only seems to be used in tests.\n *\n * @param func - The function to invoke for each child.\n */\nexport function sparseSnapshotTreeForEachChild(\n  sparseSnapshotTree: SparseSnapshotTree,\n  func: (a: string, b: SparseSnapshotTree) => void\n): void {\n  sparseSnapshotTree.children.forEach((tree, key) => {\n    func(key, tree);\n  });\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ChildrenNode } from './snap/ChildrenNode';\nimport { Node } from './snap/Node';\nimport { Path } from './util/Path';\n\n/**\n * Mutable object which basically just stores a reference to the \"latest\" immutable snapshot.\n */\nexport class SnapshotHolder {\n  private rootNode_: Node = ChildrenNode.EMPTY_NODE;\n\n  getNode(path: Path): Node {\n    return this.rootNode_.getChild(path);\n  }\n\n  updateSnapshot(path: Path, newSnapshotNode: Node) {\n    this.rootNode_ = this.rootNode_.updateChild(path, newSnapshotNode);\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { each } from '../util/util';\n\nimport { StatsCollection } from './StatsCollection';\n\n/**\n * Returns the delta from the previous call to get stats.\n *\n * @param collection_ - The collection to \"listen\" to.\n */\nexport class StatsListener {\n  private last_: { [k: string]: number } | null = null;\n\n  constructor(private collection_: StatsCollection) {}\n\n  get(): { [k: string]: number } {\n    const newStats = this.collection_.get();\n\n    const delta = { ...newStats };\n    if (this.last_) {\n      each(this.last_, (stat: string, value: number) => {\n        delta[stat] = delta[stat] - value;\n      });\n    }\n    this.last_ = newStats;\n\n    return delta;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { contains } from '@firebase/util';\n\nimport { ServerActions } from '../ServerActions';\nimport { setTimeoutNonBlocking, each } from '../util/util';\n\nimport { StatsCollection } from './StatsCollection';\nimport { StatsListener } from './StatsListener';\n\n// Assuming some apps may have a short amount of time on page, and a bulk of firebase operations probably\n// happen on page load, we try to report our first set of stats pretty quickly, but we wait at least 10\n// seconds to try to ensure the Firebase connection is established / settled.\nconst FIRST_STATS_MIN_TIME = 10 * 1000;\nconst FIRST_STATS_MAX_TIME = 30 * 1000;\n\n// We'll continue to report stats on average every 5 minutes.\nconst REPORT_STATS_INTERVAL = 5 * 60 * 1000;\n\nexport class StatsReporter {\n  private statsListener_: StatsListener;\n  statsToReport_: { [k: string]: boolean } = {};\n\n  constructor(collection: StatsCollection, private server_: ServerActions) {\n    this.statsListener_ = new StatsListener(collection);\n\n    const timeout =\n      FIRST_STATS_MIN_TIME +\n      (FIRST_STATS_MAX_TIME - FIRST_STATS_MIN_TIME) * Math.random();\n    setTimeoutNonBlocking(this.reportStats_.bind(this), Math.floor(timeout));\n  }\n\n  private reportStats_() {\n    const stats = this.statsListener_.get();\n    const reportedStats: typeof stats = {};\n    let haveStatsToReport = false;\n\n    each(stats, (stat: string, value: number) => {\n      if (value > 0 && contains(this.statsToReport_, stat)) {\n        reportedStats[stat] = value;\n        haveStatsToReport = true;\n      }\n    });\n\n    if (haveStatsToReport) {\n      this.server_.reportStats(reportedStats);\n    }\n\n    // queue our next run.\n    setTimeoutNonBlocking(\n      this.reportStats_.bind(this),\n      Math.floor(Math.random() * 2 * REPORT_STATS_INTERVAL)\n    );\n  }\n}\n\nexport function statsReporterIncludeStat(\n  reporter: StatsReporter,\n  stat: string\n) {\n  reporter.statsToReport_[stat] = true;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Path } from '../util/Path';\n\n/**\n *\n * @enum\n */\nexport enum OperationType {\n  OVERWRITE,\n  MERGE,\n  ACK_USER_WRITE,\n  LISTEN_COMPLETE\n}\n\n/**\n * @interface\n */\nexport interface Operation {\n  source: OperationSource;\n\n  type: OperationType;\n\n  path: Path;\n\n  operationForChild(childName: string): Operation | null;\n}\n\nexport interface OperationSource {\n  fromUser: boolean;\n  fromServer: boolean;\n  queryId: string | null;\n  tagged: boolean;\n}\n\nexport function newOperationSourceUser(): OperationSource {\n  return {\n    fromUser: true,\n    fromServer: false,\n    queryId: null,\n    tagged: false\n  };\n}\n\nexport function newOperationSourceServer(): OperationSource {\n  return {\n    fromUser: false,\n    fromServer: true,\n    queryId: null,\n    tagged: false\n  };\n}\n\nexport function newOperationSourceServerTaggedQuery(\n  queryId: string\n): OperationSource {\n  return {\n    fromUser: false,\n    fromServer: true,\n    queryId,\n    tagged: true\n  };\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { newEmptyPath, Path, pathIsEmpty, pathPopFront } from '../util/Path';\n\nimport { Operation, OperationSource, OperationType } from './Operation';\n\nexport class ListenComplete implements Operation {\n  /** @inheritDoc */\n  type = OperationType.LISTEN_COMPLETE;\n\n  constructor(public source: OperationSource, public path: Path) {}\n\n  operationForChild(childName: string): ListenComplete {\n    if (pathIsEmpty(this.path)) {\n      return new ListenComplete(this.source, newEmptyPath());\n    } else {\n      return new ListenComplete(this.source, pathPopFront(this.path));\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Node } from '../snap/Node';\nimport { newEmptyPath, Path, pathIsEmpty, pathPopFront } from '../util/Path';\n\nimport { Operation, OperationSource, OperationType } from './Operation';\n\nexport class Overwrite implements Operation {\n  /** @inheritDoc */\n  type = OperationType.OVERWRITE;\n\n  constructor(\n    public source: OperationSource,\n    public path: Path,\n    public snap: Node\n  ) {}\n\n  operationForChild(childName: string): Overwrite {\n    if (pathIsEmpty(this.path)) {\n      return new Overwrite(\n        this.source,\n        newEmptyPath(),\n        this.snap.getImmediateChild(childName)\n      );\n    } else {\n      return new Overwrite(this.source, pathPopFront(this.path), this.snap);\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { Node } from '../snap/Node';\nimport { ImmutableTree } from '../util/ImmutableTree';\nimport {\n  newEmptyPath,\n  Path,\n  pathGetFront,\n  pathIsEmpty,\n  pathPopFront\n} from '../util/Path';\n\nimport { Operation, OperationSource, OperationType } from './Operation';\nimport { Overwrite } from './Overwrite';\n\nexport class Merge implements Operation {\n  /** @inheritDoc */\n  type = OperationType.MERGE;\n\n  constructor(\n    /** @inheritDoc */ public source: OperationSource,\n    /** @inheritDoc */ public path: Path,\n    /** @inheritDoc */ public children: ImmutableTree<Node>\n  ) {}\n  operationForChild(childName: string): Operation {\n    if (pathIsEmpty(this.path)) {\n      const childTree = this.children.subtree(new Path(childName));\n      if (childTree.isEmpty()) {\n        // This child is unaffected\n        return null;\n      } else if (childTree.value) {\n        // We have a snapshot for the child in question.  This becomes an overwrite of the child.\n        return new Overwrite(this.source, newEmptyPath(), childTree.value);\n      } else {\n        // This is a merge at a deeper level\n        return new Merge(this.source, newEmptyPath(), childTree);\n      }\n    } else {\n      assert(\n        pathGetFront(this.path) === childName,\n        \"Can't get a merge for a child not on the path of the operation\"\n      );\n      return new Merge(this.source, pathPopFront(this.path), this.children);\n    }\n  }\n  toString(): string {\n    return (\n      'Operation(' +\n      this.path +\n      ': ' +\n      this.source.toString() +\n      ' merge: ' +\n      this.children.toString() +\n      ')'\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Node } from '../snap/Node';\nimport { Path, pathGetFront, pathIsEmpty } from '../util/Path';\n\n/**\n * A cache node only stores complete children. Additionally it holds a flag whether the node can be considered fully\n * initialized in the sense that we know at one point in time this represented a valid state of the world, e.g.\n * initialized with data from the server, or a complete overwrite by the client. The filtered flag also tracks\n * whether a node potentially had children removed due to a filter.\n */\nexport class CacheNode {\n  constructor(\n    private node_: Node,\n    private fullyInitialized_: boolean,\n    private filtered_: boolean\n  ) {}\n\n  /**\n   * Returns whether this node was fully initialized with either server data or a complete overwrite by the client\n   */\n  isFullyInitialized(): boolean {\n    return this.fullyInitialized_;\n  }\n\n  /**\n   * Returns whether this node is potentially missing children due to a filter applied to the node\n   */\n  isFiltered(): boolean {\n    return this.filtered_;\n  }\n\n  isCompleteForPath(path: Path): boolean {\n    if (pathIsEmpty(path)) {\n      return this.isFullyInitialized() && !this.filtered_;\n    }\n\n    const childKey = pathGetFront(path);\n    return this.isCompleteForChild(childKey);\n  }\n\n  isCompleteForChild(key: string): boolean {\n    return (\n      (this.isFullyInitialized() && !this.filtered_) || this.node_.hasChild(key)\n    );\n  }\n\n  getNode(): Node {\n    return this.node_;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assertionError } from '@firebase/util';\n\nimport { Index } from '../snap/indexes/Index';\nimport { NamedNode, Node } from '../snap/Node';\n\nimport { Change, ChangeType, changeChildMoved } from './Change';\nimport { Event } from './Event';\nimport { EventRegistration, QueryContext } from './EventRegistration';\n\n/**\n * An EventGenerator is used to convert \"raw\" changes (Change) as computed by the\n * CacheDiffer into actual events (Event) that can be raised.  See generateEventsForChanges()\n * for details.\n *\n */\nexport class EventGenerator {\n  index_: Index;\n\n  constructor(public query_: QueryContext) {\n    this.index_ = this.query_._queryParams.getIndex();\n  }\n}\n\n/**\n * Given a set of raw changes (no moved events and prevName not specified yet), and a set of\n * EventRegistrations that should be notified of these changes, generate the actual events to be raised.\n *\n * Notes:\n *  - child_moved events will be synthesized at this time for any child_changed events that affect\n *    our index.\n *  - prevName will be calculated based on the index ordering.\n */\nexport function eventGeneratorGenerateEventsForChanges(\n  eventGenerator: EventGenerator,\n  changes: Change[],\n  eventCache: Node,\n  eventRegistrations: EventRegistration[]\n): Event[] {\n  const events: Event[] = [];\n  const moves: Change[] = [];\n\n  changes.forEach(change => {\n    if (\n      change.type === ChangeType.CHILD_CHANGED &&\n      eventGenerator.index_.indexedValueChanged(\n        change.oldSnap as Node,\n        change.snapshotNode\n      )\n    ) {\n      moves.push(changeChildMoved(change.childName, change.snapshotNode));\n    }\n  });\n\n  eventGeneratorGenerateEventsForType(\n    eventGenerator,\n    events,\n    ChangeType.CHILD_REMOVED,\n    changes,\n    eventRegistrations,\n    eventCache\n  );\n  eventGeneratorGenerateEventsForType(\n    eventGenerator,\n    events,\n    ChangeType.CHILD_ADDED,\n    changes,\n    eventRegistrations,\n    eventCache\n  );\n  eventGeneratorGenerateEventsForType(\n    eventGenerator,\n    events,\n    ChangeType.CHILD_MOVED,\n    moves,\n    eventRegistrations,\n    eventCache\n  );\n  eventGeneratorGenerateEventsForType(\n    eventGenerator,\n    events,\n    ChangeType.CHILD_CHANGED,\n    changes,\n    eventRegistrations,\n    eventCache\n  );\n  eventGeneratorGenerateEventsForType(\n    eventGenerator,\n    events,\n    ChangeType.VALUE,\n    changes,\n    eventRegistrations,\n    eventCache\n  );\n\n  return events;\n}\n\n/**\n * Given changes of a single change type, generate the corresponding events.\n */\nfunction eventGeneratorGenerateEventsForType(\n  eventGenerator: EventGenerator,\n  events: Event[],\n  eventType: string,\n  changes: Change[],\n  registrations: EventRegistration[],\n  eventCache: Node\n) {\n  const filteredChanges = changes.filter(change => change.type === eventType);\n\n  filteredChanges.sort((a, b) =>\n    eventGeneratorCompareChanges(eventGenerator, a, b)\n  );\n  filteredChanges.forEach(change => {\n    const materializedChange = eventGeneratorMaterializeSingleChange(\n      eventGenerator,\n      change,\n      eventCache\n    );\n    registrations.forEach(registration => {\n      if (registration.respondsTo(change.type)) {\n        events.push(\n          registration.createEvent(materializedChange, eventGenerator.query_)\n        );\n      }\n    });\n  });\n}\n\nfunction eventGeneratorMaterializeSingleChange(\n  eventGenerator: EventGenerator,\n  change: Change,\n  eventCache: Node\n): Change {\n  if (change.type === 'value' || change.type === 'child_removed') {\n    return change;\n  } else {\n    change.prevName = eventCache.getPredecessorChildName(\n      change.childName,\n      change.snapshotNode,\n      eventGenerator.index_\n    );\n    return change;\n  }\n}\n\nfunction eventGeneratorCompareChanges(\n  eventGenerator: EventGenerator,\n  a: Change,\n  b: Change\n) {\n  if (a.childName == null || b.childName == null) {\n    throw assertionError('Should only compare child_ events.');\n  }\n  const aWrapped = new NamedNode(a.childName, a.snapshotNode);\n  const bWrapped = new NamedNode(b.childName, b.snapshotNode);\n  return eventGenerator.index_.compare(aWrapped, bWrapped);\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Node } from '../snap/Node';\n\nimport { CacheNode } from './CacheNode';\n\n/**\n * Stores the data we have cached for a view.\n *\n * serverSnap is the cached server data, eventSnap is the cached event data (server data plus any local writes).\n */\nexport interface ViewCache {\n  readonly eventCache: CacheNode;\n  readonly serverCache: CacheNode;\n}\n\nexport function newViewCache(\n  eventCache: CacheNode,\n  serverCache: CacheNode\n): ViewCache {\n  return { eventCache, serverCache };\n}\n\nexport function viewCacheUpdateEventSnap(\n  viewCache: ViewCache,\n  eventSnap: Node,\n  complete: boolean,\n  filtered: boolean\n): ViewCache {\n  return newViewCache(\n    new CacheNode(eventSnap, complete, filtered),\n    viewCache.serverCache\n  );\n}\n\nexport function viewCacheUpdateServerSnap(\n  viewCache: ViewCache,\n  serverSnap: Node,\n  complete: boolean,\n  filtered: boolean\n): ViewCache {\n  return newViewCache(\n    viewCache.eventCache,\n    new CacheNode(serverSnap, complete, filtered)\n  );\n}\n\nexport function viewCacheGetCompleteEventSnap(\n  viewCache: ViewCache\n): Node | null {\n  return viewCache.eventCache.isFullyInitialized()\n    ? viewCache.eventCache.getNode()\n    : null;\n}\n\nexport function viewCacheGetCompleteServerSnap(\n  viewCache: ViewCache\n): Node | null {\n  return viewCache.serverCache.isFullyInitialized()\n    ? viewCache.serverCache.getNode()\n    : null;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  newEmptyPath,\n  Path,\n  pathChild,\n  pathGetFront,\n  pathIsEmpty,\n  pathPopFront\n} from './Path';\nimport { SortedMap } from './SortedMap';\nimport { each, stringCompare } from './util';\n\nlet emptyChildrenSingleton: SortedMap<string, ImmutableTree<null>>;\n\n/**\n * Singleton empty children collection.\n *\n */\nconst EmptyChildren = (): SortedMap<string, ImmutableTree<null>> => {\n  if (!emptyChildrenSingleton) {\n    emptyChildrenSingleton = new SortedMap<string, ImmutableTree<null>>(\n      stringCompare\n    );\n  }\n  return emptyChildrenSingleton;\n};\n\n/**\n * A tree with immutable elements.\n */\nexport class ImmutableTree<T> {\n  static fromObject<T>(obj: { [k: string]: T }): ImmutableTree<T> {\n    let tree: ImmutableTree<T> = new ImmutableTree<T>(null);\n    each(obj, (childPath: string, childSnap: T) => {\n      tree = tree.set(new Path(childPath), childSnap);\n    });\n    return tree;\n  }\n\n  constructor(\n    public readonly value: T | null,\n    public readonly children: SortedMap<\n      string,\n      ImmutableTree<T>\n    > = EmptyChildren()\n  ) {}\n\n  /**\n   * True if the value is empty and there are no children\n   */\n  isEmpty(): boolean {\n    return this.value === null && this.children.isEmpty();\n  }\n\n  /**\n   * Given a path and predicate, return the first node and the path to that node\n   * where the predicate returns true.\n   *\n   * TODO Do a perf test -- If we're creating a bunch of `{path: value:}`\n   * objects on the way back out, it may be better to pass down a pathSoFar obj.\n   *\n   * @param relativePath - The remainder of the path\n   * @param predicate - The predicate to satisfy to return a node\n   */\n  findRootMostMatchingPathAndValue(\n    relativePath: Path,\n    predicate: (a: T) => boolean\n  ): { path: Path; value: T } | null {\n    if (this.value != null && predicate(this.value)) {\n      return { path: newEmptyPath(), value: this.value };\n    } else {\n      if (pathIsEmpty(relativePath)) {\n        return null;\n      } else {\n        const front = pathGetFront(relativePath);\n        const child = this.children.get(front);\n        if (child !== null) {\n          const childExistingPathAndValue =\n            child.findRootMostMatchingPathAndValue(\n              pathPopFront(relativePath),\n              predicate\n            );\n          if (childExistingPathAndValue != null) {\n            const fullPath = pathChild(\n              new Path(front),\n              childExistingPathAndValue.path\n            );\n            return { path: fullPath, value: childExistingPathAndValue.value };\n          } else {\n            return null;\n          }\n        } else {\n          return null;\n        }\n      }\n    }\n  }\n\n  /**\n   * Find, if it exists, the shortest subpath of the given path that points a defined\n   * value in the tree\n   */\n  findRootMostValueAndPath(\n    relativePath: Path\n  ): { path: Path; value: T } | null {\n    return this.findRootMostMatchingPathAndValue(relativePath, () => true);\n  }\n\n  /**\n   * @returns The subtree at the given path\n   */\n  subtree(relativePath: Path): ImmutableTree<T> {\n    if (pathIsEmpty(relativePath)) {\n      return this;\n    } else {\n      const front = pathGetFront(relativePath);\n      const childTree = this.children.get(front);\n      if (childTree !== null) {\n        return childTree.subtree(pathPopFront(relativePath));\n      } else {\n        return new ImmutableTree<T>(null);\n      }\n    }\n  }\n\n  /**\n   * Sets a value at the specified path.\n   *\n   * @param relativePath - Path to set value at.\n   * @param toSet - Value to set.\n   * @returns Resulting tree.\n   */\n  set(relativePath: Path, toSet: T | null): ImmutableTree<T> {\n    if (pathIsEmpty(relativePath)) {\n      return new ImmutableTree(toSet, this.children);\n    } else {\n      const front = pathGetFront(relativePath);\n      const child = this.children.get(front) || new ImmutableTree<T>(null);\n      const newChild = child.set(pathPopFront(relativePath), toSet);\n      const newChildren = this.children.insert(front, newChild);\n      return new ImmutableTree(this.value, newChildren);\n    }\n  }\n\n  /**\n   * Removes the value at the specified path.\n   *\n   * @param relativePath - Path to value to remove.\n   * @returns Resulting tree.\n   */\n  remove(relativePath: Path): ImmutableTree<T> {\n    if (pathIsEmpty(relativePath)) {\n      if (this.children.isEmpty()) {\n        return new ImmutableTree<T>(null);\n      } else {\n        return new ImmutableTree(null, this.children);\n      }\n    } else {\n      const front = pathGetFront(relativePath);\n      const child = this.children.get(front);\n      if (child) {\n        const newChild = child.remove(pathPopFront(relativePath));\n        let newChildren;\n        if (newChild.isEmpty()) {\n          newChildren = this.children.remove(front);\n        } else {\n          newChildren = this.children.insert(front, newChild);\n        }\n        if (this.value === null && newChildren.isEmpty()) {\n          return new ImmutableTree<T>(null);\n        } else {\n          return new ImmutableTree(this.value, newChildren);\n        }\n      } else {\n        return this;\n      }\n    }\n  }\n\n  /**\n   * Gets a value from the tree.\n   *\n   * @param relativePath - Path to get value for.\n   * @returns Value at path, or null.\n   */\n  get(relativePath: Path): T | null {\n    if (pathIsEmpty(relativePath)) {\n      return this.value;\n    } else {\n      const front = pathGetFront(relativePath);\n      const child = this.children.get(front);\n      if (child) {\n        return child.get(pathPopFront(relativePath));\n      } else {\n        return null;\n      }\n    }\n  }\n\n  /**\n   * Replace the subtree at the specified path with the given new tree.\n   *\n   * @param relativePath - Path to replace subtree for.\n   * @param newTree - New tree.\n   * @returns Resulting tree.\n   */\n  setTree(relativePath: Path, newTree: ImmutableTree<T>): ImmutableTree<T> {\n    if (pathIsEmpty(relativePath)) {\n      return newTree;\n    } else {\n      const front = pathGetFront(relativePath);\n      const child = this.children.get(front) || new ImmutableTree<T>(null);\n      const newChild = child.setTree(pathPopFront(relativePath), newTree);\n      let newChildren;\n      if (newChild.isEmpty()) {\n        newChildren = this.children.remove(front);\n      } else {\n        newChildren = this.children.insert(front, newChild);\n      }\n      return new ImmutableTree(this.value, newChildren);\n    }\n  }\n\n  /**\n   * Performs a depth first fold on this tree. Transforms a tree into a single\n   * value, given a function that operates on the path to a node, an optional\n   * current value, and a map of child names to folded subtrees\n   */\n  fold<V>(fn: (path: Path, value: T, children: { [k: string]: V }) => V): V {\n    return this.fold_(newEmptyPath(), fn);\n  }\n\n  /**\n   * Recursive helper for public-facing fold() method\n   */\n  private fold_<V>(\n    pathSoFar: Path,\n    fn: (path: Path, value: T | null, children: { [k: string]: V }) => V\n  ): V {\n    const accum: { [k: string]: V } = {};\n    this.children.inorderTraversal(\n      (childKey: string, childTree: ImmutableTree<T>) => {\n        accum[childKey] = childTree.fold_(pathChild(pathSoFar, childKey), fn);\n      }\n    );\n    return fn(pathSoFar, this.value, accum);\n  }\n\n  /**\n   * Find the first matching value on the given path. Return the result of applying f to it.\n   */\n  findOnPath<V>(path: Path, f: (path: Path, value: T) => V | null): V | null {\n    return this.findOnPath_(path, newEmptyPath(), f);\n  }\n\n  private findOnPath_<V>(\n    pathToFollow: Path,\n    pathSoFar: Path,\n    f: (path: Path, value: T) => V | null\n  ): V | null {\n    const result = this.value ? f(pathSoFar, this.value) : false;\n    if (result) {\n      return result;\n    } else {\n      if (pathIsEmpty(pathToFollow)) {\n        return null;\n      } else {\n        const front = pathGetFront(pathToFollow)!;\n        const nextChild = this.children.get(front);\n        if (nextChild) {\n          return nextChild.findOnPath_(\n            pathPopFront(pathToFollow),\n            pathChild(pathSoFar, front),\n            f\n          );\n        } else {\n          return null;\n        }\n      }\n    }\n  }\n\n  foreachOnPath(\n    path: Path,\n    f: (path: Path, value: T) => void\n  ): ImmutableTree<T> {\n    return this.foreachOnPath_(path, newEmptyPath(), f);\n  }\n\n  private foreachOnPath_(\n    pathToFollow: Path,\n    currentRelativePath: Path,\n    f: (path: Path, value: T) => void\n  ): ImmutableTree<T> {\n    if (pathIsEmpty(pathToFollow)) {\n      return this;\n    } else {\n      if (this.value) {\n        f(currentRelativePath, this.value);\n      }\n      const front = pathGetFront(pathToFollow);\n      const nextChild = this.children.get(front);\n      if (nextChild) {\n        return nextChild.foreachOnPath_(\n          pathPopFront(pathToFollow),\n          pathChild(currentRelativePath, front),\n          f\n        );\n      } else {\n        return new ImmutableTree<T>(null);\n      }\n    }\n  }\n\n  /**\n   * Calls the given function for each node in the tree that has a value.\n   *\n   * @param f - A function to be called with the path from the root of the tree to\n   * a node, and the value at that node. Called in depth-first order.\n   */\n  foreach(f: (path: Path, value: T) => void) {\n    this.foreach_(newEmptyPath(), f);\n  }\n\n  private foreach_(\n    currentRelativePath: Path,\n    f: (path: Path, value: T) => void\n  ) {\n    this.children.inorderTraversal((childName, childTree) => {\n      childTree.foreach_(pathChild(currentRelativePath, childName), f);\n    });\n    if (this.value) {\n      f(currentRelativePath, this.value);\n    }\n  }\n\n  foreachChild(f: (name: string, value: T) => void) {\n    this.children.inorderTraversal(\n      (childName: string, childTree: ImmutableTree<T>) => {\n        if (childTree.value) {\n          f(childName, childTree.value);\n        }\n      }\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { ChildrenNode } from './snap/ChildrenNode';\nimport { PRIORITY_INDEX } from './snap/indexes/PriorityIndex';\nimport { NamedNode, Node } from './snap/Node';\nimport { ImmutableTree } from './util/ImmutableTree';\nimport {\n  newEmptyPath,\n  newRelativePath,\n  Path,\n  pathChild,\n  pathIsEmpty\n} from './util/Path';\nimport { each } from './util/util';\n\n/**\n * This class holds a collection of writes that can be applied to nodes in unison. It abstracts away the logic with\n * dealing with priority writes and multiple nested writes. At any given path there is only allowed to be one write\n * modifying that path. Any write to an existing path or shadowing an existing path will modify that existing write\n * to reflect the write added.\n */\nexport class CompoundWrite {\n  constructor(public writeTree_: ImmutableTree<Node>) {}\n\n  static empty(): CompoundWrite {\n    return new CompoundWrite(new ImmutableTree(null));\n  }\n}\n\nexport function compoundWriteAddWrite(\n  compoundWrite: CompoundWrite,\n  path: Path,\n  node: Node\n): CompoundWrite {\n  if (pathIsEmpty(path)) {\n    return new CompoundWrite(new ImmutableTree(node));\n  } else {\n    const rootmost = compoundWrite.writeTree_.findRootMostValueAndPath(path);\n    if (rootmost != null) {\n      const rootMostPath = rootmost.path;\n      let value = rootmost.value;\n      const relativePath = newRelativePath(rootMostPath, path);\n      value = value.updateChild(relativePath, node);\n      return new CompoundWrite(\n        compoundWrite.writeTree_.set(rootMostPath, value)\n      );\n    } else {\n      const subtree = new ImmutableTree(node);\n      const newWriteTree = compoundWrite.writeTree_.setTree(path, subtree);\n      return new CompoundWrite(newWriteTree);\n    }\n  }\n}\n\nexport function compoundWriteAddWrites(\n  compoundWrite: CompoundWrite,\n  path: Path,\n  updates: { [name: string]: Node }\n): CompoundWrite {\n  let newWrite = compoundWrite;\n  each(updates, (childKey: string, node: Node) => {\n    newWrite = compoundWriteAddWrite(newWrite, pathChild(path, childKey), node);\n  });\n  return newWrite;\n}\n\n/**\n * Will remove a write at the given path and deeper paths. This will <em>not</em> modify a write at a higher\n * location, which must be removed by calling this method with that path.\n *\n * @param compoundWrite - The CompoundWrite to remove.\n * @param path - The path at which a write and all deeper writes should be removed\n * @returns The new CompoundWrite with the removed path\n */\nexport function compoundWriteRemoveWrite(\n  compoundWrite: CompoundWrite,\n  path: Path\n): CompoundWrite {\n  if (pathIsEmpty(path)) {\n    return CompoundWrite.empty();\n  } else {\n    const newWriteTree = compoundWrite.writeTree_.setTree(\n      path,\n      new ImmutableTree<Node>(null)\n    );\n    return new CompoundWrite(newWriteTree);\n  }\n}\n\n/**\n * Returns whether this CompoundWrite will fully overwrite a node at a given location and can therefore be\n * considered \"complete\".\n *\n * @param compoundWrite - The CompoundWrite to check.\n * @param path - The path to check for\n * @returns Whether there is a complete write at that path\n */\nexport function compoundWriteHasCompleteWrite(\n  compoundWrite: CompoundWrite,\n  path: Path\n): boolean {\n  return compoundWriteGetCompleteNode(compoundWrite, path) != null;\n}\n\n/**\n * Returns a node for a path if and only if the node is a \"complete\" overwrite at that path. This will not aggregate\n * writes from deeper paths, but will return child nodes from a more shallow path.\n *\n * @param compoundWrite - The CompoundWrite to get the node from.\n * @param path - The path to get a complete write\n * @returns The node if complete at that path, or null otherwise.\n */\nexport function compoundWriteGetCompleteNode(\n  compoundWrite: CompoundWrite,\n  path: Path\n): Node | null {\n  const rootmost = compoundWrite.writeTree_.findRootMostValueAndPath(path);\n  if (rootmost != null) {\n    return compoundWrite.writeTree_\n      .get(rootmost.path)\n      .getChild(newRelativePath(rootmost.path, path));\n  } else {\n    return null;\n  }\n}\n\n/**\n * Returns all children that are guaranteed to be a complete overwrite.\n *\n * @param compoundWrite - The CompoundWrite to get children from.\n * @returns A list of all complete children.\n */\nexport function compoundWriteGetCompleteChildren(\n  compoundWrite: CompoundWrite\n): NamedNode[] {\n  const children: NamedNode[] = [];\n  const node = compoundWrite.writeTree_.value;\n  if (node != null) {\n    // If it's a leaf node, it has no children; so nothing to do.\n    if (!node.isLeafNode()) {\n      (node as ChildrenNode).forEachChild(\n        PRIORITY_INDEX,\n        (childName, childNode) => {\n          children.push(new NamedNode(childName, childNode));\n        }\n      );\n    }\n  } else {\n    compoundWrite.writeTree_.children.inorderTraversal(\n      (childName, childTree) => {\n        if (childTree.value != null) {\n          children.push(new NamedNode(childName, childTree.value));\n        }\n      }\n    );\n  }\n  return children;\n}\n\nexport function compoundWriteChildCompoundWrite(\n  compoundWrite: CompoundWrite,\n  path: Path\n): CompoundWrite {\n  if (pathIsEmpty(path)) {\n    return compoundWrite;\n  } else {\n    const shadowingNode = compoundWriteGetCompleteNode(compoundWrite, path);\n    if (shadowingNode != null) {\n      return new CompoundWrite(new ImmutableTree(shadowingNode));\n    } else {\n      return new CompoundWrite(compoundWrite.writeTree_.subtree(path));\n    }\n  }\n}\n\n/**\n * Returns true if this CompoundWrite is empty and therefore does not modify any nodes.\n * @returns Whether this CompoundWrite is empty\n */\nexport function compoundWriteIsEmpty(compoundWrite: CompoundWrite): boolean {\n  return compoundWrite.writeTree_.isEmpty();\n}\n\n/**\n * Applies this CompoundWrite to a node. The node is returned with all writes from this CompoundWrite applied to the\n * node\n * @param node - The node to apply this CompoundWrite to\n * @returns The node with all writes applied\n */\nexport function compoundWriteApply(\n  compoundWrite: CompoundWrite,\n  node: Node\n): Node {\n  return applySubtreeWrite(newEmptyPath(), compoundWrite.writeTree_, node);\n}\n\nfunction applySubtreeWrite(\n  relativePath: Path,\n  writeTree: ImmutableTree<Node>,\n  node: Node\n): Node {\n  if (writeTree.value != null) {\n    // Since there a write is always a leaf, we're done here\n    return node.updateChild(relativePath, writeTree.value);\n  } else {\n    let priorityWrite = null;\n    writeTree.children.inorderTraversal((childKey, childTree) => {\n      if (childKey === '.priority') {\n        // Apply priorities at the end so we don't update priorities for either empty nodes or forget\n        // to apply priorities to empty nodes that are later filled\n        assert(\n          childTree.value !== null,\n          'Priority writes must always be leaf nodes'\n        );\n        priorityWrite = childTree.value;\n      } else {\n        node = applySubtreeWrite(\n          pathChild(relativePath, childKey),\n          childTree,\n          node\n        );\n      }\n    });\n    // If there was a priority write, we only apply it if the node is not empty\n    if (!node.getChild(relativePath).isEmpty() && priorityWrite !== null) {\n      node = node.updateChild(\n        pathChild(relativePath, '.priority'),\n        priorityWrite\n      );\n    }\n    return node;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, assertionError, safeGet } from '@firebase/util';\n\nimport {\n  CompoundWrite,\n  compoundWriteAddWrite,\n  compoundWriteAddWrites,\n  compoundWriteApply,\n  compoundWriteChildCompoundWrite,\n  compoundWriteGetCompleteChildren,\n  compoundWriteGetCompleteNode,\n  compoundWriteHasCompleteWrite,\n  compoundWriteIsEmpty,\n  compoundWriteRemoveWrite\n} from './CompoundWrite';\nimport { ChildrenNode } from './snap/ChildrenNode';\nimport { Index } from './snap/indexes/Index';\nimport { PRIORITY_INDEX } from './snap/indexes/PriorityIndex';\nimport { NamedNode, Node } from './snap/Node';\nimport {\n  newEmptyPath,\n  newRelativePath,\n  Path,\n  pathChild,\n  pathContains,\n  pathGetFront,\n  pathIsEmpty,\n  pathPopFront\n} from './util/Path';\nimport { each } from './util/util';\nimport { CacheNode } from './view/CacheNode';\n\n/**\n * Defines a single user-initiated write operation. May be the result of a set(), transaction(), or update() call. In\n * the case of a set() or transaction, snap wil be non-null.  In the case of an update(), children will be non-null.\n */\nexport interface WriteRecord {\n  writeId: number;\n  path: Path;\n  snap?: Node | null;\n  children?: { [k: string]: Node } | null;\n  visible: boolean;\n}\n\n/**\n * Create a new WriteTreeRef for the given path. For use with a new sync point at the given path.\n *\n */\nexport function writeTreeChildWrites(\n  writeTree: WriteTree,\n  path: Path\n): WriteTreeRef {\n  return newWriteTreeRef(path, writeTree);\n}\n\n/**\n * Record a new overwrite from user code.\n *\n * @param visible - This is set to false by some transactions. It should be excluded from event caches\n */\nexport function writeTreeAddOverwrite(\n  writeTree: WriteTree,\n  path: Path,\n  snap: Node,\n  writeId: number,\n  visible?: boolean\n) {\n  assert(\n    writeId > writeTree.lastWriteId,\n    'Stacking an older write on top of newer ones'\n  );\n  if (visible === undefined) {\n    visible = true;\n  }\n  writeTree.allWrites.push({\n    path,\n    snap,\n    writeId,\n    visible\n  });\n\n  if (visible) {\n    writeTree.visibleWrites = compoundWriteAddWrite(\n      writeTree.visibleWrites,\n      path,\n      snap\n    );\n  }\n  writeTree.lastWriteId = writeId;\n}\n\n/**\n * Record a new merge from user code.\n */\nexport function writeTreeAddMerge(\n  writeTree: WriteTree,\n  path: Path,\n  changedChildren: { [k: string]: Node },\n  writeId: number\n) {\n  assert(\n    writeId > writeTree.lastWriteId,\n    'Stacking an older merge on top of newer ones'\n  );\n  writeTree.allWrites.push({\n    path,\n    children: changedChildren,\n    writeId,\n    visible: true\n  });\n\n  writeTree.visibleWrites = compoundWriteAddWrites(\n    writeTree.visibleWrites,\n    path,\n    changedChildren\n  );\n  writeTree.lastWriteId = writeId;\n}\n\nexport function writeTreeGetWrite(\n  writeTree: WriteTree,\n  writeId: number\n): WriteRecord | null {\n  for (let i = 0; i < writeTree.allWrites.length; i++) {\n    const record = writeTree.allWrites[i];\n    if (record.writeId === writeId) {\n      return record;\n    }\n  }\n  return null;\n}\n\n/**\n * Remove a write (either an overwrite or merge) that has been successfully acknowledge by the server. Recalculates\n * the tree if necessary.  We return true if it may have been visible, meaning views need to reevaluate.\n *\n * @returns true if the write may have been visible (meaning we'll need to reevaluate / raise\n * events as a result).\n */\nexport function writeTreeRemoveWrite(\n  writeTree: WriteTree,\n  writeId: number\n): boolean {\n  // Note: disabling this check. It could be a transaction that preempted another transaction, and thus was applied\n  // out of order.\n  //const validClear = revert || this.allWrites_.length === 0 || writeId <= this.allWrites_[0].writeId;\n  //assert(validClear, \"Either we don't have this write, or it's the first one in the queue\");\n\n  const idx = writeTree.allWrites.findIndex(s => {\n    return s.writeId === writeId;\n  });\n  assert(idx >= 0, 'removeWrite called with nonexistent writeId.');\n  const writeToRemove = writeTree.allWrites[idx];\n  writeTree.allWrites.splice(idx, 1);\n\n  let removedWriteWasVisible = writeToRemove.visible;\n  let removedWriteOverlapsWithOtherWrites = false;\n\n  let i = writeTree.allWrites.length - 1;\n\n  while (removedWriteWasVisible && i >= 0) {\n    const currentWrite = writeTree.allWrites[i];\n    if (currentWrite.visible) {\n      if (\n        i >= idx &&\n        writeTreeRecordContainsPath_(currentWrite, writeToRemove.path)\n      ) {\n        // The removed write was completely shadowed by a subsequent write.\n        removedWriteWasVisible = false;\n      } else if (pathContains(writeToRemove.path, currentWrite.path)) {\n        // Either we're covering some writes or they're covering part of us (depending on which came first).\n        removedWriteOverlapsWithOtherWrites = true;\n      }\n    }\n    i--;\n  }\n\n  if (!removedWriteWasVisible) {\n    return false;\n  } else if (removedWriteOverlapsWithOtherWrites) {\n    // There's some shadowing going on. Just rebuild the visible writes from scratch.\n    writeTreeResetTree_(writeTree);\n    return true;\n  } else {\n    // There's no shadowing.  We can safely just remove the write(s) from visibleWrites.\n    if (writeToRemove.snap) {\n      writeTree.visibleWrites = compoundWriteRemoveWrite(\n        writeTree.visibleWrites,\n        writeToRemove.path\n      );\n    } else {\n      const children = writeToRemove.children;\n      each(children, (childName: string) => {\n        writeTree.visibleWrites = compoundWriteRemoveWrite(\n          writeTree.visibleWrites,\n          pathChild(writeToRemove.path, childName)\n        );\n      });\n    }\n    return true;\n  }\n}\n\nfunction writeTreeRecordContainsPath_(\n  writeRecord: WriteRecord,\n  path: Path\n): boolean {\n  if (writeRecord.snap) {\n    return pathContains(writeRecord.path, path);\n  } else {\n    for (const childName in writeRecord.children) {\n      if (\n        writeRecord.children.hasOwnProperty(childName) &&\n        pathContains(pathChild(writeRecord.path, childName), path)\n      ) {\n        return true;\n      }\n    }\n    return false;\n  }\n}\n\n/**\n * Re-layer the writes and merges into a tree so we can efficiently calculate event snapshots\n */\nfunction writeTreeResetTree_(writeTree: WriteTree) {\n  writeTree.visibleWrites = writeTreeLayerTree_(\n    writeTree.allWrites,\n    writeTreeDefaultFilter_,\n    newEmptyPath()\n  );\n  if (writeTree.allWrites.length > 0) {\n    writeTree.lastWriteId =\n      writeTree.allWrites[writeTree.allWrites.length - 1].writeId;\n  } else {\n    writeTree.lastWriteId = -1;\n  }\n}\n\n/**\n * The default filter used when constructing the tree. Keep everything that's visible.\n */\nfunction writeTreeDefaultFilter_(write: WriteRecord) {\n  return write.visible;\n}\n\n/**\n * Static method. Given an array of WriteRecords, a filter for which ones to include, and a path, construct the tree of\n * event data at that path.\n */\nfunction writeTreeLayerTree_(\n  writes: WriteRecord[],\n  filter: (w: WriteRecord) => boolean,\n  treeRoot: Path\n): CompoundWrite {\n  let compoundWrite = CompoundWrite.empty();\n  for (let i = 0; i < writes.length; ++i) {\n    const write = writes[i];\n    // Theory, a later set will either:\n    // a) abort a relevant transaction, so no need to worry about excluding it from calculating that transaction\n    // b) not be relevant to a transaction (separate branch), so again will not affect the data for that transaction\n    if (filter(write)) {\n      const writePath = write.path;\n      let relativePath: Path;\n      if (write.snap) {\n        if (pathContains(treeRoot, writePath)) {\n          relativePath = newRelativePath(treeRoot, writePath);\n          compoundWrite = compoundWriteAddWrite(\n            compoundWrite,\n            relativePath,\n            write.snap\n          );\n        } else if (pathContains(writePath, treeRoot)) {\n          relativePath = newRelativePath(writePath, treeRoot);\n          compoundWrite = compoundWriteAddWrite(\n            compoundWrite,\n            newEmptyPath(),\n            write.snap.getChild(relativePath)\n          );\n        } else {\n          // There is no overlap between root path and write path, ignore write\n        }\n      } else if (write.children) {\n        if (pathContains(treeRoot, writePath)) {\n          relativePath = newRelativePath(treeRoot, writePath);\n          compoundWrite = compoundWriteAddWrites(\n            compoundWrite,\n            relativePath,\n            write.children\n          );\n        } else if (pathContains(writePath, treeRoot)) {\n          relativePath = newRelativePath(writePath, treeRoot);\n          if (pathIsEmpty(relativePath)) {\n            compoundWrite = compoundWriteAddWrites(\n              compoundWrite,\n              newEmptyPath(),\n              write.children\n            );\n          } else {\n            const child = safeGet(write.children, pathGetFront(relativePath));\n            if (child) {\n              // There exists a child in this node that matches the root path\n              const deepNode = child.getChild(pathPopFront(relativePath));\n              compoundWrite = compoundWriteAddWrite(\n                compoundWrite,\n                newEmptyPath(),\n                deepNode\n              );\n            }\n          }\n        } else {\n          // There is no overlap between root path and write path, ignore write\n        }\n      } else {\n        throw assertionError('WriteRecord should have .snap or .children');\n      }\n    }\n  }\n  return compoundWrite;\n}\n\n/**\n * Return a complete snapshot for the given path if there's visible write data at that path, else null.\n * No server data is considered.\n *\n */\nexport function writeTreeGetCompleteWriteData(\n  writeTree: WriteTree,\n  path: Path\n): Node | null {\n  return compoundWriteGetCompleteNode(writeTree.visibleWrites, path);\n}\n\n/**\n * Given optional, underlying server data, and an optional set of constraints (exclude some sets, include hidden\n * writes), attempt to calculate a complete snapshot for the given path\n *\n * @param writeIdsToExclude - An optional set to be excluded\n * @param includeHiddenWrites - Defaults to false, whether or not to layer on writes with visible set to false\n */\nexport function writeTreeCalcCompleteEventCache(\n  writeTree: WriteTree,\n  treePath: Path,\n  completeServerCache: Node | null,\n  writeIdsToExclude?: number[],\n  includeHiddenWrites?: boolean\n): Node | null {\n  if (!writeIdsToExclude && !includeHiddenWrites) {\n    const shadowingNode = compoundWriteGetCompleteNode(\n      writeTree.visibleWrites,\n      treePath\n    );\n    if (shadowingNode != null) {\n      return shadowingNode;\n    } else {\n      const subMerge = compoundWriteChildCompoundWrite(\n        writeTree.visibleWrites,\n        treePath\n      );\n      if (compoundWriteIsEmpty(subMerge)) {\n        return completeServerCache;\n      } else if (\n        completeServerCache == null &&\n        !compoundWriteHasCompleteWrite(subMerge, newEmptyPath())\n      ) {\n        // We wouldn't have a complete snapshot, since there's no underlying data and no complete shadow\n        return null;\n      } else {\n        const layeredCache = completeServerCache || ChildrenNode.EMPTY_NODE;\n        return compoundWriteApply(subMerge, layeredCache);\n      }\n    }\n  } else {\n    const merge = compoundWriteChildCompoundWrite(\n      writeTree.visibleWrites,\n      treePath\n    );\n    if (!includeHiddenWrites && compoundWriteIsEmpty(merge)) {\n      return completeServerCache;\n    } else {\n      // If the server cache is null, and we don't have a complete cache, we need to return null\n      if (\n        !includeHiddenWrites &&\n        completeServerCache == null &&\n        !compoundWriteHasCompleteWrite(merge, newEmptyPath())\n      ) {\n        return null;\n      } else {\n        const filter = function (write: WriteRecord) {\n          return (\n            (write.visible || includeHiddenWrites) &&\n            (!writeIdsToExclude ||\n              !~writeIdsToExclude.indexOf(write.writeId)) &&\n            (pathContains(write.path, treePath) ||\n              pathContains(treePath, write.path))\n          );\n        };\n        const mergeAtPath = writeTreeLayerTree_(\n          writeTree.allWrites,\n          filter,\n          treePath\n        );\n        const layeredCache = completeServerCache || ChildrenNode.EMPTY_NODE;\n        return compoundWriteApply(mergeAtPath, layeredCache);\n      }\n    }\n  }\n}\n\n/**\n * With optional, underlying server data, attempt to return a children node of children that we have complete data for.\n * Used when creating new views, to pre-fill their complete event children snapshot.\n */\nexport function writeTreeCalcCompleteEventChildren(\n  writeTree: WriteTree,\n  treePath: Path,\n  completeServerChildren: ChildrenNode | null\n) {\n  let completeChildren = ChildrenNode.EMPTY_NODE as Node;\n  const topLevelSet = compoundWriteGetCompleteNode(\n    writeTree.visibleWrites,\n    treePath\n  );\n  if (topLevelSet) {\n    if (!topLevelSet.isLeafNode()) {\n      // we're shadowing everything. Return the children.\n      topLevelSet.forEachChild(PRIORITY_INDEX, (childName, childSnap) => {\n        completeChildren = completeChildren.updateImmediateChild(\n          childName,\n          childSnap\n        );\n      });\n    }\n    return completeChildren;\n  } else if (completeServerChildren) {\n    // Layer any children we have on top of this\n    // We know we don't have a top-level set, so just enumerate existing children\n    const merge = compoundWriteChildCompoundWrite(\n      writeTree.visibleWrites,\n      treePath\n    );\n    completeServerChildren.forEachChild(\n      PRIORITY_INDEX,\n      (childName, childNode) => {\n        const node = compoundWriteApply(\n          compoundWriteChildCompoundWrite(merge, new Path(childName)),\n          childNode\n        );\n        completeChildren = completeChildren.updateImmediateChild(\n          childName,\n          node\n        );\n      }\n    );\n    // Add any complete children we have from the set\n    compoundWriteGetCompleteChildren(merge).forEach(namedNode => {\n      completeChildren = completeChildren.updateImmediateChild(\n        namedNode.name,\n        namedNode.node\n      );\n    });\n    return completeChildren;\n  } else {\n    // We don't have anything to layer on top of. Layer on any children we have\n    // Note that we can return an empty snap if we have a defined delete\n    const merge = compoundWriteChildCompoundWrite(\n      writeTree.visibleWrites,\n      treePath\n    );\n    compoundWriteGetCompleteChildren(merge).forEach(namedNode => {\n      completeChildren = completeChildren.updateImmediateChild(\n        namedNode.name,\n        namedNode.node\n      );\n    });\n    return completeChildren;\n  }\n}\n\n/**\n * Given that the underlying server data has updated, determine what, if anything, needs to be\n * applied to the event cache.\n *\n * Possibilities:\n *\n * 1. No writes are shadowing. Events should be raised, the snap to be applied comes from the server data\n *\n * 2. Some write is completely shadowing. No events to be raised\n *\n * 3. Is partially shadowed. Events\n *\n * Either existingEventSnap or existingServerSnap must exist\n */\nexport function writeTreeCalcEventCacheAfterServerOverwrite(\n  writeTree: WriteTree,\n  treePath: Path,\n  childPath: Path,\n  existingEventSnap: Node | null,\n  existingServerSnap: Node | null\n): Node | null {\n  assert(\n    existingEventSnap || existingServerSnap,\n    'Either existingEventSnap or existingServerSnap must exist'\n  );\n  const path = pathChild(treePath, childPath);\n  if (compoundWriteHasCompleteWrite(writeTree.visibleWrites, path)) {\n    // At this point we can probably guarantee that we're in case 2, meaning no events\n    // May need to check visibility while doing the findRootMostValueAndPath call\n    return null;\n  } else {\n    // No complete shadowing. We're either partially shadowing or not shadowing at all.\n    const childMerge = compoundWriteChildCompoundWrite(\n      writeTree.visibleWrites,\n      path\n    );\n    if (compoundWriteIsEmpty(childMerge)) {\n      // We're not shadowing at all. Case 1\n      return existingServerSnap.getChild(childPath);\n    } else {\n      // This could be more efficient if the serverNode + updates doesn't change the eventSnap\n      // However this is tricky to find out, since user updates don't necessary change the server\n      // snap, e.g. priority updates on empty nodes, or deep deletes. Another special case is if the server\n      // adds nodes, but doesn't change any existing writes. It is therefore not enough to\n      // only check if the updates change the serverNode.\n      // Maybe check if the merge tree contains these special cases and only do a full overwrite in that case?\n      return compoundWriteApply(\n        childMerge,\n        existingServerSnap.getChild(childPath)\n      );\n    }\n  }\n}\n\n/**\n * Returns a complete child for a given server snap after applying all user writes or null if there is no\n * complete child for this ChildKey.\n */\nexport function writeTreeCalcCompleteChild(\n  writeTree: WriteTree,\n  treePath: Path,\n  childKey: string,\n  existingServerSnap: CacheNode\n): Node | null {\n  const path = pathChild(treePath, childKey);\n  const shadowingNode = compoundWriteGetCompleteNode(\n    writeTree.visibleWrites,\n    path\n  );\n  if (shadowingNode != null) {\n    return shadowingNode;\n  } else {\n    if (existingServerSnap.isCompleteForChild(childKey)) {\n      const childMerge = compoundWriteChildCompoundWrite(\n        writeTree.visibleWrites,\n        path\n      );\n      return compoundWriteApply(\n        childMerge,\n        existingServerSnap.getNode().getImmediateChild(childKey)\n      );\n    } else {\n      return null;\n    }\n  }\n}\n\n/**\n * Returns a node if there is a complete overwrite for this path. More specifically, if there is a write at\n * a higher path, this will return the child of that write relative to the write and this path.\n * Returns null if there is no write at this path.\n */\nexport function writeTreeShadowingWrite(\n  writeTree: WriteTree,\n  path: Path\n): Node | null {\n  return compoundWriteGetCompleteNode(writeTree.visibleWrites, path);\n}\n\n/**\n * This method is used when processing child remove events on a query. If we can, we pull in children that were outside\n * the window, but may now be in the window.\n */\nexport function writeTreeCalcIndexedSlice(\n  writeTree: WriteTree,\n  treePath: Path,\n  completeServerData: Node | null,\n  startPost: NamedNode,\n  count: number,\n  reverse: boolean,\n  index: Index\n): NamedNode[] {\n  let toIterate: Node;\n  const merge = compoundWriteChildCompoundWrite(\n    writeTree.visibleWrites,\n    treePath\n  );\n  const shadowingNode = compoundWriteGetCompleteNode(merge, newEmptyPath());\n  if (shadowingNode != null) {\n    toIterate = shadowingNode;\n  } else if (completeServerData != null) {\n    toIterate = compoundWriteApply(merge, completeServerData);\n  } else {\n    // no children to iterate on\n    return [];\n  }\n  toIterate = toIterate.withIndex(index);\n  if (!toIterate.isEmpty() && !toIterate.isLeafNode()) {\n    const nodes = [];\n    const cmp = index.getCompare();\n    const iter = reverse\n      ? (toIterate as ChildrenNode).getReverseIteratorFrom(startPost, index)\n      : (toIterate as ChildrenNode).getIteratorFrom(startPost, index);\n    let next = iter.getNext();\n    while (next && nodes.length < count) {\n      if (cmp(next, startPost) !== 0) {\n        nodes.push(next);\n      }\n      next = iter.getNext();\n    }\n    return nodes;\n  } else {\n    return [];\n  }\n}\n\nexport function newWriteTree(): WriteTree {\n  return {\n    visibleWrites: CompoundWrite.empty(),\n    allWrites: [],\n    lastWriteId: -1\n  };\n}\n\n/**\n * WriteTree tracks all pending user-initiated writes and has methods to calculate the result of merging them\n * with underlying server data (to create \"event cache\" data).  Pending writes are added with addOverwrite()\n * and addMerge(), and removed with removeWrite().\n */\nexport interface WriteTree {\n  /**\n   * A tree tracking the result of applying all visible writes.  This does not include transactions with\n   * applyLocally=false or writes that are completely shadowed by other writes.\n   */\n  visibleWrites: CompoundWrite;\n\n  /**\n   * A list of all pending writes, regardless of visibility and shadowed-ness.  Used to calculate arbitrary\n   * sets of the changed data, such as hidden writes (from transactions) or changes with certain writes excluded (also\n   * used by transactions).\n   */\n  allWrites: WriteRecord[];\n\n  lastWriteId: number;\n}\n\n/**\n * If possible, returns a complete event cache, using the underlying server data if possible. In addition, can be used\n * to get a cache that includes hidden writes, and excludes arbitrary writes. Note that customizing the returned node\n * can lead to a more expensive calculation.\n *\n * @param writeIdsToExclude - Optional writes to exclude.\n * @param includeHiddenWrites - Defaults to false, whether or not to layer on writes with visible set to false\n */\nexport function writeTreeRefCalcCompleteEventCache(\n  writeTreeRef: WriteTreeRef,\n  completeServerCache: Node | null,\n  writeIdsToExclude?: number[],\n  includeHiddenWrites?: boolean\n): Node | null {\n  return writeTreeCalcCompleteEventCache(\n    writeTreeRef.writeTree,\n    writeTreeRef.treePath,\n    completeServerCache,\n    writeIdsToExclude,\n    includeHiddenWrites\n  );\n}\n\n/**\n * If possible, returns a children node containing all of the complete children we have data for. The returned data is a\n * mix of the given server data and write data.\n *\n */\nexport function writeTreeRefCalcCompleteEventChildren(\n  writeTreeRef: WriteTreeRef,\n  completeServerChildren: ChildrenNode | null\n): ChildrenNode {\n  return writeTreeCalcCompleteEventChildren(\n    writeTreeRef.writeTree,\n    writeTreeRef.treePath,\n    completeServerChildren\n  ) as ChildrenNode;\n}\n\n/**\n * Given that either the underlying server data has updated or the outstanding writes have updated, determine what,\n * if anything, needs to be applied to the event cache.\n *\n * Possibilities:\n *\n * 1. No writes are shadowing. Events should be raised, the snap to be applied comes from the server data\n *\n * 2. Some write is completely shadowing. No events to be raised\n *\n * 3. Is partially shadowed. Events should be raised\n *\n * Either existingEventSnap or existingServerSnap must exist, this is validated via an assert\n *\n *\n */\nexport function writeTreeRefCalcEventCacheAfterServerOverwrite(\n  writeTreeRef: WriteTreeRef,\n  path: Path,\n  existingEventSnap: Node | null,\n  existingServerSnap: Node | null\n): Node | null {\n  return writeTreeCalcEventCacheAfterServerOverwrite(\n    writeTreeRef.writeTree,\n    writeTreeRef.treePath,\n    path,\n    existingEventSnap,\n    existingServerSnap\n  );\n}\n\n/**\n * Returns a node if there is a complete overwrite for this path. More specifically, if there is a write at\n * a higher path, this will return the child of that write relative to the write and this path.\n * Returns null if there is no write at this path.\n *\n */\nexport function writeTreeRefShadowingWrite(\n  writeTreeRef: WriteTreeRef,\n  path: Path\n): Node | null {\n  return writeTreeShadowingWrite(\n    writeTreeRef.writeTree,\n    pathChild(writeTreeRef.treePath, path)\n  );\n}\n\n/**\n * This method is used when processing child remove events on a query. If we can, we pull in children that were outside\n * the window, but may now be in the window\n */\nexport function writeTreeRefCalcIndexedSlice(\n  writeTreeRef: WriteTreeRef,\n  completeServerData: Node | null,\n  startPost: NamedNode,\n  count: number,\n  reverse: boolean,\n  index: Index\n): NamedNode[] {\n  return writeTreeCalcIndexedSlice(\n    writeTreeRef.writeTree,\n    writeTreeRef.treePath,\n    completeServerData,\n    startPost,\n    count,\n    reverse,\n    index\n  );\n}\n\n/**\n * Returns a complete child for a given server snap after applying all user writes or null if there is no\n * complete child for this ChildKey.\n */\nexport function writeTreeRefCalcCompleteChild(\n  writeTreeRef: WriteTreeRef,\n  childKey: string,\n  existingServerCache: CacheNode\n): Node | null {\n  return writeTreeCalcCompleteChild(\n    writeTreeRef.writeTree,\n    writeTreeRef.treePath,\n    childKey,\n    existingServerCache\n  );\n}\n\n/**\n * Return a WriteTreeRef for a child.\n */\nexport function writeTreeRefChild(\n  writeTreeRef: WriteTreeRef,\n  childName: string\n): WriteTreeRef {\n  return newWriteTreeRef(\n    pathChild(writeTreeRef.treePath, childName),\n    writeTreeRef.writeTree\n  );\n}\n\nexport function newWriteTreeRef(\n  path: Path,\n  writeTree: WriteTree\n): WriteTreeRef {\n  return {\n    treePath: path,\n    writeTree\n  };\n}\n\n/**\n * A WriteTreeRef wraps a WriteTree and a path, for convenient access to a particular subtree.  All of the methods\n * just proxy to the underlying WriteTree.\n *\n */\nexport interface WriteTreeRef {\n  /**\n   * The path to this particular write tree ref. Used for calling methods on writeTree_ while exposing a simpler\n   * interface to callers.\n   */\n  readonly treePath: Path;\n\n  /**\n   * * A reference to the actual tree of write data. All methods are pass-through to the tree, but with the appropriate\n   * path prefixed.\n   *\n   * This lets us make cheap references to points in the tree for sync points without having to copy and maintain all of\n   * the data.\n   */\n  readonly writeTree: WriteTree;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, assertionError } from '@firebase/util';\n\nimport {\n  Change,\n  ChangeType,\n  changeChildAdded,\n  changeChildChanged,\n  changeChildRemoved\n} from './Change';\n\nexport class ChildChangeAccumulator {\n  private readonly changeMap: Map<string, Change> = new Map();\n\n  trackChildChange(change: Change) {\n    const type = change.type;\n    const childKey = change.childName!;\n    assert(\n      type === ChangeType.CHILD_ADDED ||\n        type === ChangeType.CHILD_CHANGED ||\n        type === ChangeType.CHILD_REMOVED,\n      'Only child changes supported for tracking'\n    );\n    assert(\n      childKey !== '.priority',\n      'Only non-priority child changes can be tracked.'\n    );\n    const oldChange = this.changeMap.get(childKey);\n    if (oldChange) {\n      const oldType = oldChange.type;\n      if (\n        type === ChangeType.CHILD_ADDED &&\n        oldType === ChangeType.CHILD_REMOVED\n      ) {\n        this.changeMap.set(\n          childKey,\n          changeChildChanged(\n            childKey,\n            change.snapshotNode,\n            oldChange.snapshotNode\n          )\n        );\n      } else if (\n        type === ChangeType.CHILD_REMOVED &&\n        oldType === ChangeType.CHILD_ADDED\n      ) {\n        this.changeMap.delete(childKey);\n      } else if (\n        type === ChangeType.CHILD_REMOVED &&\n        oldType === ChangeType.CHILD_CHANGED\n      ) {\n        this.changeMap.set(\n          childKey,\n          changeChildRemoved(childKey, oldChange.oldSnap)\n        );\n      } else if (\n        type === ChangeType.CHILD_CHANGED &&\n        oldType === ChangeType.CHILD_ADDED\n      ) {\n        this.changeMap.set(\n          childKey,\n          changeChildAdded(childKey, change.snapshotNode)\n        );\n      } else if (\n        type === ChangeType.CHILD_CHANGED &&\n        oldType === ChangeType.CHILD_CHANGED\n      ) {\n        this.changeMap.set(\n          childKey,\n          changeChildChanged(childKey, change.snapshotNode, oldChange.oldSnap)\n        );\n      } else {\n        throw assertionError(\n          'Illegal combination of changes: ' +\n            change +\n            ' occurred after ' +\n            oldChange\n        );\n      }\n    } else {\n      this.changeMap.set(childKey, change);\n    }\n  }\n\n  getChanges(): Change[] {\n    return Array.from(this.changeMap.values());\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Index } from '../snap/indexes/Index';\nimport { NamedNode, Node } from '../snap/Node';\nimport {\n  WriteTreeRef,\n  writeTreeRefCalcCompleteChild,\n  writeTreeRefCalcIndexedSlice\n} from '../WriteTree';\n\nimport { CacheNode } from './CacheNode';\nimport { ViewCache, viewCacheGetCompleteServerSnap } from './ViewCache';\n\n/**\n * Since updates to filtered nodes might require nodes to be pulled in from \"outside\" the node, this interface\n * can help to get complete children that can be pulled in.\n * A class implementing this interface takes potentially multiple sources (e.g. user writes, server data from\n * other views etc.) to try it's best to get a complete child that might be useful in pulling into the view.\n *\n * @interface\n */\nexport interface CompleteChildSource {\n  getCompleteChild(childKey: string): Node | null;\n\n  getChildAfterChild(\n    index: Index,\n    child: NamedNode,\n    reverse: boolean\n  ): NamedNode | null;\n}\n\n/**\n * An implementation of CompleteChildSource that never returns any additional children\n */\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexport class NoCompleteChildSource_ implements CompleteChildSource {\n  getCompleteChild(childKey?: string): Node | null {\n    return null;\n  }\n  getChildAfterChild(\n    index?: Index,\n    child?: NamedNode,\n    reverse?: boolean\n  ): NamedNode | null {\n    return null;\n  }\n}\n\n/**\n * Singleton instance.\n */\nexport const NO_COMPLETE_CHILD_SOURCE = new NoCompleteChildSource_();\n\n/**\n * An implementation of CompleteChildSource that uses a WriteTree in addition to any other server data or\n * old event caches available to calculate complete children.\n */\nexport class WriteTreeCompleteChildSource implements CompleteChildSource {\n  constructor(\n    private writes_: WriteTreeRef,\n    private viewCache_: ViewCache,\n    private optCompleteServerCache_: Node | null = null\n  ) {}\n  getCompleteChild(childKey: string): Node | null {\n    const node = this.viewCache_.eventCache;\n    if (node.isCompleteForChild(childKey)) {\n      return node.getNode().getImmediateChild(childKey);\n    } else {\n      const serverNode =\n        this.optCompleteServerCache_ != null\n          ? new CacheNode(this.optCompleteServerCache_, true, false)\n          : this.viewCache_.serverCache;\n      return writeTreeRefCalcCompleteChild(this.writes_, childKey, serverNode);\n    }\n  }\n  getChildAfterChild(\n    index: Index,\n    child: NamedNode,\n    reverse: boolean\n  ): NamedNode | null {\n    const completeServerData =\n      this.optCompleteServerCache_ != null\n        ? this.optCompleteServerCache_\n        : viewCacheGetCompleteServerSnap(this.viewCache_);\n    const nodes = writeTreeRefCalcIndexedSlice(\n      this.writes_,\n      completeServerData,\n      child,\n      1,\n      reverse,\n      index\n    );\n    if (nodes.length === 0) {\n      return null;\n    } else {\n      return nodes[0];\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, assertionError } from '@firebase/util';\n\nimport { AckUserWrite } from '../operation/AckUserWrite';\nimport { Merge } from '../operation/Merge';\nimport { Operation, OperationType } from '../operation/Operation';\nimport { Overwrite } from '../operation/Overwrite';\nimport { ChildrenNode } from '../snap/ChildrenNode';\nimport { KEY_INDEX } from '../snap/indexes/KeyIndex';\nimport { Node } from '../snap/Node';\nimport { ImmutableTree } from '../util/ImmutableTree';\nimport {\n  newEmptyPath,\n  Path,\n  pathChild,\n  pathGetBack,\n  pathGetFront,\n  pathGetLength,\n  pathIsEmpty,\n  pathParent,\n  pathPopFront\n} from '../util/Path';\nimport {\n  WriteTreeRef,\n  writeTreeRefCalcCompleteChild,\n  writeTreeRefCalcCompleteEventCache,\n  writeTreeRefCalcCompleteEventChildren,\n  writeTreeRefCalcEventCacheAfterServerOverwrite,\n  writeTreeRefShadowingWrite\n} from '../WriteTree';\n\nimport { Change, changeValue } from './Change';\nimport { ChildChangeAccumulator } from './ChildChangeAccumulator';\nimport {\n  CompleteChildSource,\n  NO_COMPLETE_CHILD_SOURCE,\n  WriteTreeCompleteChildSource\n} from './CompleteChildSource';\nimport { NodeFilter } from './filter/NodeFilter';\nimport {\n  ViewCache,\n  viewCacheGetCompleteEventSnap,\n  viewCacheGetCompleteServerSnap,\n  viewCacheUpdateEventSnap,\n  viewCacheUpdateServerSnap\n} from './ViewCache';\n\nexport interface ProcessorResult {\n  readonly viewCache: ViewCache;\n  readonly changes: Change[];\n}\n\nexport interface ViewProcessor {\n  readonly filter: NodeFilter;\n}\n\nexport function newViewProcessor(filter: NodeFilter): ViewProcessor {\n  return { filter };\n}\n\nexport function viewProcessorAssertIndexed(\n  viewProcessor: ViewProcessor,\n  viewCache: ViewCache\n): void {\n  assert(\n    viewCache.eventCache.getNode().isIndexed(viewProcessor.filter.getIndex()),\n    'Event snap not indexed'\n  );\n  assert(\n    viewCache.serverCache.getNode().isIndexed(viewProcessor.filter.getIndex()),\n    'Server snap not indexed'\n  );\n}\n\nexport function viewProcessorApplyOperation(\n  viewProcessor: ViewProcessor,\n  oldViewCache: ViewCache,\n  operation: Operation,\n  writesCache: WriteTreeRef,\n  completeCache: Node | null\n): ProcessorResult {\n  const accumulator = new ChildChangeAccumulator();\n  let newViewCache, filterServerNode;\n  if (operation.type === OperationType.OVERWRITE) {\n    const overwrite = operation as Overwrite;\n    if (overwrite.source.fromUser) {\n      newViewCache = viewProcessorApplyUserOverwrite(\n        viewProcessor,\n        oldViewCache,\n        overwrite.path,\n        overwrite.snap,\n        writesCache,\n        completeCache,\n        accumulator\n      );\n    } else {\n      assert(overwrite.source.fromServer, 'Unknown source.');\n      // We filter the node if it's a tagged update or the node has been previously filtered  and the\n      // update is not at the root in which case it is ok (and necessary) to mark the node unfiltered\n      // again\n      filterServerNode =\n        overwrite.source.tagged ||\n        (oldViewCache.serverCache.isFiltered() && !pathIsEmpty(overwrite.path));\n      newViewCache = viewProcessorApplyServerOverwrite(\n        viewProcessor,\n        oldViewCache,\n        overwrite.path,\n        overwrite.snap,\n        writesCache,\n        completeCache,\n        filterServerNode,\n        accumulator\n      );\n    }\n  } else if (operation.type === OperationType.MERGE) {\n    const merge = operation as Merge;\n    if (merge.source.fromUser) {\n      newViewCache = viewProcessorApplyUserMerge(\n        viewProcessor,\n        oldViewCache,\n        merge.path,\n        merge.children,\n        writesCache,\n        completeCache,\n        accumulator\n      );\n    } else {\n      assert(merge.source.fromServer, 'Unknown source.');\n      // We filter the node if it's a tagged update or the node has been previously filtered\n      filterServerNode =\n        merge.source.tagged || oldViewCache.serverCache.isFiltered();\n      newViewCache = viewProcessorApplyServerMerge(\n        viewProcessor,\n        oldViewCache,\n        merge.path,\n        merge.children,\n        writesCache,\n        completeCache,\n        filterServerNode,\n        accumulator\n      );\n    }\n  } else if (operation.type === OperationType.ACK_USER_WRITE) {\n    const ackUserWrite = operation as AckUserWrite;\n    if (!ackUserWrite.revert) {\n      newViewCache = viewProcessorAckUserWrite(\n        viewProcessor,\n        oldViewCache,\n        ackUserWrite.path,\n        ackUserWrite.affectedTree,\n        writesCache,\n        completeCache,\n        accumulator\n      );\n    } else {\n      newViewCache = viewProcessorRevertUserWrite(\n        viewProcessor,\n        oldViewCache,\n        ackUserWrite.path,\n        writesCache,\n        completeCache,\n        accumulator\n      );\n    }\n  } else if (operation.type === OperationType.LISTEN_COMPLETE) {\n    newViewCache = viewProcessorListenComplete(\n      viewProcessor,\n      oldViewCache,\n      operation.path,\n      writesCache,\n      accumulator\n    );\n  } else {\n    throw assertionError('Unknown operation type: ' + operation.type);\n  }\n  const changes = accumulator.getChanges();\n  viewProcessorMaybeAddValueEvent(oldViewCache, newViewCache, changes);\n  return { viewCache: newViewCache, changes };\n}\n\nfunction viewProcessorMaybeAddValueEvent(\n  oldViewCache: ViewCache,\n  newViewCache: ViewCache,\n  accumulator: Change[]\n): void {\n  const eventSnap = newViewCache.eventCache;\n  if (eventSnap.isFullyInitialized()) {\n    const isLeafOrEmpty =\n      eventSnap.getNode().isLeafNode() || eventSnap.getNode().isEmpty();\n    const oldCompleteSnap = viewCacheGetCompleteEventSnap(oldViewCache);\n    if (\n      accumulator.length > 0 ||\n      !oldViewCache.eventCache.isFullyInitialized() ||\n      (isLeafOrEmpty && !eventSnap.getNode().equals(oldCompleteSnap)) ||\n      !eventSnap.getNode().getPriority().equals(oldCompleteSnap.getPriority())\n    ) {\n      accumulator.push(\n        changeValue(viewCacheGetCompleteEventSnap(newViewCache))\n      );\n    }\n  }\n}\n\nfunction viewProcessorGenerateEventCacheAfterServerEvent(\n  viewProcessor: ViewProcessor,\n  viewCache: ViewCache,\n  changePath: Path,\n  writesCache: WriteTreeRef,\n  source: CompleteChildSource,\n  accumulator: ChildChangeAccumulator\n): ViewCache {\n  const oldEventSnap = viewCache.eventCache;\n  if (writeTreeRefShadowingWrite(writesCache, changePath) != null) {\n    // we have a shadowing write, ignore changes\n    return viewCache;\n  } else {\n    let newEventCache, serverNode;\n    if (pathIsEmpty(changePath)) {\n      // TODO: figure out how this plays with \"sliding ack windows\"\n      assert(\n        viewCache.serverCache.isFullyInitialized(),\n        'If change path is empty, we must have complete server data'\n      );\n      if (viewCache.serverCache.isFiltered()) {\n        // We need to special case this, because we need to only apply writes to complete children, or\n        // we might end up raising events for incomplete children. If the server data is filtered deep\n        // writes cannot be guaranteed to be complete\n        const serverCache = viewCacheGetCompleteServerSnap(viewCache);\n        const completeChildren =\n          serverCache instanceof ChildrenNode\n            ? serverCache\n            : ChildrenNode.EMPTY_NODE;\n        const completeEventChildren = writeTreeRefCalcCompleteEventChildren(\n          writesCache,\n          completeChildren\n        );\n        newEventCache = viewProcessor.filter.updateFullNode(\n          viewCache.eventCache.getNode(),\n          completeEventChildren,\n          accumulator\n        );\n      } else {\n        const completeNode = writeTreeRefCalcCompleteEventCache(\n          writesCache,\n          viewCacheGetCompleteServerSnap(viewCache)\n        );\n        newEventCache = viewProcessor.filter.updateFullNode(\n          viewCache.eventCache.getNode(),\n          completeNode,\n          accumulator\n        );\n      }\n    } else {\n      const childKey = pathGetFront(changePath);\n      if (childKey === '.priority') {\n        assert(\n          pathGetLength(changePath) === 1,\n          \"Can't have a priority with additional path components\"\n        );\n        const oldEventNode = oldEventSnap.getNode();\n        serverNode = viewCache.serverCache.getNode();\n        // we might have overwrites for this priority\n        const updatedPriority = writeTreeRefCalcEventCacheAfterServerOverwrite(\n          writesCache,\n          changePath,\n          oldEventNode,\n          serverNode\n        );\n        if (updatedPriority != null) {\n          newEventCache = viewProcessor.filter.updatePriority(\n            oldEventNode,\n            updatedPriority\n          );\n        } else {\n          // priority didn't change, keep old node\n          newEventCache = oldEventSnap.getNode();\n        }\n      } else {\n        const childChangePath = pathPopFront(changePath);\n        // update child\n        let newEventChild;\n        if (oldEventSnap.isCompleteForChild(childKey)) {\n          serverNode = viewCache.serverCache.getNode();\n          const eventChildUpdate =\n            writeTreeRefCalcEventCacheAfterServerOverwrite(\n              writesCache,\n              changePath,\n              oldEventSnap.getNode(),\n              serverNode\n            );\n          if (eventChildUpdate != null) {\n            newEventChild = oldEventSnap\n              .getNode()\n              .getImmediateChild(childKey)\n              .updateChild(childChangePath, eventChildUpdate);\n          } else {\n            // Nothing changed, just keep the old child\n            newEventChild = oldEventSnap.getNode().getImmediateChild(childKey);\n          }\n        } else {\n          newEventChild = writeTreeRefCalcCompleteChild(\n            writesCache,\n            childKey,\n            viewCache.serverCache\n          );\n        }\n        if (newEventChild != null) {\n          newEventCache = viewProcessor.filter.updateChild(\n            oldEventSnap.getNode(),\n            childKey,\n            newEventChild,\n            childChangePath,\n            source,\n            accumulator\n          );\n        } else {\n          // no complete child available or no change\n          newEventCache = oldEventSnap.getNode();\n        }\n      }\n    }\n    return viewCacheUpdateEventSnap(\n      viewCache,\n      newEventCache,\n      oldEventSnap.isFullyInitialized() || pathIsEmpty(changePath),\n      viewProcessor.filter.filtersNodes()\n    );\n  }\n}\n\nfunction viewProcessorApplyServerOverwrite(\n  viewProcessor: ViewProcessor,\n  oldViewCache: ViewCache,\n  changePath: Path,\n  changedSnap: Node,\n  writesCache: WriteTreeRef,\n  completeCache: Node | null,\n  filterServerNode: boolean,\n  accumulator: ChildChangeAccumulator\n): ViewCache {\n  const oldServerSnap = oldViewCache.serverCache;\n  let newServerCache;\n  const serverFilter = filterServerNode\n    ? viewProcessor.filter\n    : viewProcessor.filter.getIndexedFilter();\n  if (pathIsEmpty(changePath)) {\n    newServerCache = serverFilter.updateFullNode(\n      oldServerSnap.getNode(),\n      changedSnap,\n      null\n    );\n  } else if (serverFilter.filtersNodes() && !oldServerSnap.isFiltered()) {\n    // we want to filter the server node, but we didn't filter the server node yet, so simulate a full update\n    const newServerNode = oldServerSnap\n      .getNode()\n      .updateChild(changePath, changedSnap);\n    newServerCache = serverFilter.updateFullNode(\n      oldServerSnap.getNode(),\n      newServerNode,\n      null\n    );\n  } else {\n    const childKey = pathGetFront(changePath);\n    if (\n      !oldServerSnap.isCompleteForPath(changePath) &&\n      pathGetLength(changePath) > 1\n    ) {\n      // We don't update incomplete nodes with updates intended for other listeners\n      return oldViewCache;\n    }\n    const childChangePath = pathPopFront(changePath);\n    const childNode = oldServerSnap.getNode().getImmediateChild(childKey);\n    const newChildNode = childNode.updateChild(childChangePath, changedSnap);\n    if (childKey === '.priority') {\n      newServerCache = serverFilter.updatePriority(\n        oldServerSnap.getNode(),\n        newChildNode\n      );\n    } else {\n      newServerCache = serverFilter.updateChild(\n        oldServerSnap.getNode(),\n        childKey,\n        newChildNode,\n        childChangePath,\n        NO_COMPLETE_CHILD_SOURCE,\n        null\n      );\n    }\n  }\n  const newViewCache = viewCacheUpdateServerSnap(\n    oldViewCache,\n    newServerCache,\n    oldServerSnap.isFullyInitialized() || pathIsEmpty(changePath),\n    serverFilter.filtersNodes()\n  );\n  const source = new WriteTreeCompleteChildSource(\n    writesCache,\n    newViewCache,\n    completeCache\n  );\n  return viewProcessorGenerateEventCacheAfterServerEvent(\n    viewProcessor,\n    newViewCache,\n    changePath,\n    writesCache,\n    source,\n    accumulator\n  );\n}\n\nfunction viewProcessorApplyUserOverwrite(\n  viewProcessor: ViewProcessor,\n  oldViewCache: ViewCache,\n  changePath: Path,\n  changedSnap: Node,\n  writesCache: WriteTreeRef,\n  completeCache: Node | null,\n  accumulator: ChildChangeAccumulator\n): ViewCache {\n  const oldEventSnap = oldViewCache.eventCache;\n  let newViewCache, newEventCache;\n  const source = new WriteTreeCompleteChildSource(\n    writesCache,\n    oldViewCache,\n    completeCache\n  );\n  if (pathIsEmpty(changePath)) {\n    newEventCache = viewProcessor.filter.updateFullNode(\n      oldViewCache.eventCache.getNode(),\n      changedSnap,\n      accumulator\n    );\n    newViewCache = viewCacheUpdateEventSnap(\n      oldViewCache,\n      newEventCache,\n      true,\n      viewProcessor.filter.filtersNodes()\n    );\n  } else {\n    const childKey = pathGetFront(changePath);\n    if (childKey === '.priority') {\n      newEventCache = viewProcessor.filter.updatePriority(\n        oldViewCache.eventCache.getNode(),\n        changedSnap\n      );\n      newViewCache = viewCacheUpdateEventSnap(\n        oldViewCache,\n        newEventCache,\n        oldEventSnap.isFullyInitialized(),\n        oldEventSnap.isFiltered()\n      );\n    } else {\n      const childChangePath = pathPopFront(changePath);\n      const oldChild = oldEventSnap.getNode().getImmediateChild(childKey);\n      let newChild;\n      if (pathIsEmpty(childChangePath)) {\n        // Child overwrite, we can replace the child\n        newChild = changedSnap;\n      } else {\n        const childNode = source.getCompleteChild(childKey);\n        if (childNode != null) {\n          if (\n            pathGetBack(childChangePath) === '.priority' &&\n            childNode.getChild(pathParent(childChangePath)).isEmpty()\n          ) {\n            // This is a priority update on an empty node. If this node exists on the server, the\n            // server will send down the priority in the update, so ignore for now\n            newChild = childNode;\n          } else {\n            newChild = childNode.updateChild(childChangePath, changedSnap);\n          }\n        } else {\n          // There is no complete child node available\n          newChild = ChildrenNode.EMPTY_NODE;\n        }\n      }\n      if (!oldChild.equals(newChild)) {\n        const newEventSnap = viewProcessor.filter.updateChild(\n          oldEventSnap.getNode(),\n          childKey,\n          newChild,\n          childChangePath,\n          source,\n          accumulator\n        );\n        newViewCache = viewCacheUpdateEventSnap(\n          oldViewCache,\n          newEventSnap,\n          oldEventSnap.isFullyInitialized(),\n          viewProcessor.filter.filtersNodes()\n        );\n      } else {\n        newViewCache = oldViewCache;\n      }\n    }\n  }\n  return newViewCache;\n}\n\nfunction viewProcessorCacheHasChild(\n  viewCache: ViewCache,\n  childKey: string\n): boolean {\n  return viewCache.eventCache.isCompleteForChild(childKey);\n}\n\nfunction viewProcessorApplyUserMerge(\n  viewProcessor: ViewProcessor,\n  viewCache: ViewCache,\n  path: Path,\n  changedChildren: ImmutableTree<Node>,\n  writesCache: WriteTreeRef,\n  serverCache: Node | null,\n  accumulator: ChildChangeAccumulator\n): ViewCache {\n  // HACK: In the case of a limit query, there may be some changes that bump things out of the\n  // window leaving room for new items.  It's important we process these changes first, so we\n  // iterate the changes twice, first processing any that affect items currently in view.\n  // TODO: I consider an item \"in view\" if cacheHasChild is true, which checks both the server\n  // and event snap.  I'm not sure if this will result in edge cases when a child is in one but\n  // not the other.\n  let curViewCache = viewCache;\n  changedChildren.foreach((relativePath, childNode) => {\n    const writePath = pathChild(path, relativePath);\n    if (viewProcessorCacheHasChild(viewCache, pathGetFront(writePath))) {\n      curViewCache = viewProcessorApplyUserOverwrite(\n        viewProcessor,\n        curViewCache,\n        writePath,\n        childNode,\n        writesCache,\n        serverCache,\n        accumulator\n      );\n    }\n  });\n\n  changedChildren.foreach((relativePath, childNode) => {\n    const writePath = pathChild(path, relativePath);\n    if (!viewProcessorCacheHasChild(viewCache, pathGetFront(writePath))) {\n      curViewCache = viewProcessorApplyUserOverwrite(\n        viewProcessor,\n        curViewCache,\n        writePath,\n        childNode,\n        writesCache,\n        serverCache,\n        accumulator\n      );\n    }\n  });\n\n  return curViewCache;\n}\n\nfunction viewProcessorApplyMerge(\n  viewProcessor: ViewProcessor,\n  node: Node,\n  merge: ImmutableTree<Node>\n): Node {\n  merge.foreach((relativePath, childNode) => {\n    node = node.updateChild(relativePath, childNode);\n  });\n  return node;\n}\n\nfunction viewProcessorApplyServerMerge(\n  viewProcessor: ViewProcessor,\n  viewCache: ViewCache,\n  path: Path,\n  changedChildren: ImmutableTree<Node>,\n  writesCache: WriteTreeRef,\n  serverCache: Node | null,\n  filterServerNode: boolean,\n  accumulator: ChildChangeAccumulator\n): ViewCache {\n  // If we don't have a cache yet, this merge was intended for a previously listen in the same location. Ignore it and\n  // wait for the complete data update coming soon.\n  if (\n    viewCache.serverCache.getNode().isEmpty() &&\n    !viewCache.serverCache.isFullyInitialized()\n  ) {\n    return viewCache;\n  }\n\n  // HACK: In the case of a limit query, there may be some changes that bump things out of the\n  // window leaving room for new items.  It's important we process these changes first, so we\n  // iterate the changes twice, first processing any that affect items currently in view.\n  // TODO: I consider an item \"in view\" if cacheHasChild is true, which checks both the server\n  // and event snap.  I'm not sure if this will result in edge cases when a child is in one but\n  // not the other.\n  let curViewCache = viewCache;\n  let viewMergeTree: ImmutableTree<Node>;\n  if (pathIsEmpty(path)) {\n    viewMergeTree = changedChildren;\n  } else {\n    viewMergeTree = new ImmutableTree<Node>(null).setTree(\n      path,\n      changedChildren\n    );\n  }\n  const serverNode = viewCache.serverCache.getNode();\n  viewMergeTree.children.inorderTraversal((childKey, childTree) => {\n    if (serverNode.hasChild(childKey)) {\n      const serverChild = viewCache.serverCache\n        .getNode()\n        .getImmediateChild(childKey);\n      const newChild = viewProcessorApplyMerge(\n        viewProcessor,\n        serverChild,\n        childTree\n      );\n      curViewCache = viewProcessorApplyServerOverwrite(\n        viewProcessor,\n        curViewCache,\n        new Path(childKey),\n        newChild,\n        writesCache,\n        serverCache,\n        filterServerNode,\n        accumulator\n      );\n    }\n  });\n  viewMergeTree.children.inorderTraversal((childKey, childMergeTree) => {\n    const isUnknownDeepMerge =\n      !viewCache.serverCache.isCompleteForChild(childKey) &&\n      childMergeTree.value === null;\n    if (!serverNode.hasChild(childKey) && !isUnknownDeepMerge) {\n      const serverChild = viewCache.serverCache\n        .getNode()\n        .getImmediateChild(childKey);\n      const newChild = viewProcessorApplyMerge(\n        viewProcessor,\n        serverChild,\n        childMergeTree\n      );\n      curViewCache = viewProcessorApplyServerOverwrite(\n        viewProcessor,\n        curViewCache,\n        new Path(childKey),\n        newChild,\n        writesCache,\n        serverCache,\n        filterServerNode,\n        accumulator\n      );\n    }\n  });\n\n  return curViewCache;\n}\n\nfunction viewProcessorAckUserWrite(\n  viewProcessor: ViewProcessor,\n  viewCache: ViewCache,\n  ackPath: Path,\n  affectedTree: ImmutableTree<boolean>,\n  writesCache: WriteTreeRef,\n  completeCache: Node | null,\n  accumulator: ChildChangeAccumulator\n): ViewCache {\n  if (writeTreeRefShadowingWrite(writesCache, ackPath) != null) {\n    return viewCache;\n  }\n\n  // Only filter server node if it is currently filtered\n  const filterServerNode = viewCache.serverCache.isFiltered();\n\n  // Essentially we'll just get our existing server cache for the affected paths and re-apply it as a server update\n  // now that it won't be shadowed.\n  const serverCache = viewCache.serverCache;\n  if (affectedTree.value != null) {\n    // This is an overwrite.\n    if (\n      (pathIsEmpty(ackPath) && serverCache.isFullyInitialized()) ||\n      serverCache.isCompleteForPath(ackPath)\n    ) {\n      return viewProcessorApplyServerOverwrite(\n        viewProcessor,\n        viewCache,\n        ackPath,\n        serverCache.getNode().getChild(ackPath),\n        writesCache,\n        completeCache,\n        filterServerNode,\n        accumulator\n      );\n    } else if (pathIsEmpty(ackPath)) {\n      // This is a goofy edge case where we are acking data at this location but don't have full data.  We\n      // should just re-apply whatever we have in our cache as a merge.\n      let changedChildren = new ImmutableTree<Node>(null);\n      serverCache.getNode().forEachChild(KEY_INDEX, (name, node) => {\n        changedChildren = changedChildren.set(new Path(name), node);\n      });\n      return viewProcessorApplyServerMerge(\n        viewProcessor,\n        viewCache,\n        ackPath,\n        changedChildren,\n        writesCache,\n        completeCache,\n        filterServerNode,\n        accumulator\n      );\n    } else {\n      return viewCache;\n    }\n  } else {\n    // This is a merge.\n    let changedChildren = new ImmutableTree<Node>(null);\n    affectedTree.foreach((mergePath, value) => {\n      const serverCachePath = pathChild(ackPath, mergePath);\n      if (serverCache.isCompleteForPath(serverCachePath)) {\n        changedChildren = changedChildren.set(\n          mergePath,\n          serverCache.getNode().getChild(serverCachePath)\n        );\n      }\n    });\n    return viewProcessorApplyServerMerge(\n      viewProcessor,\n      viewCache,\n      ackPath,\n      changedChildren,\n      writesCache,\n      completeCache,\n      filterServerNode,\n      accumulator\n    );\n  }\n}\n\nfunction viewProcessorListenComplete(\n  viewProcessor: ViewProcessor,\n  viewCache: ViewCache,\n  path: Path,\n  writesCache: WriteTreeRef,\n  accumulator: ChildChangeAccumulator\n): ViewCache {\n  const oldServerNode = viewCache.serverCache;\n  const newViewCache = viewCacheUpdateServerSnap(\n    viewCache,\n    oldServerNode.getNode(),\n    oldServerNode.isFullyInitialized() || pathIsEmpty(path),\n    oldServerNode.isFiltered()\n  );\n  return viewProcessorGenerateEventCacheAfterServerEvent(\n    viewProcessor,\n    newViewCache,\n    path,\n    writesCache,\n    NO_COMPLETE_CHILD_SOURCE,\n    accumulator\n  );\n}\n\nfunction viewProcessorRevertUserWrite(\n  viewProcessor: ViewProcessor,\n  viewCache: ViewCache,\n  path: Path,\n  writesCache: WriteTreeRef,\n  completeServerCache: Node | null,\n  accumulator: ChildChangeAccumulator\n): ViewCache {\n  let complete;\n  if (writeTreeRefShadowingWrite(writesCache, path) != null) {\n    return viewCache;\n  } else {\n    const source = new WriteTreeCompleteChildSource(\n      writesCache,\n      viewCache,\n      completeServerCache\n    );\n    const oldEventCache = viewCache.eventCache.getNode();\n    let newEventCache;\n    if (pathIsEmpty(path) || pathGetFront(path) === '.priority') {\n      let newNode;\n      if (viewCache.serverCache.isFullyInitialized()) {\n        newNode = writeTreeRefCalcCompleteEventCache(\n          writesCache,\n          viewCacheGetCompleteServerSnap(viewCache)\n        );\n      } else {\n        const serverChildren = viewCache.serverCache.getNode();\n        assert(\n          serverChildren instanceof ChildrenNode,\n          'serverChildren would be complete if leaf node'\n        );\n        newNode = writeTreeRefCalcCompleteEventChildren(\n          writesCache,\n          serverChildren as ChildrenNode\n        );\n      }\n      newNode = newNode as Node;\n      newEventCache = viewProcessor.filter.updateFullNode(\n        oldEventCache,\n        newNode,\n        accumulator\n      );\n    } else {\n      const childKey = pathGetFront(path);\n      let newChild = writeTreeRefCalcCompleteChild(\n        writesCache,\n        childKey,\n        viewCache.serverCache\n      );\n      if (\n        newChild == null &&\n        viewCache.serverCache.isCompleteForChild(childKey)\n      ) {\n        newChild = oldEventCache.getImmediateChild(childKey);\n      }\n      if (newChild != null) {\n        newEventCache = viewProcessor.filter.updateChild(\n          oldEventCache,\n          childKey,\n          newChild,\n          pathPopFront(path),\n          source,\n          accumulator\n        );\n      } else if (viewCache.eventCache.getNode().hasChild(childKey)) {\n        // No complete child available, delete the existing one, if any\n        newEventCache = viewProcessor.filter.updateChild(\n          oldEventCache,\n          childKey,\n          ChildrenNode.EMPTY_NODE,\n          pathPopFront(path),\n          source,\n          accumulator\n        );\n      } else {\n        newEventCache = oldEventCache;\n      }\n      if (\n        newEventCache.isEmpty() &&\n        viewCache.serverCache.isFullyInitialized()\n      ) {\n        // We might have reverted all child writes. Maybe the old event was a leaf node\n        complete = writeTreeRefCalcCompleteEventCache(\n          writesCache,\n          viewCacheGetCompleteServerSnap(viewCache)\n        );\n        if (complete.isLeafNode()) {\n          newEventCache = viewProcessor.filter.updateFullNode(\n            newEventCache,\n            complete,\n            accumulator\n          );\n        }\n      }\n    }\n    complete =\n      viewCache.serverCache.isFullyInitialized() ||\n      writeTreeRefShadowingWrite(writesCache, newEmptyPath()) != null;\n    return viewCacheUpdateEventSnap(\n      viewCache,\n      newEventCache,\n      complete,\n      viewProcessor.filter.filtersNodes()\n    );\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { Operation, OperationType } from '../operation/Operation';\nimport { ChildrenNode } from '../snap/ChildrenNode';\nimport { PRIORITY_INDEX } from '../snap/indexes/PriorityIndex';\nimport { Node } from '../snap/Node';\nimport { Path, pathGetFront, pathIsEmpty } from '../util/Path';\nimport { WriteTreeRef } from '../WriteTree';\n\nimport { CacheNode } from './CacheNode';\nimport { Change, changeChildAdded, changeValue } from './Change';\nimport { CancelEvent, Event } from './Event';\nimport {\n  EventGenerator,\n  eventGeneratorGenerateEventsForChanges\n} from './EventGenerator';\nimport { EventRegistration, QueryContext } from './EventRegistration';\nimport { IndexedFilter } from './filter/IndexedFilter';\nimport { queryParamsGetNodeFilter } from './QueryParams';\nimport {\n  newViewCache,\n  ViewCache,\n  viewCacheGetCompleteEventSnap,\n  viewCacheGetCompleteServerSnap\n} from './ViewCache';\nimport {\n  newViewProcessor,\n  ViewProcessor,\n  viewProcessorApplyOperation,\n  viewProcessorAssertIndexed\n} from './ViewProcessor';\n\n/**\n * A view represents a specific location and query that has 1 or more event registrations.\n *\n * It does several things:\n *  - Maintains the list of event registrations for this location/query.\n *  - Maintains a cache of the data visible for this location/query.\n *  - Applies new operations (via applyOperation), updates the cache, and based on the event\n *    registrations returns the set of events to be raised.\n */\nexport class View {\n  processor_: ViewProcessor;\n  viewCache_: ViewCache;\n  eventRegistrations_: EventRegistration[] = [];\n  eventGenerator_: EventGenerator;\n\n  constructor(private query_: QueryContext, initialViewCache: ViewCache) {\n    const params = this.query_._queryParams;\n\n    const indexFilter = new IndexedFilter(params.getIndex());\n    const filter = queryParamsGetNodeFilter(params);\n\n    this.processor_ = newViewProcessor(filter);\n\n    const initialServerCache = initialViewCache.serverCache;\n    const initialEventCache = initialViewCache.eventCache;\n\n    // Don't filter server node with other filter than index, wait for tagged listen\n    const serverSnap = indexFilter.updateFullNode(\n      ChildrenNode.EMPTY_NODE,\n      initialServerCache.getNode(),\n      null\n    );\n    const eventSnap = filter.updateFullNode(\n      ChildrenNode.EMPTY_NODE,\n      initialEventCache.getNode(),\n      null\n    );\n    const newServerCache = new CacheNode(\n      serverSnap,\n      initialServerCache.isFullyInitialized(),\n      indexFilter.filtersNodes()\n    );\n    const newEventCache = new CacheNode(\n      eventSnap,\n      initialEventCache.isFullyInitialized(),\n      filter.filtersNodes()\n    );\n\n    this.viewCache_ = newViewCache(newEventCache, newServerCache);\n    this.eventGenerator_ = new EventGenerator(this.query_);\n  }\n\n  get query(): QueryContext {\n    return this.query_;\n  }\n}\n\nexport function viewGetServerCache(view: View): Node | null {\n  return view.viewCache_.serverCache.getNode();\n}\n\nexport function viewGetCompleteNode(view: View): Node | null {\n  return viewCacheGetCompleteEventSnap(view.viewCache_);\n}\n\nexport function viewGetCompleteServerCache(\n  view: View,\n  path: Path\n): Node | null {\n  const cache = viewCacheGetCompleteServerSnap(view.viewCache_);\n  if (cache) {\n    // If this isn't a \"loadsAllData\" view, then cache isn't actually a complete cache and\n    // we need to see if it contains the child we're interested in.\n    if (\n      view.query._queryParams.loadsAllData() ||\n      (!pathIsEmpty(path) &&\n        !cache.getImmediateChild(pathGetFront(path)).isEmpty())\n    ) {\n      return cache.getChild(path);\n    }\n  }\n  return null;\n}\n\nexport function viewIsEmpty(view: View): boolean {\n  return view.eventRegistrations_.length === 0;\n}\n\nexport function viewAddEventRegistration(\n  view: View,\n  eventRegistration: EventRegistration\n) {\n  view.eventRegistrations_.push(eventRegistration);\n}\n\n/**\n * @param eventRegistration - If null, remove all callbacks.\n * @param cancelError - If a cancelError is provided, appropriate cancel events will be returned.\n * @returns Cancel events, if cancelError was provided.\n */\nexport function viewRemoveEventRegistration(\n  view: View,\n  eventRegistration: EventRegistration | null,\n  cancelError?: Error\n): Event[] {\n  const cancelEvents: CancelEvent[] = [];\n  if (cancelError) {\n    assert(\n      eventRegistration == null,\n      'A cancel should cancel all event registrations.'\n    );\n    const path = view.query._path;\n    view.eventRegistrations_.forEach(registration => {\n      const maybeEvent = registration.createCancelEvent(cancelError, path);\n      if (maybeEvent) {\n        cancelEvents.push(maybeEvent);\n      }\n    });\n  }\n\n  if (eventRegistration) {\n    let remaining = [];\n    for (let i = 0; i < view.eventRegistrations_.length; ++i) {\n      const existing = view.eventRegistrations_[i];\n      if (!existing.matches(eventRegistration)) {\n        remaining.push(existing);\n      } else if (eventRegistration.hasAnyCallback()) {\n        // We're removing just this one\n        remaining = remaining.concat(view.eventRegistrations_.slice(i + 1));\n        break;\n      }\n    }\n    view.eventRegistrations_ = remaining;\n  } else {\n    view.eventRegistrations_ = [];\n  }\n  return cancelEvents;\n}\n\n/**\n * Applies the given Operation, updates our cache, and returns the appropriate events.\n */\nexport function viewApplyOperation(\n  view: View,\n  operation: Operation,\n  writesCache: WriteTreeRef,\n  completeServerCache: Node | null\n): Event[] {\n  if (\n    operation.type === OperationType.MERGE &&\n    operation.source.queryId !== null\n  ) {\n    assert(\n      viewCacheGetCompleteServerSnap(view.viewCache_),\n      'We should always have a full cache before handling merges'\n    );\n    assert(\n      viewCacheGetCompleteEventSnap(view.viewCache_),\n      'Missing event cache, even though we have a server cache'\n    );\n  }\n\n  const oldViewCache = view.viewCache_;\n  const result = viewProcessorApplyOperation(\n    view.processor_,\n    oldViewCache,\n    operation,\n    writesCache,\n    completeServerCache\n  );\n  viewProcessorAssertIndexed(view.processor_, result.viewCache);\n\n  assert(\n    result.viewCache.serverCache.isFullyInitialized() ||\n      !oldViewCache.serverCache.isFullyInitialized(),\n    'Once a server snap is complete, it should never go back'\n  );\n\n  view.viewCache_ = result.viewCache;\n\n  return viewGenerateEventsForChanges_(\n    view,\n    result.changes,\n    result.viewCache.eventCache.getNode(),\n    null\n  );\n}\n\nexport function viewGetInitialEvents(\n  view: View,\n  registration: EventRegistration\n): Event[] {\n  const eventSnap = view.viewCache_.eventCache;\n  const initialChanges: Change[] = [];\n  if (!eventSnap.getNode().isLeafNode()) {\n    const eventNode = eventSnap.getNode() as ChildrenNode;\n    eventNode.forEachChild(PRIORITY_INDEX, (key, childNode) => {\n      initialChanges.push(changeChildAdded(key, childNode));\n    });\n  }\n  if (eventSnap.isFullyInitialized()) {\n    initialChanges.push(changeValue(eventSnap.getNode()));\n  }\n  return viewGenerateEventsForChanges_(\n    view,\n    initialChanges,\n    eventSnap.getNode(),\n    registration\n  );\n}\n\nfunction viewGenerateEventsForChanges_(\n  view: View,\n  changes: Change[],\n  eventCache: Node,\n  eventRegistration?: EventRegistration\n): Event[] {\n  const registrations = eventRegistration\n    ? [eventRegistration]\n    : view.eventRegistrations_;\n  return eventGeneratorGenerateEventsForChanges(\n    view.eventGenerator_,\n    changes,\n    eventCache,\n    registrations\n  );\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { ReferenceConstructor } from '../api/Reference';\n\nimport { Operation } from './operation/Operation';\nimport { ChildrenNode } from './snap/ChildrenNode';\nimport { Node } from './snap/Node';\nimport { Path } from './util/Path';\nimport { CacheNode } from './view/CacheNode';\nimport { Event } from './view/Event';\nimport { EventRegistration, QueryContext } from './view/EventRegistration';\nimport {\n  View,\n  viewAddEventRegistration,\n  viewApplyOperation,\n  viewGetCompleteServerCache,\n  viewGetInitialEvents,\n  viewIsEmpty,\n  viewRemoveEventRegistration\n} from './view/View';\nimport { newViewCache } from './view/ViewCache';\nimport {\n  WriteTreeRef,\n  writeTreeRefCalcCompleteEventCache,\n  writeTreeRefCalcCompleteEventChildren\n} from './WriteTree';\n\nlet referenceConstructor: ReferenceConstructor;\n\n/**\n * SyncPoint represents a single location in a SyncTree with 1 or more event registrations, meaning we need to\n * maintain 1 or more Views at this location to cache server data and raise appropriate events for server changes\n * and user writes (set, transaction, update).\n *\n * It's responsible for:\n *  - Maintaining the set of 1 or more views necessary at this location (a SyncPoint with 0 views should be removed).\n *  - Proxying user / server operations to the views as appropriate (i.e. applyServerOverwrite,\n *    applyUserOverwrite, etc.)\n */\nexport class SyncPoint {\n  /**\n   * The Views being tracked at this location in the tree, stored as a map where the key is a\n   * queryId and the value is the View for that query.\n   *\n   * NOTE: This list will be quite small (usually 1, but perhaps 2 or 3; any more is an odd use case).\n   */\n  readonly views: Map<string, View> = new Map();\n}\n\nexport function syncPointSetReferenceConstructor(\n  val: ReferenceConstructor\n): void {\n  assert(\n    !referenceConstructor,\n    '__referenceConstructor has already been defined'\n  );\n  referenceConstructor = val;\n}\n\nfunction syncPointGetReferenceConstructor(): ReferenceConstructor {\n  assert(referenceConstructor, 'Reference.ts has not been loaded');\n  return referenceConstructor;\n}\n\nexport function syncPointIsEmpty(syncPoint: SyncPoint): boolean {\n  return syncPoint.views.size === 0;\n}\n\nexport function syncPointApplyOperation(\n  syncPoint: SyncPoint,\n  operation: Operation,\n  writesCache: WriteTreeRef,\n  optCompleteServerCache: Node | null\n): Event[] {\n  const queryId = operation.source.queryId;\n  if (queryId !== null) {\n    const view = syncPoint.views.get(queryId);\n    assert(view != null, 'SyncTree gave us an op for an invalid query.');\n    return viewApplyOperation(\n      view,\n      operation,\n      writesCache,\n      optCompleteServerCache\n    );\n  } else {\n    let events: Event[] = [];\n\n    for (const view of syncPoint.views.values()) {\n      events = events.concat(\n        viewApplyOperation(view, operation, writesCache, optCompleteServerCache)\n      );\n    }\n\n    return events;\n  }\n}\n\n/**\n * Get a view for the specified query.\n *\n * @param query - The query to return a view for\n * @param writesCache\n * @param serverCache\n * @param serverCacheComplete\n * @returns Events to raise.\n */\nexport function syncPointGetView(\n  syncPoint: SyncPoint,\n  query: QueryContext,\n  writesCache: WriteTreeRef,\n  serverCache: Node | null,\n  serverCacheComplete: boolean\n): View {\n  const queryId = query._queryIdentifier;\n  const view = syncPoint.views.get(queryId);\n  if (!view) {\n    // TODO: make writesCache take flag for complete server node\n    let eventCache = writeTreeRefCalcCompleteEventCache(\n      writesCache,\n      serverCacheComplete ? serverCache : null\n    );\n    let eventCacheComplete = false;\n    if (eventCache) {\n      eventCacheComplete = true;\n    } else if (serverCache instanceof ChildrenNode) {\n      eventCache = writeTreeRefCalcCompleteEventChildren(\n        writesCache,\n        serverCache\n      );\n      eventCacheComplete = false;\n    } else {\n      eventCache = ChildrenNode.EMPTY_NODE;\n      eventCacheComplete = false;\n    }\n    const viewCache = newViewCache(\n      new CacheNode(eventCache, eventCacheComplete, false),\n      new CacheNode(serverCache, serverCacheComplete, false)\n    );\n    return new View(query, viewCache);\n  }\n  return view;\n}\n\n/**\n * Add an event callback for the specified query.\n *\n * @param query\n * @param eventRegistration\n * @param writesCache\n * @param serverCache - Complete server cache, if we have it.\n * @param serverCacheComplete\n * @returns Events to raise.\n */\nexport function syncPointAddEventRegistration(\n  syncPoint: SyncPoint,\n  query: QueryContext,\n  eventRegistration: EventRegistration,\n  writesCache: WriteTreeRef,\n  serverCache: Node | null,\n  serverCacheComplete: boolean\n): Event[] {\n  const view = syncPointGetView(\n    syncPoint,\n    query,\n    writesCache,\n    serverCache,\n    serverCacheComplete\n  );\n  if (!syncPoint.views.has(query._queryIdentifier)) {\n    syncPoint.views.set(query._queryIdentifier, view);\n  }\n  // This is guaranteed to exist now, we just created anything that was missing\n  viewAddEventRegistration(view, eventRegistration);\n  return viewGetInitialEvents(view, eventRegistration);\n}\n\n/**\n * Remove event callback(s).  Return cancelEvents if a cancelError is specified.\n *\n * If query is the default query, we'll check all views for the specified eventRegistration.\n * If eventRegistration is null, we'll remove all callbacks for the specified view(s).\n *\n * @param eventRegistration - If null, remove all callbacks.\n * @param cancelError - If a cancelError is provided, appropriate cancel events will be returned.\n * @returns removed queries and any cancel events\n */\nexport function syncPointRemoveEventRegistration(\n  syncPoint: SyncPoint,\n  query: QueryContext,\n  eventRegistration: EventRegistration | null,\n  cancelError?: Error\n): { removed: QueryContext[]; events: Event[] } {\n  const queryId = query._queryIdentifier;\n  const removed: QueryContext[] = [];\n  let cancelEvents: Event[] = [];\n  const hadCompleteView = syncPointHasCompleteView(syncPoint);\n  if (queryId === 'default') {\n    // When you do ref.off(...), we search all views for the registration to remove.\n    for (const [viewQueryId, view] of syncPoint.views.entries()) {\n      cancelEvents = cancelEvents.concat(\n        viewRemoveEventRegistration(view, eventRegistration, cancelError)\n      );\n      if (viewIsEmpty(view)) {\n        syncPoint.views.delete(viewQueryId);\n\n        // We'll deal with complete views later.\n        if (!view.query._queryParams.loadsAllData()) {\n          removed.push(view.query);\n        }\n      }\n    }\n  } else {\n    // remove the callback from the specific view.\n    const view = syncPoint.views.get(queryId);\n    if (view) {\n      cancelEvents = cancelEvents.concat(\n        viewRemoveEventRegistration(view, eventRegistration, cancelError)\n      );\n      if (viewIsEmpty(view)) {\n        syncPoint.views.delete(queryId);\n\n        // We'll deal with complete views later.\n        if (!view.query._queryParams.loadsAllData()) {\n          removed.push(view.query);\n        }\n      }\n    }\n  }\n\n  if (hadCompleteView && !syncPointHasCompleteView(syncPoint)) {\n    // We removed our last complete view.\n    removed.push(\n      new (syncPointGetReferenceConstructor())(query._repo, query._path)\n    );\n  }\n\n  return { removed, events: cancelEvents };\n}\n\nexport function syncPointGetQueryViews(syncPoint: SyncPoint): View[] {\n  const result = [];\n  for (const view of syncPoint.views.values()) {\n    if (!view.query._queryParams.loadsAllData()) {\n      result.push(view);\n    }\n  }\n  return result;\n}\n\n/**\n * @param path - The path to the desired complete snapshot\n * @returns A complete cache, if it exists\n */\nexport function syncPointGetCompleteServerCache(\n  syncPoint: SyncPoint,\n  path: Path\n): Node | null {\n  let serverCache: Node | null = null;\n  for (const view of syncPoint.views.values()) {\n    serverCache = serverCache || viewGetCompleteServerCache(view, path);\n  }\n  return serverCache;\n}\n\nexport function syncPointViewForQuery(\n  syncPoint: SyncPoint,\n  query: QueryContext\n): View | null {\n  const params = query._queryParams;\n  if (params.loadsAllData()) {\n    return syncPointGetCompleteView(syncPoint);\n  } else {\n    const queryId = query._queryIdentifier;\n    return syncPoint.views.get(queryId);\n  }\n}\n\nexport function syncPointViewExistsForQuery(\n  syncPoint: SyncPoint,\n  query: QueryContext\n): boolean {\n  return syncPointViewForQuery(syncPoint, query) != null;\n}\n\nexport function syncPointHasCompleteView(syncPoint: SyncPoint): boolean {\n  return syncPointGetCompleteView(syncPoint) != null;\n}\n\nexport function syncPointGetCompleteView(syncPoint: SyncPoint): View | null {\n  for (const view of syncPoint.views.values()) {\n    if (view.query._queryParams.loadsAllData()) {\n      return view;\n    }\n  }\n  return null;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { ReferenceConstructor } from '../api/Reference';\n\nimport { AckUserWrite } from './operation/AckUserWrite';\nimport { ListenComplete } from './operation/ListenComplete';\nimport { Merge } from './operation/Merge';\nimport {\n  newOperationSourceServer,\n  newOperationSourceServerTaggedQuery,\n  newOperationSourceUser,\n  Operation\n} from './operation/Operation';\nimport { Overwrite } from './operation/Overwrite';\nimport { ChildrenNode } from './snap/ChildrenNode';\nimport { Node } from './snap/Node';\nimport {\n  SyncPoint,\n  syncPointAddEventRegistration,\n  syncPointApplyOperation,\n  syncPointGetCompleteServerCache,\n  syncPointGetCompleteView,\n  syncPointGetQueryViews,\n  syncPointGetView,\n  syncPointHasCompleteView,\n  syncPointIsEmpty,\n  syncPointRemoveEventRegistration,\n  syncPointViewExistsForQuery,\n  syncPointViewForQuery\n} from './SyncPoint';\nimport { ImmutableTree } from './util/ImmutableTree';\nimport {\n  newEmptyPath,\n  newRelativePath,\n  Path,\n  pathGetFront,\n  pathIsEmpty\n} from './util/Path';\nimport { each, errorForServerCode } from './util/util';\nimport { CacheNode } from './view/CacheNode';\nimport { Event } from './view/Event';\nimport { EventRegistration, QueryContext } from './view/EventRegistration';\nimport { View, viewGetCompleteNode, viewGetServerCache } from './view/View';\nimport {\n  newWriteTree,\n  WriteTree,\n  writeTreeAddMerge,\n  writeTreeAddOverwrite,\n  writeTreeCalcCompleteEventCache,\n  writeTreeChildWrites,\n  writeTreeGetWrite,\n  WriteTreeRef,\n  writeTreeRefChild,\n  writeTreeRemoveWrite\n} from './WriteTree';\n\nlet referenceConstructor: ReferenceConstructor;\n\nexport function syncTreeSetReferenceConstructor(\n  val: ReferenceConstructor\n): void {\n  assert(\n    !referenceConstructor,\n    '__referenceConstructor has already been defined'\n  );\n  referenceConstructor = val;\n}\n\nfunction syncTreeGetReferenceConstructor(): ReferenceConstructor {\n  assert(referenceConstructor, 'Reference.ts has not been loaded');\n  return referenceConstructor;\n}\n\nexport interface ListenProvider {\n  startListening(\n    query: QueryContext,\n    tag: number | null,\n    hashFn: () => string,\n    onComplete: (a: string, b?: unknown) => Event[]\n  ): Event[];\n\n  stopListening(a: QueryContext, b: number | null): void;\n}\n\n/**\n * Static tracker for next query tag.\n */\nlet syncTreeNextQueryTag_ = 1;\n\nexport function resetSyncTreeTag() {\n  syncTreeNextQueryTag_ = 1;\n}\n\n/**\n * SyncTree is the central class for managing event callback registration, data caching, views\n * (query processing), and event generation.  There are typically two SyncTree instances for\n * each Repo, one for the normal Firebase data, and one for the .info data.\n *\n * It has a number of responsibilities, including:\n *  - Tracking all user event callbacks (registered via addEventRegistration() and removeEventRegistration()).\n *  - Applying and caching data changes for user set(), transaction(), and update() calls\n *    (applyUserOverwrite(), applyUserMerge()).\n *  - Applying and caching data changes for server data changes (applyServerOverwrite(),\n *    applyServerMerge()).\n *  - Generating user-facing events for server and user changes (all of the apply* methods\n *    return the set of events that need to be raised as a result).\n *  - Maintaining the appropriate set of server listens to ensure we are always subscribed\n *    to the correct set of paths and queries to satisfy the current set of user event\n *    callbacks (listens are started/stopped using the provided listenProvider).\n *\n * NOTE: Although SyncTree tracks event callbacks and calculates events to raise, the actual\n * events are returned to the caller rather than raised synchronously.\n *\n */\nexport class SyncTree {\n  /**\n   * Tree of SyncPoints.  There's a SyncPoint at any location that has 1 or more views.\n   */\n  syncPointTree_: ImmutableTree<SyncPoint> = new ImmutableTree<SyncPoint>(null);\n\n  /**\n   * A tree of all pending user writes (user-initiated set()'s, transaction()'s, update()'s, etc.).\n   */\n  pendingWriteTree_: WriteTree = newWriteTree();\n\n  readonly tagToQueryMap: Map<number, string> = new Map();\n  readonly queryToTagMap: Map<string, number> = new Map();\n\n  /**\n   * @param listenProvider_ - Used by SyncTree to start / stop listening\n   *   to server data.\n   */\n  constructor(public listenProvider_: ListenProvider) {}\n}\n\n/**\n * Apply the data changes for a user-generated set() or transaction() call.\n *\n * @returns Events to raise.\n */\nexport function syncTreeApplyUserOverwrite(\n  syncTree: SyncTree,\n  path: Path,\n  newData: Node,\n  writeId: number,\n  visible?: boolean\n): Event[] {\n  // Record pending write.\n  writeTreeAddOverwrite(\n    syncTree.pendingWriteTree_,\n    path,\n    newData,\n    writeId,\n    visible\n  );\n\n  if (!visible) {\n    return [];\n  } else {\n    return syncTreeApplyOperationToSyncPoints_(\n      syncTree,\n      new Overwrite(newOperationSourceUser(), path, newData)\n    );\n  }\n}\n\n/**\n * Apply the data from a user-generated update() call\n *\n * @returns Events to raise.\n */\nexport function syncTreeApplyUserMerge(\n  syncTree: SyncTree,\n  path: Path,\n  changedChildren: { [k: string]: Node },\n  writeId: number\n): Event[] {\n  // Record pending merge.\n  writeTreeAddMerge(syncTree.pendingWriteTree_, path, changedChildren, writeId);\n\n  const changeTree = ImmutableTree.fromObject(changedChildren);\n\n  return syncTreeApplyOperationToSyncPoints_(\n    syncTree,\n    new Merge(newOperationSourceUser(), path, changeTree)\n  );\n}\n\n/**\n * Acknowledge a pending user write that was previously registered with applyUserOverwrite() or applyUserMerge().\n *\n * @param revert - True if the given write failed and needs to be reverted\n * @returns Events to raise.\n */\nexport function syncTreeAckUserWrite(\n  syncTree: SyncTree,\n  writeId: number,\n  revert: boolean = false\n) {\n  const write = writeTreeGetWrite(syncTree.pendingWriteTree_, writeId);\n  const needToReevaluate = writeTreeRemoveWrite(\n    syncTree.pendingWriteTree_,\n    writeId\n  );\n  if (!needToReevaluate) {\n    return [];\n  } else {\n    let affectedTree = new ImmutableTree<boolean>(null);\n    if (write.snap != null) {\n      // overwrite\n      affectedTree = affectedTree.set(newEmptyPath(), true);\n    } else {\n      each(write.children, (pathString: string) => {\n        affectedTree = affectedTree.set(new Path(pathString), true);\n      });\n    }\n    return syncTreeApplyOperationToSyncPoints_(\n      syncTree,\n      new AckUserWrite(write.path, affectedTree, revert)\n    );\n  }\n}\n\n/**\n * Apply new server data for the specified path..\n *\n * @returns Events to raise.\n */\nexport function syncTreeApplyServerOverwrite(\n  syncTree: SyncTree,\n  path: Path,\n  newData: Node\n): Event[] {\n  return syncTreeApplyOperationToSyncPoints_(\n    syncTree,\n    new Overwrite(newOperationSourceServer(), path, newData)\n  );\n}\n\n/**\n * Apply new server data to be merged in at the specified path.\n *\n * @returns Events to raise.\n */\nexport function syncTreeApplyServerMerge(\n  syncTree: SyncTree,\n  path: Path,\n  changedChildren: { [k: string]: Node }\n): Event[] {\n  const changeTree = ImmutableTree.fromObject(changedChildren);\n\n  return syncTreeApplyOperationToSyncPoints_(\n    syncTree,\n    new Merge(newOperationSourceServer(), path, changeTree)\n  );\n}\n\n/**\n * Apply a listen complete for a query\n *\n * @returns Events to raise.\n */\nexport function syncTreeApplyListenComplete(\n  syncTree: SyncTree,\n  path: Path\n): Event[] {\n  return syncTreeApplyOperationToSyncPoints_(\n    syncTree,\n    new ListenComplete(newOperationSourceServer(), path)\n  );\n}\n\n/**\n * Apply a listen complete for a tagged query\n *\n * @returns Events to raise.\n */\nexport function syncTreeApplyTaggedListenComplete(\n  syncTree: SyncTree,\n  path: Path,\n  tag: number\n): Event[] {\n  const queryKey = syncTreeQueryKeyForTag_(syncTree, tag);\n  if (queryKey) {\n    const r = syncTreeParseQueryKey_(queryKey);\n    const queryPath = r.path,\n      queryId = r.queryId;\n    const relativePath = newRelativePath(queryPath, path);\n    const op = new ListenComplete(\n      newOperationSourceServerTaggedQuery(queryId),\n      relativePath\n    );\n    return syncTreeApplyTaggedOperation_(syncTree, queryPath, op);\n  } else {\n    // We've already removed the query. No big deal, ignore the update\n    return [];\n  }\n}\n\n/**\n * Remove event callback(s).\n *\n * If query is the default query, we'll check all queries for the specified eventRegistration.\n * If eventRegistration is null, we'll remove all callbacks for the specified query/queries.\n *\n * @param eventRegistration - If null, all callbacks are removed.\n * @param cancelError - If a cancelError is provided, appropriate cancel events will be returned.\n * @param skipListenerDedup - When performing a `get()`, we don't add any new listeners, so no\n *  deduping needs to take place. This flag allows toggling of that behavior\n * @returns Cancel events, if cancelError was provided.\n */\nexport function syncTreeRemoveEventRegistration(\n  syncTree: SyncTree,\n  query: QueryContext,\n  eventRegistration: EventRegistration | null,\n  cancelError?: Error,\n  skipListenerDedup = false\n): Event[] {\n  // Find the syncPoint first. Then deal with whether or not it has matching listeners\n  const path = query._path;\n  const maybeSyncPoint = syncTree.syncPointTree_.get(path);\n  let cancelEvents: Event[] = [];\n  // A removal on a default query affects all queries at that location. A removal on an indexed query, even one without\n  // other query constraints, does *not* affect all queries at that location. So this check must be for 'default', and\n  // not loadsAllData().\n  if (\n    maybeSyncPoint &&\n    (query._queryIdentifier === 'default' ||\n      syncPointViewExistsForQuery(maybeSyncPoint, query))\n  ) {\n    const removedAndEvents = syncPointRemoveEventRegistration(\n      maybeSyncPoint,\n      query,\n      eventRegistration,\n      cancelError\n    );\n    if (syncPointIsEmpty(maybeSyncPoint)) {\n      syncTree.syncPointTree_ = syncTree.syncPointTree_.remove(path);\n    }\n\n    const removed = removedAndEvents.removed;\n    cancelEvents = removedAndEvents.events;\n\n    if (!skipListenerDedup) {\n      /**\n       * We may have just removed one of many listeners and can short-circuit this whole process\n       * We may also not have removed a default listener, in which case all of the descendant listeners should already be\n       * properly set up.\n       */\n\n      // Since indexed queries can shadow if they don't have other query constraints, check for loadsAllData(), instead of\n      // queryId === 'default'\n      const removingDefault =\n        -1 !==\n        removed.findIndex(query => {\n          return query._queryParams.loadsAllData();\n        });\n      const covered = syncTree.syncPointTree_.findOnPath(\n        path,\n        (relativePath, parentSyncPoint) =>\n          syncPointHasCompleteView(parentSyncPoint)\n      );\n\n      if (removingDefault && !covered) {\n        const subtree = syncTree.syncPointTree_.subtree(path);\n        // There are potentially child listeners. Determine what if any listens we need to send before executing the\n        // removal\n        if (!subtree.isEmpty()) {\n          // We need to fold over our subtree and collect the listeners to send\n          const newViews = syncTreeCollectDistinctViewsForSubTree_(subtree);\n\n          // Ok, we've collected all the listens we need. Set them up.\n          for (let i = 0; i < newViews.length; ++i) {\n            const view = newViews[i],\n              newQuery = view.query;\n            const listener = syncTreeCreateListenerForView_(syncTree, view);\n            syncTree.listenProvider_.startListening(\n              syncTreeQueryForListening_(newQuery),\n              syncTreeTagForQuery(syncTree, newQuery),\n              listener.hashFn,\n              listener.onComplete\n            );\n          }\n        }\n        // Otherwise there's nothing below us, so nothing we need to start listening on\n      }\n      // If we removed anything and we're not covered by a higher up listen, we need to stop listening on this query\n      // The above block has us covered in terms of making sure we're set up on listens lower in the tree.\n      // Also, note that if we have a cancelError, it's already been removed at the provider level.\n      if (!covered && removed.length > 0 && !cancelError) {\n        // If we removed a default, then we weren't listening on any of the other queries here. Just cancel the one\n        // default. Otherwise, we need to iterate through and cancel each individual query\n        if (removingDefault) {\n          // We don't tag default listeners\n          const defaultTag: number | null = null;\n          syncTree.listenProvider_.stopListening(\n            syncTreeQueryForListening_(query),\n            defaultTag\n          );\n        } else {\n          removed.forEach((queryToRemove: QueryContext) => {\n            const tagToRemove = syncTree.queryToTagMap.get(\n              syncTreeMakeQueryKey_(queryToRemove)\n            );\n            syncTree.listenProvider_.stopListening(\n              syncTreeQueryForListening_(queryToRemove),\n              tagToRemove\n            );\n          });\n        }\n      }\n    }\n    // Now, clear all of the tags we're tracking for the removed listens\n    syncTreeRemoveTags_(syncTree, removed);\n  } else {\n    // No-op, this listener must've been already removed\n  }\n  return cancelEvents;\n}\n\n/**\n * Apply new server data for the specified tagged query.\n *\n * @returns Events to raise.\n */\nexport function syncTreeApplyTaggedQueryOverwrite(\n  syncTree: SyncTree,\n  path: Path,\n  snap: Node,\n  tag: number\n): Event[] {\n  const queryKey = syncTreeQueryKeyForTag_(syncTree, tag);\n  if (queryKey != null) {\n    const r = syncTreeParseQueryKey_(queryKey);\n    const queryPath = r.path,\n      queryId = r.queryId;\n    const relativePath = newRelativePath(queryPath, path);\n    const op = new Overwrite(\n      newOperationSourceServerTaggedQuery(queryId),\n      relativePath,\n      snap\n    );\n    return syncTreeApplyTaggedOperation_(syncTree, queryPath, op);\n  } else {\n    // Query must have been removed already\n    return [];\n  }\n}\n\n/**\n * Apply server data to be merged in for the specified tagged query.\n *\n * @returns Events to raise.\n */\nexport function syncTreeApplyTaggedQueryMerge(\n  syncTree: SyncTree,\n  path: Path,\n  changedChildren: { [k: string]: Node },\n  tag: number\n): Event[] {\n  const queryKey = syncTreeQueryKeyForTag_(syncTree, tag);\n  if (queryKey) {\n    const r = syncTreeParseQueryKey_(queryKey);\n    const queryPath = r.path,\n      queryId = r.queryId;\n    const relativePath = newRelativePath(queryPath, path);\n    const changeTree = ImmutableTree.fromObject(changedChildren);\n    const op = new Merge(\n      newOperationSourceServerTaggedQuery(queryId),\n      relativePath,\n      changeTree\n    );\n    return syncTreeApplyTaggedOperation_(syncTree, queryPath, op);\n  } else {\n    // We've already removed the query. No big deal, ignore the update\n    return [];\n  }\n}\n\n/**\n * Add an event callback for the specified query.\n *\n * @returns Events to raise.\n */\nexport function syncTreeAddEventRegistration(\n  syncTree: SyncTree,\n  query: QueryContext,\n  eventRegistration: EventRegistration,\n  skipSetupListener = false\n): Event[] {\n  const path = query._path;\n\n  let serverCache: Node | null = null;\n  let foundAncestorDefaultView = false;\n  // Any covering writes will necessarily be at the root, so really all we need to find is the server cache.\n  // Consider optimizing this once there's a better understanding of what actual behavior will be.\n  syncTree.syncPointTree_.foreachOnPath(path, (pathToSyncPoint, sp) => {\n    const relativePath = newRelativePath(pathToSyncPoint, path);\n    serverCache =\n      serverCache || syncPointGetCompleteServerCache(sp, relativePath);\n    foundAncestorDefaultView =\n      foundAncestorDefaultView || syncPointHasCompleteView(sp);\n  });\n  let syncPoint = syncTree.syncPointTree_.get(path);\n  if (!syncPoint) {\n    syncPoint = new SyncPoint();\n    syncTree.syncPointTree_ = syncTree.syncPointTree_.set(path, syncPoint);\n  } else {\n    foundAncestorDefaultView =\n      foundAncestorDefaultView || syncPointHasCompleteView(syncPoint);\n    serverCache =\n      serverCache || syncPointGetCompleteServerCache(syncPoint, newEmptyPath());\n  }\n\n  let serverCacheComplete;\n  if (serverCache != null) {\n    serverCacheComplete = true;\n  } else {\n    serverCacheComplete = false;\n    serverCache = ChildrenNode.EMPTY_NODE;\n    const subtree = syncTree.syncPointTree_.subtree(path);\n    subtree.foreachChild((childName, childSyncPoint) => {\n      const completeCache = syncPointGetCompleteServerCache(\n        childSyncPoint,\n        newEmptyPath()\n      );\n      if (completeCache) {\n        serverCache = serverCache.updateImmediateChild(\n          childName,\n          completeCache\n        );\n      }\n    });\n  }\n\n  const viewAlreadyExists = syncPointViewExistsForQuery(syncPoint, query);\n  if (!viewAlreadyExists && !query._queryParams.loadsAllData()) {\n    // We need to track a tag for this query\n    const queryKey = syncTreeMakeQueryKey_(query);\n    assert(\n      !syncTree.queryToTagMap.has(queryKey),\n      'View does not exist, but we have a tag'\n    );\n    const tag = syncTreeGetNextQueryTag_();\n    syncTree.queryToTagMap.set(queryKey, tag);\n    syncTree.tagToQueryMap.set(tag, queryKey);\n  }\n  const writesCache = writeTreeChildWrites(syncTree.pendingWriteTree_, path);\n  let events = syncPointAddEventRegistration(\n    syncPoint,\n    query,\n    eventRegistration,\n    writesCache,\n    serverCache,\n    serverCacheComplete\n  );\n  if (!viewAlreadyExists && !foundAncestorDefaultView && !skipSetupListener) {\n    const view = syncPointViewForQuery(syncPoint, query);\n    events = events.concat(syncTreeSetupListener_(syncTree, query, view));\n  }\n  return events;\n}\n\n/**\n * Returns a complete cache, if we have one, of the data at a particular path. If the location does not have a\n * listener above it, we will get a false \"null\". This shouldn't be a problem because transactions will always\n * have a listener above, and atomic operations would correctly show a jitter of <increment value> ->\n *     <incremented total> as the write is applied locally and then acknowledged at the server.\n *\n * Note: this method will *include* hidden writes from transaction with applyLocally set to false.\n *\n * @param path - The path to the data we want\n * @param writeIdsToExclude - A specific set to be excluded\n */\nexport function syncTreeCalcCompleteEventCache(\n  syncTree: SyncTree,\n  path: Path,\n  writeIdsToExclude?: number[]\n): Node {\n  const includeHiddenSets = true;\n  const writeTree = syncTree.pendingWriteTree_;\n  const serverCache = syncTree.syncPointTree_.findOnPath(\n    path,\n    (pathSoFar, syncPoint) => {\n      const relativePath = newRelativePath(pathSoFar, path);\n      const serverCache = syncPointGetCompleteServerCache(\n        syncPoint,\n        relativePath\n      );\n      if (serverCache) {\n        return serverCache;\n      }\n    }\n  );\n  return writeTreeCalcCompleteEventCache(\n    writeTree,\n    path,\n    serverCache,\n    writeIdsToExclude,\n    includeHiddenSets\n  );\n}\n\nexport function syncTreeGetServerValue(\n  syncTree: SyncTree,\n  query: QueryContext\n): Node | null {\n  const path = query._path;\n  let serverCache: Node | null = null;\n  // Any covering writes will necessarily be at the root, so really all we need to find is the server cache.\n  // Consider optimizing this once there's a better understanding of what actual behavior will be.\n  syncTree.syncPointTree_.foreachOnPath(path, (pathToSyncPoint, sp) => {\n    const relativePath = newRelativePath(pathToSyncPoint, path);\n    serverCache =\n      serverCache || syncPointGetCompleteServerCache(sp, relativePath);\n  });\n  let syncPoint = syncTree.syncPointTree_.get(path);\n  if (!syncPoint) {\n    syncPoint = new SyncPoint();\n    syncTree.syncPointTree_ = syncTree.syncPointTree_.set(path, syncPoint);\n  } else {\n    serverCache =\n      serverCache || syncPointGetCompleteServerCache(syncPoint, newEmptyPath());\n  }\n  const serverCacheComplete = serverCache != null;\n  const serverCacheNode: CacheNode | null = serverCacheComplete\n    ? new CacheNode(serverCache, true, false)\n    : null;\n  const writesCache: WriteTreeRef | null = writeTreeChildWrites(\n    syncTree.pendingWriteTree_,\n    query._path\n  );\n  const view: View = syncPointGetView(\n    syncPoint,\n    query,\n    writesCache,\n    serverCacheComplete ? serverCacheNode.getNode() : ChildrenNode.EMPTY_NODE,\n    serverCacheComplete\n  );\n  return viewGetCompleteNode(view);\n}\n\n/**\n * A helper method that visits all descendant and ancestor SyncPoints, applying the operation.\n *\n * NOTES:\n * - Descendant SyncPoints will be visited first (since we raise events depth-first).\n *\n * - We call applyOperation() on each SyncPoint passing three things:\n *   1. A version of the Operation that has been made relative to the SyncPoint location.\n *   2. A WriteTreeRef of any writes we have cached at the SyncPoint location.\n *   3. A snapshot Node with cached server data, if we have it.\n *\n * - We concatenate all of the events returned by each SyncPoint and return the result.\n */\nfunction syncTreeApplyOperationToSyncPoints_(\n  syncTree: SyncTree,\n  operation: Operation\n): Event[] {\n  return syncTreeApplyOperationHelper_(\n    operation,\n    syncTree.syncPointTree_,\n    /*serverCache=*/ null,\n    writeTreeChildWrites(syncTree.pendingWriteTree_, newEmptyPath())\n  );\n}\n\n/**\n * Recursive helper for applyOperationToSyncPoints_\n */\nfunction syncTreeApplyOperationHelper_(\n  operation: Operation,\n  syncPointTree: ImmutableTree<SyncPoint>,\n  serverCache: Node | null,\n  writesCache: WriteTreeRef\n): Event[] {\n  if (pathIsEmpty(operation.path)) {\n    return syncTreeApplyOperationDescendantsHelper_(\n      operation,\n      syncPointTree,\n      serverCache,\n      writesCache\n    );\n  } else {\n    const syncPoint = syncPointTree.get(newEmptyPath());\n\n    // If we don't have cached server data, see if we can get it from this SyncPoint.\n    if (serverCache == null && syncPoint != null) {\n      serverCache = syncPointGetCompleteServerCache(syncPoint, newEmptyPath());\n    }\n\n    let events: Event[] = [];\n    const childName = pathGetFront(operation.path);\n    const childOperation = operation.operationForChild(childName);\n    const childTree = syncPointTree.children.get(childName);\n    if (childTree && childOperation) {\n      const childServerCache = serverCache\n        ? serverCache.getImmediateChild(childName)\n        : null;\n      const childWritesCache = writeTreeRefChild(writesCache, childName);\n      events = events.concat(\n        syncTreeApplyOperationHelper_(\n          childOperation,\n          childTree,\n          childServerCache,\n          childWritesCache\n        )\n      );\n    }\n\n    if (syncPoint) {\n      events = events.concat(\n        syncPointApplyOperation(syncPoint, operation, writesCache, serverCache)\n      );\n    }\n\n    return events;\n  }\n}\n\n/**\n * Recursive helper for applyOperationToSyncPoints_\n */\nfunction syncTreeApplyOperationDescendantsHelper_(\n  operation: Operation,\n  syncPointTree: ImmutableTree<SyncPoint>,\n  serverCache: Node | null,\n  writesCache: WriteTreeRef\n): Event[] {\n  const syncPoint = syncPointTree.get(newEmptyPath());\n\n  // If we don't have cached server data, see if we can get it from this SyncPoint.\n  if (serverCache == null && syncPoint != null) {\n    serverCache = syncPointGetCompleteServerCache(syncPoint, newEmptyPath());\n  }\n\n  let events: Event[] = [];\n  syncPointTree.children.inorderTraversal((childName, childTree) => {\n    const childServerCache = serverCache\n      ? serverCache.getImmediateChild(childName)\n      : null;\n    const childWritesCache = writeTreeRefChild(writesCache, childName);\n    const childOperation = operation.operationForChild(childName);\n    if (childOperation) {\n      events = events.concat(\n        syncTreeApplyOperationDescendantsHelper_(\n          childOperation,\n          childTree,\n          childServerCache,\n          childWritesCache\n        )\n      );\n    }\n  });\n\n  if (syncPoint) {\n    events = events.concat(\n      syncPointApplyOperation(syncPoint, operation, writesCache, serverCache)\n    );\n  }\n\n  return events;\n}\n\nfunction syncTreeCreateListenerForView_(\n  syncTree: SyncTree,\n  view: View\n): { hashFn(): string; onComplete(a: string, b?: unknown): Event[] } {\n  const query = view.query;\n  const tag = syncTreeTagForQuery(syncTree, query);\n\n  return {\n    hashFn: () => {\n      const cache = viewGetServerCache(view) || ChildrenNode.EMPTY_NODE;\n      return cache.hash();\n    },\n    onComplete: (status: string): Event[] => {\n      if (status === 'ok') {\n        if (tag) {\n          return syncTreeApplyTaggedListenComplete(syncTree, query._path, tag);\n        } else {\n          return syncTreeApplyListenComplete(syncTree, query._path);\n        }\n      } else {\n        // If a listen failed, kill all of the listeners here, not just the one that triggered the error.\n        // Note that this may need to be scoped to just this listener if we change permissions on filtered children\n        const error = errorForServerCode(status, query);\n        return syncTreeRemoveEventRegistration(\n          syncTree,\n          query,\n          /*eventRegistration*/ null,\n          error\n        );\n      }\n    }\n  };\n}\n\n/**\n * Return the tag associated with the given query.\n */\nexport function syncTreeTagForQuery(\n  syncTree: SyncTree,\n  query: QueryContext\n): number | null {\n  const queryKey = syncTreeMakeQueryKey_(query);\n  return syncTree.queryToTagMap.get(queryKey);\n}\n\n/**\n * Given a query, computes a \"queryKey\" suitable for use in our queryToTagMap_.\n */\nfunction syncTreeMakeQueryKey_(query: QueryContext): string {\n  return query._path.toString() + '$' + query._queryIdentifier;\n}\n\n/**\n * Return the query associated with the given tag, if we have one\n */\nfunction syncTreeQueryKeyForTag_(\n  syncTree: SyncTree,\n  tag: number\n): string | null {\n  return syncTree.tagToQueryMap.get(tag);\n}\n\n/**\n * Given a queryKey (created by makeQueryKey), parse it back into a path and queryId.\n */\nfunction syncTreeParseQueryKey_(queryKey: string): {\n  queryId: string;\n  path: Path;\n} {\n  const splitIndex = queryKey.indexOf('$');\n  assert(\n    splitIndex !== -1 && splitIndex < queryKey.length - 1,\n    'Bad queryKey.'\n  );\n  return {\n    queryId: queryKey.substr(splitIndex + 1),\n    path: new Path(queryKey.substr(0, splitIndex))\n  };\n}\n\n/**\n * A helper method to apply tagged operations\n */\nfunction syncTreeApplyTaggedOperation_(\n  syncTree: SyncTree,\n  queryPath: Path,\n  operation: Operation\n): Event[] {\n  const syncPoint = syncTree.syncPointTree_.get(queryPath);\n  assert(syncPoint, \"Missing sync point for query tag that we're tracking\");\n  const writesCache = writeTreeChildWrites(\n    syncTree.pendingWriteTree_,\n    queryPath\n  );\n  return syncPointApplyOperation(syncPoint, operation, writesCache, null);\n}\n\n/**\n * This collapses multiple unfiltered views into a single view, since we only need a single\n * listener for them.\n */\nfunction syncTreeCollectDistinctViewsForSubTree_(\n  subtree: ImmutableTree<SyncPoint>\n): View[] {\n  return subtree.fold<View[]>((relativePath, maybeChildSyncPoint, childMap) => {\n    if (maybeChildSyncPoint && syncPointHasCompleteView(maybeChildSyncPoint)) {\n      const completeView = syncPointGetCompleteView(maybeChildSyncPoint);\n      return [completeView];\n    } else {\n      // No complete view here, flatten any deeper listens into an array\n      let views: View[] = [];\n      if (maybeChildSyncPoint) {\n        views = syncPointGetQueryViews(maybeChildSyncPoint);\n      }\n      each(childMap, (_key: string, childViews: View[]) => {\n        views = views.concat(childViews);\n      });\n      return views;\n    }\n  });\n}\n\n/**\n * Normalizes a query to a query we send the server for listening\n *\n * @returns The normalized query\n */\nfunction syncTreeQueryForListening_(query: QueryContext): QueryContext {\n  if (query._queryParams.loadsAllData() && !query._queryParams.isDefault()) {\n    // We treat queries that load all data as default queries\n    // Cast is necessary because ref() technically returns Firebase which is actually fb.api.Firebase which inherits\n    // from Query\n    return new (syncTreeGetReferenceConstructor())(query._repo, query._path);\n  } else {\n    return query;\n  }\n}\n\nfunction syncTreeRemoveTags_(syncTree: SyncTree, queries: QueryContext[]) {\n  for (let j = 0; j < queries.length; ++j) {\n    const removedQuery = queries[j];\n    if (!removedQuery._queryParams.loadsAllData()) {\n      // We should have a tag for this\n      const removedQueryKey = syncTreeMakeQueryKey_(removedQuery);\n      const removedQueryTag = syncTree.queryToTagMap.get(removedQueryKey);\n      syncTree.queryToTagMap.delete(removedQueryKey);\n      syncTree.tagToQueryMap.delete(removedQueryTag);\n    }\n  }\n}\n\n/**\n * Static accessor for query tags.\n */\nfunction syncTreeGetNextQueryTag_(): number {\n  return syncTreeNextQueryTag_++;\n}\n\n/**\n * For a given new listen, manage the de-duplication of outstanding subscriptions.\n *\n * @returns This method can return events to support synchronous data sources\n */\nfunction syncTreeSetupListener_(\n  syncTree: SyncTree,\n  query: QueryContext,\n  view: View\n): Event[] {\n  const path = query._path;\n  const tag = syncTreeTagForQuery(syncTree, query);\n  const listener = syncTreeCreateListenerForView_(syncTree, view);\n\n  const events = syncTree.listenProvider_.startListening(\n    syncTreeQueryForListening_(query),\n    tag,\n    listener.hashFn,\n    listener.onComplete\n  );\n\n  const subtree = syncTree.syncPointTree_.subtree(path);\n  // The root of this subtree has our query. We're here because we definitely need to send a listen for that, but we\n  // may need to shadow other listens as well.\n  if (tag) {\n    assert(\n      !syncPointHasCompleteView(subtree.value),\n      \"If we're adding a query, it shouldn't be shadowed\"\n    );\n  } else {\n    // Shadow everything at or below this location, this is a default listener.\n    const queriesToStop = subtree.fold<QueryContext[]>(\n      (relativePath, maybeChildSyncPoint, childMap) => {\n        if (\n          !pathIsEmpty(relativePath) &&\n          maybeChildSyncPoint &&\n          syncPointHasCompleteView(maybeChildSyncPoint)\n        ) {\n          return [syncPointGetCompleteView(maybeChildSyncPoint).query];\n        } else {\n          // No default listener here, flatten any deeper queries into an array\n          let queries: QueryContext[] = [];\n          if (maybeChildSyncPoint) {\n            queries = queries.concat(\n              syncPointGetQueryViews(maybeChildSyncPoint).map(\n                view => view.query\n              )\n            );\n          }\n          each(childMap, (_key: string, childQueries: QueryContext[]) => {\n            queries = queries.concat(childQueries);\n          });\n          return queries;\n        }\n      }\n    );\n    for (let i = 0; i < queriesToStop.length; ++i) {\n      const queryToStop = queriesToStop[i];\n      syncTree.listenProvider_.stopListening(\n        syncTreeQueryForListening_(queryToStop),\n        syncTreeTagForQuery(syncTree, queryToStop)\n      );\n    }\n  }\n  return events;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { ChildrenNode } from '../snap/ChildrenNode';\nimport { PRIORITY_INDEX } from '../snap/indexes/PriorityIndex';\nimport { LeafNode } from '../snap/LeafNode';\nimport { Node } from '../snap/Node';\nimport { nodeFromJSON } from '../snap/nodeFromJSON';\nimport { SyncTree, syncTreeCalcCompleteEventCache } from '../SyncTree';\n\nimport { Indexable } from './misc';\nimport { Path, pathChild } from './Path';\n\n/* It's critical for performance that we do not calculate actual values from a SyncTree\n * unless and until the value is needed. Because we expose both a SyncTree and Node\n * version of deferred value resolution, we ned a wrapper class that will let us share\n * code.\n *\n * @see https://github.com/firebase/firebase-js-sdk/issues/2487\n */\ninterface ValueProvider {\n  getImmediateChild(childName: string): ValueProvider;\n  node(): Node;\n}\n\nclass ExistingValueProvider implements ValueProvider {\n  constructor(readonly node_: Node) {}\n\n  getImmediateChild(childName: string): ValueProvider {\n    const child = this.node_.getImmediateChild(childName);\n    return new ExistingValueProvider(child);\n  }\n\n  node(): Node {\n    return this.node_;\n  }\n}\n\nclass DeferredValueProvider implements ValueProvider {\n  private syncTree_: SyncTree;\n  private path_: Path;\n\n  constructor(syncTree: SyncTree, path: Path) {\n    this.syncTree_ = syncTree;\n    this.path_ = path;\n  }\n\n  getImmediateChild(childName: string): ValueProvider {\n    const childPath = pathChild(this.path_, childName);\n    return new DeferredValueProvider(this.syncTree_, childPath);\n  }\n\n  node(): Node {\n    return syncTreeCalcCompleteEventCache(this.syncTree_, this.path_);\n  }\n}\n\n/**\n * Generate placeholders for deferred values.\n */\nexport const generateWithValues = function (\n  values: {\n    [k: string]: unknown;\n  } | null\n): { [k: string]: unknown } {\n  values = values || {};\n  values['timestamp'] = values['timestamp'] || new Date().getTime();\n  return values;\n};\n\n/**\n * Value to use when firing local events. When writing server values, fire\n * local events with an approximate value, otherwise return value as-is.\n */\nexport const resolveDeferredLeafValue = function (\n  value: { [k: string]: unknown } | string | number | boolean,\n  existingVal: ValueProvider,\n  serverValues: { [k: string]: unknown }\n): string | number | boolean {\n  if (!value || typeof value !== 'object') {\n    return value as string | number | boolean;\n  }\n  assert('.sv' in value, 'Unexpected leaf node or priority contents');\n\n  if (typeof value['.sv'] === 'string') {\n    return resolveScalarDeferredValue(value['.sv'], existingVal, serverValues);\n  } else if (typeof value['.sv'] === 'object') {\n    return resolveComplexDeferredValue(value['.sv'], existingVal, serverValues);\n  } else {\n    assert(false, 'Unexpected server value: ' + JSON.stringify(value, null, 2));\n  }\n};\n\nconst resolveScalarDeferredValue = function (\n  op: string,\n  existing: ValueProvider,\n  serverValues: { [k: string]: unknown }\n): string | number | boolean {\n  switch (op) {\n    case 'timestamp':\n      return serverValues['timestamp'] as string | number | boolean;\n    default:\n      assert(false, 'Unexpected server value: ' + op);\n  }\n};\n\nconst resolveComplexDeferredValue = function (\n  op: object,\n  existing: ValueProvider,\n  unused: { [k: string]: unknown }\n): string | number | boolean {\n  if (!op.hasOwnProperty('increment')) {\n    assert(false, 'Unexpected server value: ' + JSON.stringify(op, null, 2));\n  }\n  const delta = op['increment'];\n  if (typeof delta !== 'number') {\n    assert(false, 'Unexpected increment value: ' + delta);\n  }\n\n  const existingNode = existing.node();\n  assert(\n    existingNode !== null && typeof existingNode !== 'undefined',\n    'Expected ChildrenNode.EMPTY_NODE for nulls'\n  );\n\n  // Incrementing a non-number sets the value to the incremented amount\n  if (!existingNode.isLeafNode()) {\n    return delta;\n  }\n\n  const leaf = existingNode as LeafNode;\n  const existingVal = leaf.getValue();\n  if (typeof existingVal !== 'number') {\n    return delta;\n  }\n\n  // No need to do over/underflow arithmetic here because JS only handles floats under the covers\n  return existingVal + delta;\n};\n\n/**\n * Recursively replace all deferred values and priorities in the tree with the\n * specified generated replacement values.\n * @param path - path to which write is relative\n * @param node - new data written at path\n * @param syncTree - current data\n */\nexport const resolveDeferredValueTree = function (\n  path: Path,\n  node: Node,\n  syncTree: SyncTree,\n  serverValues: Indexable\n): Node {\n  return resolveDeferredValue(\n    node,\n    new DeferredValueProvider(syncTree, path),\n    serverValues\n  );\n};\n\n/**\n * Recursively replace all deferred values and priorities in the node with the\n * specified generated replacement values.  If there are no server values in the node,\n * it'll be returned as-is.\n */\nexport const resolveDeferredValueSnapshot = function (\n  node: Node,\n  existing: Node,\n  serverValues: Indexable\n): Node {\n  return resolveDeferredValue(\n    node,\n    new ExistingValueProvider(existing),\n    serverValues\n  );\n};\n\nfunction resolveDeferredValue(\n  node: Node,\n  existingVal: ValueProvider,\n  serverValues: Indexable\n): Node {\n  const rawPri = node.getPriority().val() as\n    | Indexable\n    | boolean\n    | null\n    | number\n    | string;\n  const priority = resolveDeferredLeafValue(\n    rawPri,\n    existingVal.getImmediateChild('.priority'),\n    serverValues\n  );\n  let newNode: Node;\n\n  if (node.isLeafNode()) {\n    const leafNode = node as LeafNode;\n    const value = resolveDeferredLeafValue(\n      leafNode.getValue(),\n      existingVal,\n      serverValues\n    );\n    if (\n      value !== leafNode.getValue() ||\n      priority !== leafNode.getPriority().val()\n    ) {\n      return new LeafNode(value, nodeFromJSON(priority));\n    } else {\n      return node;\n    }\n  } else {\n    const childrenNode = node as ChildrenNode;\n    newNode = childrenNode;\n    if (priority !== childrenNode.getPriority().val()) {\n      newNode = newNode.updatePriority(new LeafNode(priority));\n    }\n    childrenNode.forEachChild(PRIORITY_INDEX, (childName, childNode) => {\n      const newChildNode = resolveDeferredValue(\n        childNode,\n        existingVal.getImmediateChild(childName),\n        serverValues\n      );\n      if (newChildNode !== childNode) {\n        newNode = newNode.updateImmediateChild(childName, newChildNode);\n      }\n    });\n    return newNode;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { contains, safeGet } from '@firebase/util';\n\nimport { Path, pathGetFront, pathPopFront } from './Path';\nimport { each } from './util';\n\n/**\n * Node in a Tree.\n */\nexport interface TreeNode<T> {\n  // TODO: Consider making accessors that create children and value lazily or\n  // separate Internal / Leaf 'types'.\n  children: Record<string, TreeNode<T>>;\n  childCount: number;\n  value?: T;\n}\n\n/**\n * A light-weight tree, traversable by path.  Nodes can have both values and children.\n * Nodes are not enumerated (by forEachChild) unless they have a value or non-empty\n * children.\n */\nexport class Tree<T> {\n  /**\n   * @param name - Optional name of the node.\n   * @param parent - Optional parent node.\n   * @param node - Optional node to wrap.\n   */\n  constructor(\n    readonly name: string = '',\n    readonly parent: Tree<T> | null = null,\n    public node: TreeNode<T> = { children: {}, childCount: 0 }\n  ) {}\n}\n\n/**\n * Returns a sub-Tree for the given path.\n *\n * @param pathObj - Path to look up.\n * @returns Tree for path.\n */\nexport function treeSubTree<T>(tree: Tree<T>, pathObj: string | Path): Tree<T> {\n  // TODO: Require pathObj to be Path?\n  let path = pathObj instanceof Path ? pathObj : new Path(pathObj);\n  let child = tree,\n    next = pathGetFront(path);\n  while (next !== null) {\n    const childNode = safeGet(child.node.children, next) || {\n      children: {},\n      childCount: 0\n    };\n    child = new Tree<T>(next, child, childNode);\n    path = pathPopFront(path);\n    next = pathGetFront(path);\n  }\n\n  return child;\n}\n\n/**\n * Returns the data associated with this tree node.\n *\n * @returns The data or null if no data exists.\n */\nexport function treeGetValue<T>(tree: Tree<T>): T | undefined {\n  return tree.node.value;\n}\n\n/**\n * Sets data to this tree node.\n *\n * @param value - Value to set.\n */\nexport function treeSetValue<T>(tree: Tree<T>, value: T | undefined): void {\n  tree.node.value = value;\n  treeUpdateParents(tree);\n}\n\n/**\n * @returns Whether the tree has any children.\n */\nexport function treeHasChildren<T>(tree: Tree<T>): boolean {\n  return tree.node.childCount > 0;\n}\n\n/**\n * @returns Whethe rthe tree is empty (no value or children).\n */\nexport function treeIsEmpty<T>(tree: Tree<T>): boolean {\n  return treeGetValue(tree) === undefined && !treeHasChildren(tree);\n}\n\n/**\n * Calls action for each child of this tree node.\n *\n * @param action - Action to be called for each child.\n */\nexport function treeForEachChild<T>(\n  tree: Tree<T>,\n  action: (tree: Tree<T>) => void\n): void {\n  each(tree.node.children, (child: string, childTree: TreeNode<T>) => {\n    action(new Tree<T>(child, tree, childTree));\n  });\n}\n\n/**\n * Does a depth-first traversal of this node's descendants, calling action for each one.\n *\n * @param action - Action to be called for each child.\n * @param includeSelf - Whether to call action on this node as well. Defaults to\n *   false.\n * @param childrenFirst - Whether to call action on children before calling it on\n *   parent.\n */\nexport function treeForEachDescendant<T>(\n  tree: Tree<T>,\n  action: (tree: Tree<T>) => void,\n  includeSelf?: boolean,\n  childrenFirst?: boolean\n): void {\n  if (includeSelf && !childrenFirst) {\n    action(tree);\n  }\n\n  treeForEachChild(tree, child => {\n    treeForEachDescendant(child, action, true, childrenFirst);\n  });\n\n  if (includeSelf && childrenFirst) {\n    action(tree);\n  }\n}\n\n/**\n * Calls action on each ancestor node.\n *\n * @param action - Action to be called on each parent; return\n *   true to abort.\n * @param includeSelf - Whether to call action on this node as well.\n * @returns true if the action callback returned true.\n */\nexport function treeForEachAncestor<T>(\n  tree: Tree<T>,\n  action: (tree: Tree<T>) => unknown,\n  includeSelf?: boolean\n): boolean {\n  let node = includeSelf ? tree : tree.parent;\n  while (node !== null) {\n    if (action(node)) {\n      return true;\n    }\n    node = node.parent;\n  }\n  return false;\n}\n\n/**\n * Does a depth-first traversal of this node's descendants.  When a descendant with a value\n * is found, action is called on it and traversal does not continue inside the node.\n * Action is *not* called on this node.\n *\n * @param action - Action to be called for each child.\n */\nexport function treeForEachImmediateDescendantWithValue<T>(\n  tree: Tree<T>,\n  action: (tree: Tree<T>) => void\n): void {\n  treeForEachChild(tree, child => {\n    if (treeGetValue(child) !== undefined) {\n      action(child);\n    } else {\n      treeForEachImmediateDescendantWithValue(child, action);\n    }\n  });\n}\n\n/**\n * @returns The path of this tree node, as a Path.\n */\nexport function treeGetPath<T>(tree: Tree<T>) {\n  return new Path(\n    tree.parent === null\n      ? tree.name\n      : treeGetPath(tree.parent) + '/' + tree.name\n  );\n}\n\n/**\n * Adds or removes this child from its parent based on whether it's empty or not.\n */\nfunction treeUpdateParents<T>(tree: Tree<T>) {\n  if (tree.parent !== null) {\n    treeUpdateChild(tree.parent, tree.name, tree);\n  }\n}\n\n/**\n * Adds or removes the passed child to this tree node, depending on whether it's empty.\n *\n * @param childName - The name of the child to update.\n * @param child - The child to update.\n */\nfunction treeUpdateChild<T>(tree: Tree<T>, childName: string, child: Tree<T>) {\n  const childEmpty = treeIsEmpty(child);\n  const childExists = contains(tree.node.children, childName);\n  if (childEmpty && childExists) {\n    delete tree.node.children[childName];\n    tree.node.childCount--;\n    treeUpdateParents(tree);\n  } else if (!childEmpty && !childExists) {\n    tree.node.children[childName] = child.node;\n    tree.node.childCount++;\n    treeUpdateParents(tree);\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  contains,\n  errorPrefix as errorPrefixFxn,\n  safeGet,\n  stringLength\n} from '@firebase/util';\n\nimport { RepoInfo } from '../RepoInfo';\n\nimport {\n  Path,\n  pathChild,\n  pathCompare,\n  pathContains,\n  pathGetBack,\n  pathGetFront,\n  pathSlice,\n  ValidationPath,\n  validationPathPop,\n  validationPathPush,\n  validationPathToErrorString\n} from './Path';\nimport { each, isInvalidJSONNumber } from './util';\n\n/**\n * True for invalid Firebase keys\n */\nexport const INVALID_KEY_REGEX_ = /[\\[\\].#$\\/\\u0000-\\u001F\\u007F]/;\n\n/**\n * True for invalid Firebase paths.\n * Allows '/' in paths.\n */\nexport const INVALID_PATH_REGEX_ = /[\\[\\].#$\\u0000-\\u001F\\u007F]/;\n\n/**\n * Maximum number of characters to allow in leaf value\n */\nexport const MAX_LEAF_SIZE_ = 10 * 1024 * 1024;\n\nexport const isValidKey = function (key: unknown): boolean {\n  return (\n    typeof key === 'string' && key.length !== 0 && !INVALID_KEY_REGEX_.test(key)\n  );\n};\n\nexport const isValidPathString = function (pathString: string): boolean {\n  return (\n    typeof pathString === 'string' &&\n    pathString.length !== 0 &&\n    !INVALID_PATH_REGEX_.test(pathString)\n  );\n};\n\nexport const isValidRootPathString = function (pathString: string): boolean {\n  if (pathString) {\n    // Allow '/.info/' at the beginning.\n    pathString = pathString.replace(/^\\/*\\.info(\\/|$)/, '/');\n  }\n\n  return isValidPathString(pathString);\n};\n\nexport const isValidPriority = function (priority: unknown): boolean {\n  return (\n    priority === null ||\n    typeof priority === 'string' ||\n    (typeof priority === 'number' && !isInvalidJSONNumber(priority)) ||\n    (priority &&\n      typeof priority === 'object' &&\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      contains(priority as any, '.sv'))\n  );\n};\n\n/**\n * Pre-validate a datum passed as an argument to Firebase function.\n */\nexport const validateFirebaseDataArg = function (\n  fnName: string,\n  value: unknown,\n  path: Path,\n  optional: boolean\n) {\n  if (optional && value === undefined) {\n    return;\n  }\n\n  validateFirebaseData(errorPrefixFxn(fnName, 'value'), value, path);\n};\n\n/**\n * Validate a data object client-side before sending to server.\n */\nexport const validateFirebaseData = function (\n  errorPrefix: string,\n  data: unknown,\n  path_: Path | ValidationPath\n) {\n  const path =\n    path_ instanceof Path ? new ValidationPath(path_, errorPrefix) : path_;\n\n  if (data === undefined) {\n    throw new Error(\n      errorPrefix + 'contains undefined ' + validationPathToErrorString(path)\n    );\n  }\n  if (typeof data === 'function') {\n    throw new Error(\n      errorPrefix +\n        'contains a function ' +\n        validationPathToErrorString(path) +\n        ' with contents = ' +\n        data.toString()\n    );\n  }\n  if (isInvalidJSONNumber(data)) {\n    throw new Error(\n      errorPrefix +\n        'contains ' +\n        data.toString() +\n        ' ' +\n        validationPathToErrorString(path)\n    );\n  }\n\n  // Check max leaf size, but try to avoid the utf8 conversion if we can.\n  if (\n    typeof data === 'string' &&\n    data.length > MAX_LEAF_SIZE_ / 3 &&\n    stringLength(data) > MAX_LEAF_SIZE_\n  ) {\n    throw new Error(\n      errorPrefix +\n        'contains a string greater than ' +\n        MAX_LEAF_SIZE_ +\n        ' utf8 bytes ' +\n        validationPathToErrorString(path) +\n        \" ('\" +\n        data.substring(0, 50) +\n        \"...')\"\n    );\n  }\n\n  // TODO = Perf = Consider combining the recursive validation of keys into NodeFromJSON\n  // to save extra walking of large objects.\n  if (data && typeof data === 'object') {\n    let hasDotValue = false;\n    let hasActualChild = false;\n    each(data, (key: string, value: unknown) => {\n      if (key === '.value') {\n        hasDotValue = true;\n      } else if (key !== '.priority' && key !== '.sv') {\n        hasActualChild = true;\n        if (!isValidKey(key)) {\n          throw new Error(\n            errorPrefix +\n              ' contains an invalid key (' +\n              key +\n              ') ' +\n              validationPathToErrorString(path) +\n              '.  Keys must be non-empty strings ' +\n              'and can\\'t contain \".\", \"#\", \"$\", \"/\", \"[\", or \"]\"'\n          );\n        }\n      }\n\n      validationPathPush(path, key);\n      validateFirebaseData(errorPrefix, value, path);\n      validationPathPop(path);\n    });\n\n    if (hasDotValue && hasActualChild) {\n      throw new Error(\n        errorPrefix +\n          ' contains \".value\" child ' +\n          validationPathToErrorString(path) +\n          ' in addition to actual children.'\n      );\n    }\n  }\n};\n\n/**\n * Pre-validate paths passed in the firebase function.\n */\nexport const validateFirebaseMergePaths = function (\n  errorPrefix: string,\n  mergePaths: Path[]\n) {\n  let i, curPath: Path;\n  for (i = 0; i < mergePaths.length; i++) {\n    curPath = mergePaths[i];\n    const keys = pathSlice(curPath);\n    for (let j = 0; j < keys.length; j++) {\n      if (keys[j] === '.priority' && j === keys.length - 1) {\n        // .priority is OK\n      } else if (!isValidKey(keys[j])) {\n        throw new Error(\n          errorPrefix +\n            'contains an invalid key (' +\n            keys[j] +\n            ') in path ' +\n            curPath.toString() +\n            '. Keys must be non-empty strings ' +\n            'and can\\'t contain \".\", \"#\", \"$\", \"/\", \"[\", or \"]\"'\n        );\n      }\n    }\n  }\n\n  // Check that update keys are not descendants of each other.\n  // We rely on the property that sorting guarantees that ancestors come\n  // right before descendants.\n  mergePaths.sort(pathCompare);\n  let prevPath: Path | null = null;\n  for (i = 0; i < mergePaths.length; i++) {\n    curPath = mergePaths[i];\n    if (prevPath !== null && pathContains(prevPath, curPath)) {\n      throw new Error(\n        errorPrefix +\n          'contains a path ' +\n          prevPath.toString() +\n          ' that is ancestor of another path ' +\n          curPath.toString()\n      );\n    }\n    prevPath = curPath;\n  }\n};\n\n/**\n * pre-validate an object passed as an argument to firebase function (\n * must be an object - e.g. for firebase.update()).\n */\nexport const validateFirebaseMergeDataArg = function (\n  fnName: string,\n  data: unknown,\n  path: Path,\n  optional: boolean\n) {\n  if (optional && data === undefined) {\n    return;\n  }\n\n  const errorPrefix = errorPrefixFxn(fnName, 'values');\n\n  if (!(data && typeof data === 'object') || Array.isArray(data)) {\n    throw new Error(\n      errorPrefix + ' must be an object containing the children to replace.'\n    );\n  }\n\n  const mergePaths: Path[] = [];\n  each(data, (key: string, value: unknown) => {\n    const curPath = new Path(key);\n    validateFirebaseData(errorPrefix, value, pathChild(path, curPath));\n    if (pathGetBack(curPath) === '.priority') {\n      if (!isValidPriority(value)) {\n        throw new Error(\n          errorPrefix +\n            \"contains an invalid value for '\" +\n            curPath.toString() +\n            \"', which must be a valid \" +\n            'Firebase priority (a string, finite number, server value, or null).'\n        );\n      }\n    }\n    mergePaths.push(curPath);\n  });\n  validateFirebaseMergePaths(errorPrefix, mergePaths);\n};\n\nexport const validatePriority = function (\n  fnName: string,\n  priority: unknown,\n  optional: boolean\n) {\n  if (optional && priority === undefined) {\n    return;\n  }\n  if (isInvalidJSONNumber(priority)) {\n    throw new Error(\n      errorPrefixFxn(fnName, 'priority') +\n        'is ' +\n        priority.toString() +\n        ', but must be a valid Firebase priority (a string, finite number, ' +\n        'server value, or null).'\n    );\n  }\n  // Special case to allow importing data with a .sv.\n  if (!isValidPriority(priority)) {\n    throw new Error(\n      errorPrefixFxn(fnName, 'priority') +\n        'must be a valid Firebase priority ' +\n        '(a string, finite number, server value, or null).'\n    );\n  }\n};\n\nexport const validateKey = function (\n  fnName: string,\n  argumentName: string,\n  key: string,\n  optional: boolean\n) {\n  if (optional && key === undefined) {\n    return;\n  }\n  if (!isValidKey(key)) {\n    throw new Error(\n      errorPrefixFxn(fnName, argumentName) +\n        'was an invalid key = \"' +\n        key +\n        '\".  Firebase keys must be non-empty strings and ' +\n        'can\\'t contain \".\", \"#\", \"$\", \"/\", \"[\", or \"]\").'\n    );\n  }\n};\n\n/**\n * @internal\n */\nexport const validatePathString = function (\n  fnName: string,\n  argumentName: string,\n  pathString: string,\n  optional: boolean\n) {\n  if (optional && pathString === undefined) {\n    return;\n  }\n\n  if (!isValidPathString(pathString)) {\n    throw new Error(\n      errorPrefixFxn(fnName, argumentName) +\n        'was an invalid path = \"' +\n        pathString +\n        '\". Paths must be non-empty strings and ' +\n        'can\\'t contain \".\", \"#\", \"$\", \"[\", or \"]\"'\n    );\n  }\n};\n\nexport const validateRootPathString = function (\n  fnName: string,\n  argumentName: string,\n  pathString: string,\n  optional: boolean\n) {\n  if (pathString) {\n    // Allow '/.info/' at the beginning.\n    pathString = pathString.replace(/^\\/*\\.info(\\/|$)/, '/');\n  }\n\n  validatePathString(fnName, argumentName, pathString, optional);\n};\n\n/**\n * @internal\n */\nexport const validateWritablePath = function (fnName: string, path: Path) {\n  if (pathGetFront(path) === '.info') {\n    throw new Error(fnName + \" failed = Can't modify data under /.info/\");\n  }\n};\n\nexport const validateUrl = function (\n  fnName: string,\n  parsedUrl: { repoInfo: RepoInfo; path: Path }\n) {\n  // TODO = Validate server better.\n  const pathString = parsedUrl.path.toString();\n  if (\n    !(typeof parsedUrl.repoInfo.host === 'string') ||\n    parsedUrl.repoInfo.host.length === 0 ||\n    (!isValidKey(parsedUrl.repoInfo.namespace) &&\n      parsedUrl.repoInfo.host.split(':')[0] !== 'localhost') ||\n    (pathString.length !== 0 && !isValidRootPathString(pathString))\n  ) {\n    throw new Error(\n      errorPrefixFxn(fnName, 'url') +\n        'must be a valid firebase URL and ' +\n        'the path can\\'t contain \".\", \"#\", \"$\", \"[\", or \"]\".'\n    );\n  }\n};\n\nexport const validateString = function (\n  fnName: string,\n  argumentName: string,\n  string: unknown,\n  optional: boolean\n) {\n  if (optional && string === undefined) {\n    return;\n  }\n  if (!(typeof string === 'string')) {\n    throw new Error(\n      errorPrefixFxn(fnName, argumentName) + 'must be a valid string.'\n    );\n  }\n};\n\nexport const validateObject = function (\n  fnName: string,\n  argumentName: string,\n  obj: unknown,\n  optional: boolean\n) {\n  if (optional && obj === undefined) {\n    return;\n  }\n  if (!(obj && typeof obj === 'object') || obj === null) {\n    throw new Error(\n      errorPrefixFxn(fnName, argumentName) + 'must be a valid object.'\n    );\n  }\n};\n\nexport const validateObjectContainsKey = function (\n  fnName: string,\n  argumentName: string,\n  obj: unknown,\n  key: string,\n  optional: boolean,\n  optType?: string\n) {\n  const objectContainsKey =\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    obj && typeof obj === 'object' && contains(obj as any, key);\n\n  if (!objectContainsKey) {\n    if (optional) {\n      return;\n    } else {\n      throw new Error(\n        errorPrefixFxn(fnName, argumentName) +\n          'must contain the key \"' +\n          key +\n          '\"'\n      );\n    }\n  }\n\n  if (optType) {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const val = safeGet(obj as any, key);\n    if (\n      (optType === 'number' && !(typeof val === 'number')) ||\n      (optType === 'string' && !(typeof val === 'string')) ||\n      (optType === 'boolean' && !(typeof val === 'boolean')) ||\n      (optType === 'function' && !(typeof val === 'function')) ||\n      (optType === 'object' && !(typeof val === 'object') && val)\n    ) {\n      if (optional) {\n        throw new Error(\n          errorPrefixFxn(fnName, argumentName) +\n            'contains invalid value for key \"' +\n            key +\n            '\" (must be of type \"' +\n            optType +\n            '\")'\n        );\n      } else {\n        throw new Error(\n          errorPrefixFxn(fnName, argumentName) +\n            'must contain the key \"' +\n            key +\n            '\" with type \"' +\n            optType +\n            '\"'\n        );\n      }\n    }\n  }\n};\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Path, pathContains, pathEquals } from '../util/Path';\nimport { exceptionGuard, log, logger } from '../util/util';\n\nimport { Event } from './Event';\n\n/**\n * The event queue serves a few purposes:\n * 1. It ensures we maintain event order in the face of event callbacks doing operations that result in more\n *    events being queued.\n * 2. raiseQueuedEvents() handles being called reentrantly nicely.  That is, if in the course of raising events,\n *    raiseQueuedEvents() is called again, the \"inner\" call will pick up raising events where the \"outer\" call\n *    left off, ensuring that the events are still raised synchronously and in order.\n * 3. You can use raiseEventsAtPath and raiseEventsForChangedPath to ensure only relevant previously-queued\n *    events are raised synchronously.\n *\n * NOTE: This can all go away if/when we move to async events.\n *\n */\nexport class EventQueue {\n  eventLists_: EventList[] = [];\n\n  /**\n   * Tracks recursion depth of raiseQueuedEvents_, for debugging purposes.\n   */\n  recursionDepth_ = 0;\n}\n\n/**\n * @param eventDataList - The new events to queue.\n */\nexport function eventQueueQueueEvents(\n  eventQueue: EventQueue,\n  eventDataList: Event[]\n) {\n  // We group events by path, storing them in a single EventList, to make it easier to skip over them quickly.\n  let currList: EventList | null = null;\n  for (let i = 0; i < eventDataList.length; i++) {\n    const data = eventDataList[i];\n    const path = data.getPath();\n    if (currList !== null && !pathEquals(path, currList.path)) {\n      eventQueue.eventLists_.push(currList);\n      currList = null;\n    }\n\n    if (currList === null) {\n      currList = { events: [], path };\n    }\n\n    currList.events.push(data);\n  }\n  if (currList) {\n    eventQueue.eventLists_.push(currList);\n  }\n}\n\n/**\n * Queues the specified events and synchronously raises all events (including previously queued ones)\n * for the specified path.\n *\n * It is assumed that the new events are all for the specified path.\n *\n * @param path - The path to raise events for.\n * @param eventDataList - The new events to raise.\n */\nexport function eventQueueRaiseEventsAtPath(\n  eventQueue: EventQueue,\n  path: Path,\n  eventDataList: Event[]\n) {\n  eventQueueQueueEvents(eventQueue, eventDataList);\n  eventQueueRaiseQueuedEventsMatchingPredicate(eventQueue, eventPath =>\n    pathEquals(eventPath, path)\n  );\n}\n\n/**\n * Queues the specified events and synchronously raises all events (including previously queued ones) for\n * locations related to the specified change path (i.e. all ancestors and descendants).\n *\n * It is assumed that the new events are all related (ancestor or descendant) to the specified path.\n *\n * @param changedPath - The path to raise events for.\n * @param eventDataList - The events to raise\n */\nexport function eventQueueRaiseEventsForChangedPath(\n  eventQueue: EventQueue,\n  changedPath: Path,\n  eventDataList: Event[]\n) {\n  eventQueueQueueEvents(eventQueue, eventDataList);\n  eventQueueRaiseQueuedEventsMatchingPredicate(\n    eventQueue,\n    eventPath =>\n      pathContains(eventPath, changedPath) ||\n      pathContains(changedPath, eventPath)\n  );\n}\n\nfunction eventQueueRaiseQueuedEventsMatchingPredicate(\n  eventQueue: EventQueue,\n  predicate: (path: Path) => boolean\n) {\n  eventQueue.recursionDepth_++;\n\n  let sentAll = true;\n  for (let i = 0; i < eventQueue.eventLists_.length; i++) {\n    const eventList = eventQueue.eventLists_[i];\n    if (eventList) {\n      const eventPath = eventList.path;\n      if (predicate(eventPath)) {\n        eventListRaise(eventQueue.eventLists_[i]);\n        eventQueue.eventLists_[i] = null;\n      } else {\n        sentAll = false;\n      }\n    }\n  }\n\n  if (sentAll) {\n    eventQueue.eventLists_ = [];\n  }\n\n  eventQueue.recursionDepth_--;\n}\n\ninterface EventList {\n  events: Event[];\n  path: Path;\n}\n\n/**\n * Iterates through the list and raises each event\n */\nfunction eventListRaise(eventList: EventList) {\n  for (let i = 0; i < eventList.events.length; i++) {\n    const eventData = eventList.events[i];\n    if (eventData !== null) {\n      eventList.events[i] = null;\n      const eventFn = eventData.getEventRunner();\n      if (logger) {\n        log('event: ' + eventData.toString());\n      }\n      exceptionGuard(eventFn);\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  assert,\n  contains,\n  isEmpty,\n  map,\n  safeGet,\n  stringify\n} from '@firebase/util';\n\nimport { ValueEventRegistration } from '../api/Reference_impl';\n\nimport { AppCheckTokenProvider } from './AppCheckTokenProvider';\nimport { AuthTokenProvider } from './AuthTokenProvider';\nimport { PersistentConnection } from './PersistentConnection';\nimport { ReadonlyRestClient } from './ReadonlyRestClient';\nimport { RepoInfo } from './RepoInfo';\nimport { ServerActions } from './ServerActions';\nimport { ChildrenNode } from './snap/ChildrenNode';\nimport { Node } from './snap/Node';\nimport { nodeFromJSON } from './snap/nodeFromJSON';\nimport { SnapshotHolder } from './SnapshotHolder';\nimport {\n  newSparseSnapshotTree,\n  SparseSnapshotTree,\n  sparseSnapshotTreeForEachTree,\n  sparseSnapshotTreeForget,\n  sparseSnapshotTreeRemember\n} from './SparseSnapshotTree';\nimport { StatsCollection } from './stats/StatsCollection';\nimport { StatsListener } from './stats/StatsListener';\nimport {\n  statsManagerGetCollection,\n  statsManagerGetOrCreateReporter\n} from './stats/StatsManager';\nimport { StatsReporter, statsReporterIncludeStat } from './stats/StatsReporter';\nimport {\n  SyncTree,\n  syncTreeAckUserWrite,\n  syncTreeAddEventRegistration,\n  syncTreeApplyServerMerge,\n  syncTreeApplyServerOverwrite,\n  syncTreeApplyTaggedQueryMerge,\n  syncTreeApplyTaggedQueryOverwrite,\n  syncTreeApplyUserMerge,\n  syncTreeApplyUserOverwrite,\n  syncTreeCalcCompleteEventCache,\n  syncTreeGetServerValue,\n  syncTreeRemoveEventRegistration,\n  syncTreeTagForQuery\n} from './SyncTree';\nimport { Indexable } from './util/misc';\nimport {\n  newEmptyPath,\n  newRelativePath,\n  Path,\n  pathChild,\n  pathGetFront,\n  pathPopFront\n} from './util/Path';\nimport {\n  generateWithValues,\n  resolveDeferredValueSnapshot,\n  resolveDeferredValueTree\n} from './util/ServerValues';\nimport {\n  Tree,\n  treeForEachAncestor,\n  treeForEachChild,\n  treeForEachDescendant,\n  treeGetPath,\n  treeGetValue,\n  treeHasChildren,\n  treeSetValue,\n  treeSubTree\n} from './util/Tree';\nimport {\n  beingCrawled,\n  each,\n  exceptionGuard,\n  log,\n  LUIDGenerator,\n  warn\n} from './util/util';\nimport { isValidPriority, validateFirebaseData } from './util/validation';\nimport { Event } from './view/Event';\nimport {\n  EventQueue,\n  eventQueueQueueEvents,\n  eventQueueRaiseEventsAtPath,\n  eventQueueRaiseEventsForChangedPath\n} from './view/EventQueue';\nimport { EventRegistration, QueryContext } from './view/EventRegistration';\n\nconst INTERRUPT_REASON = 'repo_interrupt';\n\n/**\n * If a transaction does not succeed after 25 retries, we abort it. Among other\n * things this ensure that if there's ever a bug causing a mismatch between\n * client / server hashes for some data, we won't retry indefinitely.\n */\nconst MAX_TRANSACTION_RETRIES = 25;\n\nconst enum TransactionStatus {\n  // We've run the transaction and updated transactionResultData_ with the result, but it isn't currently sent to the\n  // server. A transaction will go from RUN -> SENT -> RUN if it comes back from the server as rejected due to\n  // mismatched hash.\n  RUN,\n\n  // We've run the transaction and sent it to the server and it's currently outstanding (hasn't come back as accepted\n  // or rejected yet).\n  SENT,\n\n  // Temporary state used to mark completed transactions (whether successful or aborted).  The transaction will be\n  // removed when we get a chance to prune completed ones.\n  COMPLETED,\n\n  // Used when an already-sent transaction needs to be aborted (e.g. due to a conflicting set() call that was made).\n  // If it comes back as unsuccessful, we'll abort it.\n  SENT_NEEDS_ABORT,\n\n  // Temporary state used to mark transactions that need to be aborted.\n  NEEDS_ABORT\n}\n\ninterface Transaction {\n  path: Path;\n  update: (a: unknown) => unknown;\n  onComplete: (\n    error: Error | null,\n    committed: boolean,\n    node: Node | null\n  ) => void;\n  status: TransactionStatus;\n  order: number;\n  applyLocally: boolean;\n  retryCount: number;\n  unwatcher: () => void;\n  abortReason: string | null;\n  currentWriteId: number;\n  currentInputSnapshot: Node | null;\n  currentOutputSnapshotRaw: Node | null;\n  currentOutputSnapshotResolved: Node | null;\n}\n\n/**\n * A connection to a single data repository.\n */\nexport class Repo {\n  /** Key for uniquely identifying this repo, used in RepoManager */\n  readonly key: string;\n\n  dataUpdateCount = 0;\n  infoSyncTree_: SyncTree;\n  serverSyncTree_: SyncTree;\n\n  stats_: StatsCollection;\n  statsListener_: StatsListener | null = null;\n  eventQueue_ = new EventQueue();\n  nextWriteId_ = 1;\n  server_: ServerActions;\n  statsReporter_: StatsReporter;\n  infoData_: SnapshotHolder;\n  interceptServerDataCallback_: ((a: string, b: unknown) => void) | null = null;\n\n  /** A list of data pieces and paths to be set when this client disconnects. */\n  onDisconnect_: SparseSnapshotTree = newSparseSnapshotTree();\n\n  /** Stores queues of outstanding transactions for Firebase locations. */\n  transactionQueueTree_ = new Tree<Transaction[]>();\n\n  // TODO: This should be @private but it's used by test_access.js and internal.js\n  persistentConnection_: PersistentConnection | null = null;\n\n  constructor(\n    public repoInfo_: RepoInfo,\n    public forceRestClient_: boolean,\n    public authTokenProvider_: AuthTokenProvider,\n    public appCheckProvider_: AppCheckTokenProvider\n  ) {\n    // This key is intentionally not updated if RepoInfo is later changed or replaced\n    this.key = this.repoInfo_.toURLString();\n  }\n\n  /**\n   * @returns The URL corresponding to the root of this Firebase.\n   */\n  toString(): string {\n    return (\n      (this.repoInfo_.secure ? 'https://' : 'http://') + this.repoInfo_.host\n    );\n  }\n}\n\nexport function repoStart(\n  repo: Repo,\n  appId: string,\n  authOverride?: object\n): void {\n  repo.stats_ = statsManagerGetCollection(repo.repoInfo_);\n\n  if (repo.forceRestClient_ || beingCrawled()) {\n    repo.server_ = new ReadonlyRestClient(\n      repo.repoInfo_,\n      (\n        pathString: string,\n        data: unknown,\n        isMerge: boolean,\n        tag: number | null\n      ) => {\n        repoOnDataUpdate(repo, pathString, data, isMerge, tag);\n      },\n      repo.authTokenProvider_,\n      repo.appCheckProvider_\n    );\n\n    // Minor hack: Fire onConnect immediately, since there's no actual connection.\n    setTimeout(() => repoOnConnectStatus(repo, /* connectStatus= */ true), 0);\n  } else {\n    // Validate authOverride\n    if (typeof authOverride !== 'undefined' && authOverride !== null) {\n      if (typeof authOverride !== 'object') {\n        throw new Error(\n          'Only objects are supported for option databaseAuthVariableOverride'\n        );\n      }\n      try {\n        stringify(authOverride);\n      } catch (e) {\n        throw new Error('Invalid authOverride provided: ' + e);\n      }\n    }\n\n    repo.persistentConnection_ = new PersistentConnection(\n      repo.repoInfo_,\n      appId,\n      (\n        pathString: string,\n        data: unknown,\n        isMerge: boolean,\n        tag: number | null\n      ) => {\n        repoOnDataUpdate(repo, pathString, data, isMerge, tag);\n      },\n      (connectStatus: boolean) => {\n        repoOnConnectStatus(repo, connectStatus);\n      },\n      (updates: object) => {\n        repoOnServerInfoUpdate(repo, updates);\n      },\n      repo.authTokenProvider_,\n      repo.appCheckProvider_,\n      authOverride\n    );\n\n    repo.server_ = repo.persistentConnection_;\n  }\n\n  repo.authTokenProvider_.addTokenChangeListener(token => {\n    repo.server_.refreshAuthToken(token);\n  });\n\n  repo.appCheckProvider_.addTokenChangeListener(result => {\n    repo.server_.refreshAppCheckToken(result.token);\n  });\n\n  // In the case of multiple Repos for the same repoInfo (i.e. there are multiple Firebase.Contexts being used),\n  // we only want to create one StatsReporter.  As such, we'll report stats over the first Repo created.\n  repo.statsReporter_ = statsManagerGetOrCreateReporter(\n    repo.repoInfo_,\n    () => new StatsReporter(repo.stats_, repo.server_)\n  );\n\n  // Used for .info.\n  repo.infoData_ = new SnapshotHolder();\n  repo.infoSyncTree_ = new SyncTree({\n    startListening: (query, tag, currentHashFn, onComplete) => {\n      let infoEvents: Event[] = [];\n      const node = repo.infoData_.getNode(query._path);\n      // This is possibly a hack, but we have different semantics for .info endpoints. We don't raise null events\n      // on initial data...\n      if (!node.isEmpty()) {\n        infoEvents = syncTreeApplyServerOverwrite(\n          repo.infoSyncTree_,\n          query._path,\n          node\n        );\n        setTimeout(() => {\n          onComplete('ok');\n        }, 0);\n      }\n      return infoEvents;\n    },\n    stopListening: () => {}\n  });\n  repoUpdateInfo(repo, 'connected', false);\n\n  repo.serverSyncTree_ = new SyncTree({\n    startListening: (query, tag, currentHashFn, onComplete) => {\n      repo.server_.listen(query, currentHashFn, tag, (status, data) => {\n        const events = onComplete(status, data);\n        eventQueueRaiseEventsForChangedPath(\n          repo.eventQueue_,\n          query._path,\n          events\n        );\n      });\n      // No synchronous events for network-backed sync trees\n      return [];\n    },\n    stopListening: (query, tag) => {\n      repo.server_.unlisten(query, tag);\n    }\n  });\n}\n\n/**\n * @returns The time in milliseconds, taking the server offset into account if we have one.\n */\nexport function repoServerTime(repo: Repo): number {\n  const offsetNode = repo.infoData_.getNode(new Path('.info/serverTimeOffset'));\n  const offset = (offsetNode.val() as number) || 0;\n  return new Date().getTime() + offset;\n}\n\n/**\n * Generate ServerValues using some variables from the repo object.\n */\nexport function repoGenerateServerValues(repo: Repo): Indexable {\n  return generateWithValues({\n    timestamp: repoServerTime(repo)\n  });\n}\n\n/**\n * Called by realtime when we get new messages from the server.\n */\nfunction repoOnDataUpdate(\n  repo: Repo,\n  pathString: string,\n  data: unknown,\n  isMerge: boolean,\n  tag: number | null\n): void {\n  // For testing.\n  repo.dataUpdateCount++;\n  const path = new Path(pathString);\n  data = repo.interceptServerDataCallback_\n    ? repo.interceptServerDataCallback_(pathString, data)\n    : data;\n  let events = [];\n  if (tag) {\n    if (isMerge) {\n      const taggedChildren = map(\n        data as { [k: string]: unknown },\n        (raw: unknown) => nodeFromJSON(raw)\n      );\n      events = syncTreeApplyTaggedQueryMerge(\n        repo.serverSyncTree_,\n        path,\n        taggedChildren,\n        tag\n      );\n    } else {\n      const taggedSnap = nodeFromJSON(data);\n      events = syncTreeApplyTaggedQueryOverwrite(\n        repo.serverSyncTree_,\n        path,\n        taggedSnap,\n        tag\n      );\n    }\n  } else if (isMerge) {\n    const changedChildren = map(\n      data as { [k: string]: unknown },\n      (raw: unknown) => nodeFromJSON(raw)\n    );\n    events = syncTreeApplyServerMerge(\n      repo.serverSyncTree_,\n      path,\n      changedChildren\n    );\n  } else {\n    const snap = nodeFromJSON(data);\n    events = syncTreeApplyServerOverwrite(repo.serverSyncTree_, path, snap);\n  }\n  let affectedPath = path;\n  if (events.length > 0) {\n    // Since we have a listener outstanding for each transaction, receiving any events\n    // is a proxy for some change having occurred.\n    affectedPath = repoRerunTransactions(repo, path);\n  }\n  eventQueueRaiseEventsForChangedPath(repo.eventQueue_, affectedPath, events);\n}\n\n// TODO: This should be @private but it's used by test_access.js and internal.js\nexport function repoInterceptServerData(\n  repo: Repo,\n  callback: ((a: string, b: unknown) => unknown) | null\n): void {\n  repo.interceptServerDataCallback_ = callback;\n}\n\nfunction repoOnConnectStatus(repo: Repo, connectStatus: boolean): void {\n  repoUpdateInfo(repo, 'connected', connectStatus);\n  if (connectStatus === false) {\n    repoRunOnDisconnectEvents(repo);\n  }\n}\n\nfunction repoOnServerInfoUpdate(repo: Repo, updates: object): void {\n  each(updates, (key: string, value: unknown) => {\n    repoUpdateInfo(repo, key, value);\n  });\n}\n\nfunction repoUpdateInfo(repo: Repo, pathString: string, value: unknown): void {\n  const path = new Path('/.info/' + pathString);\n  const newNode = nodeFromJSON(value);\n  repo.infoData_.updateSnapshot(path, newNode);\n  const events = syncTreeApplyServerOverwrite(\n    repo.infoSyncTree_,\n    path,\n    newNode\n  );\n  eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, events);\n}\n\nfunction repoGetNextWriteId(repo: Repo): number {\n  return repo.nextWriteId_++;\n}\n\n/**\n * The purpose of `getValue` is to return the latest known value\n * satisfying `query`.\n *\n * This method will first check for in-memory cached values\n * belonging to active listeners. If they are found, such values\n * are considered to be the most up-to-date.\n *\n * If the client is not connected, this method will wait until the\n *  repo has established a connection and then request the value for `query`.\n * If the client is not able to retrieve the query result for another reason,\n * it reports an error.\n *\n * @param query - The query to surface a value for.\n */\nexport function repoGetValue(\n  repo: Repo,\n  query: QueryContext,\n  eventRegistration: ValueEventRegistration\n): Promise<Node> {\n  // Only active queries are cached. There is no persisted cache.\n  const cached = syncTreeGetServerValue(repo.serverSyncTree_, query);\n  if (cached != null) {\n    return Promise.resolve(cached);\n  }\n  return repo.server_.get(query).then(\n    payload => {\n      const node = nodeFromJSON(payload).withIndex(\n        query._queryParams.getIndex()\n      );\n      /**\n       * Below we simulate the actions of an `onlyOnce` `onValue()` event where:\n       * Add an event registration,\n       * Update data at the path,\n       * Raise any events,\n       * Cleanup the SyncTree\n       */\n      syncTreeAddEventRegistration(\n        repo.serverSyncTree_,\n        query,\n        eventRegistration,\n        true\n      );\n      let events: Event[];\n      if (query._queryParams.loadsAllData()) {\n        events = syncTreeApplyServerOverwrite(\n          repo.serverSyncTree_,\n          query._path,\n          node\n        );\n      } else {\n        const tag = syncTreeTagForQuery(repo.serverSyncTree_, query);\n        events = syncTreeApplyTaggedQueryOverwrite(\n          repo.serverSyncTree_,\n          query._path,\n          node,\n          tag\n        );\n      }\n      /*\n       * We need to raise events in the scenario where `get()` is called at a parent path, and\n       * while the `get()` is pending, `onValue` is called at a child location. While get() is waiting\n       * for the data, `onValue` will register a new event. Then, get() will come back, and update the syncTree\n       * and its corresponding serverCache, including the child location where `onValue` is called. Then,\n       * `onValue` will receive the event from the server, but look at the syncTree and see that the data received\n       * from the server is already at the SyncPoint, and so the `onValue` callback will never get fired.\n       * Calling `eventQueueRaiseEventsForChangedPath()` is the correct way to propagate the events and\n       * ensure the corresponding child events will get fired.\n       */\n      eventQueueRaiseEventsForChangedPath(\n        repo.eventQueue_,\n        query._path,\n        events\n      );\n      syncTreeRemoveEventRegistration(\n        repo.serverSyncTree_,\n        query,\n        eventRegistration,\n        null,\n        true\n      );\n      return node;\n    },\n    err => {\n      repoLog(repo, 'get for query ' + stringify(query) + ' failed: ' + err);\n      return Promise.reject(new Error(err as string));\n    }\n  );\n}\n\nexport function repoSetWithPriority(\n  repo: Repo,\n  path: Path,\n  newVal: unknown,\n  newPriority: number | string | null,\n  onComplete: ((status: Error | null, errorReason?: string) => void) | null\n): void {\n  repoLog(repo, 'set', {\n    path: path.toString(),\n    value: newVal,\n    priority: newPriority\n  });\n\n  // TODO: Optimize this behavior to either (a) store flag to skip resolving where possible and / or\n  // (b) store unresolved paths on JSON parse\n  const serverValues = repoGenerateServerValues(repo);\n  const newNodeUnresolved = nodeFromJSON(newVal, newPriority);\n  const existing = syncTreeCalcCompleteEventCache(repo.serverSyncTree_, path);\n  const newNode = resolveDeferredValueSnapshot(\n    newNodeUnresolved,\n    existing,\n    serverValues\n  );\n\n  const writeId = repoGetNextWriteId(repo);\n  const events = syncTreeApplyUserOverwrite(\n    repo.serverSyncTree_,\n    path,\n    newNode,\n    writeId,\n    true\n  );\n  eventQueueQueueEvents(repo.eventQueue_, events);\n  repo.server_.put(\n    path.toString(),\n    newNodeUnresolved.val(/*export=*/ true),\n    (status, errorReason) => {\n      const success = status === 'ok';\n      if (!success) {\n        warn('set at ' + path + ' failed: ' + status);\n      }\n\n      const clearEvents = syncTreeAckUserWrite(\n        repo.serverSyncTree_,\n        writeId,\n        !success\n      );\n      eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, clearEvents);\n      repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\n    }\n  );\n  const affectedPath = repoAbortTransactions(repo, path);\n  repoRerunTransactions(repo, affectedPath);\n  // We queued the events above, so just flush the queue here\n  eventQueueRaiseEventsForChangedPath(repo.eventQueue_, affectedPath, []);\n}\n\nexport function repoUpdate(\n  repo: Repo,\n  path: Path,\n  childrenToMerge: { [k: string]: unknown },\n  onComplete: ((status: Error | null, errorReason?: string) => void) | null\n): void {\n  repoLog(repo, 'update', { path: path.toString(), value: childrenToMerge });\n\n  // Start with our existing data and merge each child into it.\n  let empty = true;\n  const serverValues = repoGenerateServerValues(repo);\n  const changedChildren: { [k: string]: Node } = {};\n  each(childrenToMerge, (changedKey: string, changedValue: unknown) => {\n    empty = false;\n    changedChildren[changedKey] = resolveDeferredValueTree(\n      pathChild(path, changedKey),\n      nodeFromJSON(changedValue),\n      repo.serverSyncTree_,\n      serverValues\n    );\n  });\n\n  if (!empty) {\n    const writeId = repoGetNextWriteId(repo);\n    const events = syncTreeApplyUserMerge(\n      repo.serverSyncTree_,\n      path,\n      changedChildren,\n      writeId\n    );\n    eventQueueQueueEvents(repo.eventQueue_, events);\n    repo.server_.merge(\n      path.toString(),\n      childrenToMerge,\n      (status, errorReason) => {\n        const success = status === 'ok';\n        if (!success) {\n          warn('update at ' + path + ' failed: ' + status);\n        }\n\n        const clearEvents = syncTreeAckUserWrite(\n          repo.serverSyncTree_,\n          writeId,\n          !success\n        );\n        const affectedPath =\n          clearEvents.length > 0 ? repoRerunTransactions(repo, path) : path;\n        eventQueueRaiseEventsForChangedPath(\n          repo.eventQueue_,\n          affectedPath,\n          clearEvents\n        );\n        repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\n      }\n    );\n\n    each(childrenToMerge, (changedPath: string) => {\n      const affectedPath = repoAbortTransactions(\n        repo,\n        pathChild(path, changedPath)\n      );\n      repoRerunTransactions(repo, affectedPath);\n    });\n\n    // We queued the events above, so just flush the queue here\n    eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, []);\n  } else {\n    log(\"update() called with empty data.  Don't do anything.\");\n    repoCallOnCompleteCallback(repo, onComplete, 'ok', undefined);\n  }\n}\n\n/**\n * Applies all of the changes stored up in the onDisconnect_ tree.\n */\nfunction repoRunOnDisconnectEvents(repo: Repo): void {\n  repoLog(repo, 'onDisconnectEvents');\n\n  const serverValues = repoGenerateServerValues(repo);\n  const resolvedOnDisconnectTree = newSparseSnapshotTree();\n  sparseSnapshotTreeForEachTree(\n    repo.onDisconnect_,\n    newEmptyPath(),\n    (path, node) => {\n      const resolved = resolveDeferredValueTree(\n        path,\n        node,\n        repo.serverSyncTree_,\n        serverValues\n      );\n      sparseSnapshotTreeRemember(resolvedOnDisconnectTree, path, resolved);\n    }\n  );\n  let events: Event[] = [];\n\n  sparseSnapshotTreeForEachTree(\n    resolvedOnDisconnectTree,\n    newEmptyPath(),\n    (path, snap) => {\n      events = events.concat(\n        syncTreeApplyServerOverwrite(repo.serverSyncTree_, path, snap)\n      );\n      const affectedPath = repoAbortTransactions(repo, path);\n      repoRerunTransactions(repo, affectedPath);\n    }\n  );\n\n  repo.onDisconnect_ = newSparseSnapshotTree();\n  eventQueueRaiseEventsForChangedPath(repo.eventQueue_, newEmptyPath(), events);\n}\n\nexport function repoOnDisconnectCancel(\n  repo: Repo,\n  path: Path,\n  onComplete: ((status: Error | null, errorReason?: string) => void) | null\n): void {\n  repo.server_.onDisconnectCancel(path.toString(), (status, errorReason) => {\n    if (status === 'ok') {\n      sparseSnapshotTreeForget(repo.onDisconnect_, path);\n    }\n    repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\n  });\n}\n\nexport function repoOnDisconnectSet(\n  repo: Repo,\n  path: Path,\n  value: unknown,\n  onComplete: ((status: Error | null, errorReason?: string) => void) | null\n): void {\n  const newNode = nodeFromJSON(value);\n  repo.server_.onDisconnectPut(\n    path.toString(),\n    newNode.val(/*export=*/ true),\n    (status, errorReason) => {\n      if (status === 'ok') {\n        sparseSnapshotTreeRemember(repo.onDisconnect_, path, newNode);\n      }\n      repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\n    }\n  );\n}\n\nexport function repoOnDisconnectSetWithPriority(\n  repo: Repo,\n  path: Path,\n  value: unknown,\n  priority: unknown,\n  onComplete: ((status: Error | null, errorReason?: string) => void) | null\n): void {\n  const newNode = nodeFromJSON(value, priority);\n  repo.server_.onDisconnectPut(\n    path.toString(),\n    newNode.val(/*export=*/ true),\n    (status, errorReason) => {\n      if (status === 'ok') {\n        sparseSnapshotTreeRemember(repo.onDisconnect_, path, newNode);\n      }\n      repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\n    }\n  );\n}\n\nexport function repoOnDisconnectUpdate(\n  repo: Repo,\n  path: Path,\n  childrenToMerge: { [k: string]: unknown },\n  onComplete: ((status: Error | null, errorReason?: string) => void) | null\n): void {\n  if (isEmpty(childrenToMerge)) {\n    log(\"onDisconnect().update() called with empty data.  Don't do anything.\");\n    repoCallOnCompleteCallback(repo, onComplete, 'ok', undefined);\n    return;\n  }\n\n  repo.server_.onDisconnectMerge(\n    path.toString(),\n    childrenToMerge,\n    (status, errorReason) => {\n      if (status === 'ok') {\n        each(childrenToMerge, (childName: string, childNode: unknown) => {\n          const newChildNode = nodeFromJSON(childNode);\n          sparseSnapshotTreeRemember(\n            repo.onDisconnect_,\n            pathChild(path, childName),\n            newChildNode\n          );\n        });\n      }\n      repoCallOnCompleteCallback(repo, onComplete, status, errorReason);\n    }\n  );\n}\n\nexport function repoAddEventCallbackForQuery(\n  repo: Repo,\n  query: QueryContext,\n  eventRegistration: EventRegistration\n): void {\n  let events;\n  if (pathGetFront(query._path) === '.info') {\n    events = syncTreeAddEventRegistration(\n      repo.infoSyncTree_,\n      query,\n      eventRegistration\n    );\n  } else {\n    events = syncTreeAddEventRegistration(\n      repo.serverSyncTree_,\n      query,\n      eventRegistration\n    );\n  }\n  eventQueueRaiseEventsAtPath(repo.eventQueue_, query._path, events);\n}\n\nexport function repoRemoveEventCallbackForQuery(\n  repo: Repo,\n  query: QueryContext,\n  eventRegistration: EventRegistration\n): void {\n  // These are guaranteed not to raise events, since we're not passing in a cancelError. However, we can future-proof\n  // a little bit by handling the return values anyways.\n  let events;\n  if (pathGetFront(query._path) === '.info') {\n    events = syncTreeRemoveEventRegistration(\n      repo.infoSyncTree_,\n      query,\n      eventRegistration\n    );\n  } else {\n    events = syncTreeRemoveEventRegistration(\n      repo.serverSyncTree_,\n      query,\n      eventRegistration\n    );\n  }\n  eventQueueRaiseEventsAtPath(repo.eventQueue_, query._path, events);\n}\n\nexport function repoInterrupt(repo: Repo): void {\n  if (repo.persistentConnection_) {\n    repo.persistentConnection_.interrupt(INTERRUPT_REASON);\n  }\n}\n\nexport function repoResume(repo: Repo): void {\n  if (repo.persistentConnection_) {\n    repo.persistentConnection_.resume(INTERRUPT_REASON);\n  }\n}\n\nexport function repoStats(repo: Repo, showDelta: boolean = false): void {\n  if (typeof console === 'undefined') {\n    return;\n  }\n\n  let stats: { [k: string]: unknown };\n  if (showDelta) {\n    if (!repo.statsListener_) {\n      repo.statsListener_ = new StatsListener(repo.stats_);\n    }\n    stats = repo.statsListener_.get();\n  } else {\n    stats = repo.stats_.get();\n  }\n\n  const longestName = Object.keys(stats).reduce(\n    (previousValue, currentValue) =>\n      Math.max(currentValue.length, previousValue),\n    0\n  );\n\n  each(stats, (stat: string, value: unknown) => {\n    let paddedStat = stat;\n    // pad stat names to be the same length (plus 2 extra spaces).\n    for (let i = stat.length; i < longestName + 2; i++) {\n      paddedStat += ' ';\n    }\n    console.log(paddedStat + value);\n  });\n}\n\nexport function repoStatsIncrementCounter(repo: Repo, metric: string): void {\n  repo.stats_.incrementCounter(metric);\n  statsReporterIncludeStat(repo.statsReporter_, metric);\n}\n\nfunction repoLog(repo: Repo, ...varArgs: unknown[]): void {\n  let prefix = '';\n  if (repo.persistentConnection_) {\n    prefix = repo.persistentConnection_.id + ':';\n  }\n  log(prefix, ...varArgs);\n}\n\nexport function repoCallOnCompleteCallback(\n  repo: Repo,\n  callback: ((status: Error | null, errorReason?: string) => void) | null,\n  status: string,\n  errorReason?: string | null\n): void {\n  if (callback) {\n    exceptionGuard(() => {\n      if (status === 'ok') {\n        callback(null);\n      } else {\n        const code = (status || 'error').toUpperCase();\n        let message = code;\n        if (errorReason) {\n          message += ': ' + errorReason;\n        }\n\n        const error = new Error(message);\n\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        (error as any).code = code;\n        callback(error);\n      }\n    });\n  }\n}\n\n/**\n * Creates a new transaction, adds it to the transactions we're tracking, and\n * sends it to the server if possible.\n *\n * @param path - Path at which to do transaction.\n * @param transactionUpdate - Update callback.\n * @param onComplete - Completion callback.\n * @param unwatcher - Function that will be called when the transaction no longer\n * need data updates for `path`.\n * @param applyLocally - Whether or not to make intermediate results visible\n */\nexport function repoStartTransaction(\n  repo: Repo,\n  path: Path,\n  transactionUpdate: (a: unknown) => unknown,\n  onComplete: ((error: Error, committed: boolean, node: Node) => void) | null,\n  unwatcher: () => void,\n  applyLocally: boolean\n): void {\n  repoLog(repo, 'transaction on ' + path);\n\n  // Initialize transaction.\n  const transaction: Transaction = {\n    path,\n    update: transactionUpdate,\n    onComplete,\n    // One of TransactionStatus enums.\n    status: null,\n    // Used when combining transactions at different locations to figure out\n    // which one goes first.\n    order: LUIDGenerator(),\n    // Whether to raise local events for this transaction.\n    applyLocally,\n    // Count of how many times we've retried the transaction.\n    retryCount: 0,\n    // Function to call to clean up our .on() listener.\n    unwatcher,\n    // Stores why a transaction was aborted.\n    abortReason: null,\n    currentWriteId: null,\n    currentInputSnapshot: null,\n    currentOutputSnapshotRaw: null,\n    currentOutputSnapshotResolved: null\n  };\n\n  // Run transaction initially.\n  const currentState = repoGetLatestState(repo, path, undefined);\n  transaction.currentInputSnapshot = currentState;\n  const newVal = transaction.update(currentState.val());\n  if (newVal === undefined) {\n    // Abort transaction.\n    transaction.unwatcher();\n    transaction.currentOutputSnapshotRaw = null;\n    transaction.currentOutputSnapshotResolved = null;\n    if (transaction.onComplete) {\n      transaction.onComplete(null, false, transaction.currentInputSnapshot);\n    }\n  } else {\n    validateFirebaseData(\n      'transaction failed: Data returned ',\n      newVal,\n      transaction.path\n    );\n\n    // Mark as run and add to our queue.\n    transaction.status = TransactionStatus.RUN;\n    const queueNode = treeSubTree(repo.transactionQueueTree_, path);\n    const nodeQueue = treeGetValue(queueNode) || [];\n    nodeQueue.push(transaction);\n\n    treeSetValue(queueNode, nodeQueue);\n\n    // Update visibleData and raise events\n    // Note: We intentionally raise events after updating all of our\n    // transaction state, since the user could start new transactions from the\n    // event callbacks.\n    let priorityForNode;\n    if (\n      typeof newVal === 'object' &&\n      newVal !== null &&\n      contains(newVal, '.priority')\n    ) {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      priorityForNode = safeGet(newVal as any, '.priority');\n      assert(\n        isValidPriority(priorityForNode),\n        'Invalid priority returned by transaction. ' +\n          'Priority must be a valid string, finite number, server value, or null.'\n      );\n    } else {\n      const currentNode =\n        syncTreeCalcCompleteEventCache(repo.serverSyncTree_, path) ||\n        ChildrenNode.EMPTY_NODE;\n      priorityForNode = currentNode.getPriority().val();\n    }\n\n    const serverValues = repoGenerateServerValues(repo);\n    const newNodeUnresolved = nodeFromJSON(newVal, priorityForNode);\n    const newNode = resolveDeferredValueSnapshot(\n      newNodeUnresolved,\n      currentState,\n      serverValues\n    );\n    transaction.currentOutputSnapshotRaw = newNodeUnresolved;\n    transaction.currentOutputSnapshotResolved = newNode;\n    transaction.currentWriteId = repoGetNextWriteId(repo);\n\n    const events = syncTreeApplyUserOverwrite(\n      repo.serverSyncTree_,\n      path,\n      newNode,\n      transaction.currentWriteId,\n      transaction.applyLocally\n    );\n    eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, events);\n\n    repoSendReadyTransactions(repo, repo.transactionQueueTree_);\n  }\n}\n\n/**\n * @param excludeSets - A specific set to exclude\n */\nfunction repoGetLatestState(\n  repo: Repo,\n  path: Path,\n  excludeSets?: number[]\n): Node {\n  return (\n    syncTreeCalcCompleteEventCache(repo.serverSyncTree_, path, excludeSets) ||\n    ChildrenNode.EMPTY_NODE\n  );\n}\n\n/**\n * Sends any already-run transactions that aren't waiting for outstanding\n * transactions to complete.\n *\n * Externally it's called with no arguments, but it calls itself recursively\n * with a particular transactionQueueTree node to recurse through the tree.\n *\n * @param node - transactionQueueTree node to start at.\n */\nfunction repoSendReadyTransactions(\n  repo: Repo,\n  node: Tree<Transaction[]> = repo.transactionQueueTree_\n): void {\n  // Before recursing, make sure any completed transactions are removed.\n  if (!node) {\n    repoPruneCompletedTransactionsBelowNode(repo, node);\n  }\n\n  if (treeGetValue(node)) {\n    const queue = repoBuildTransactionQueue(repo, node);\n    assert(queue.length > 0, 'Sending zero length transaction queue');\n\n    const allRun = queue.every(\n      (transaction: Transaction) => transaction.status === TransactionStatus.RUN\n    );\n\n    // If they're all run (and not sent), we can send them.  Else, we must wait.\n    if (allRun) {\n      repoSendTransactionQueue(repo, treeGetPath(node), queue);\n    }\n  } else if (treeHasChildren(node)) {\n    treeForEachChild(node, childNode => {\n      repoSendReadyTransactions(repo, childNode);\n    });\n  }\n}\n\n/**\n * Given a list of run transactions, send them to the server and then handle\n * the result (success or failure).\n *\n * @param path - The location of the queue.\n * @param queue - Queue of transactions under the specified location.\n */\nfunction repoSendTransactionQueue(\n  repo: Repo,\n  path: Path,\n  queue: Transaction[]\n): void {\n  // Mark transactions as sent and increment retry count!\n  const setsToIgnore = queue.map(txn => {\n    return txn.currentWriteId;\n  });\n  const latestState = repoGetLatestState(repo, path, setsToIgnore);\n  let snapToSend = latestState;\n  const latestHash = latestState.hash();\n  for (let i = 0; i < queue.length; i++) {\n    const txn = queue[i];\n    assert(\n      txn.status === TransactionStatus.RUN,\n      'tryToSendTransactionQueue_: items in queue should all be run.'\n    );\n    txn.status = TransactionStatus.SENT;\n    txn.retryCount++;\n    const relativePath = newRelativePath(path, txn.path);\n    // If we've gotten to this point, the output snapshot must be defined.\n    snapToSend = snapToSend.updateChild(\n      relativePath /** @type {!Node} */,\n      txn.currentOutputSnapshotRaw\n    );\n  }\n\n  const dataToSend = snapToSend.val(true);\n  const pathToSend = path;\n\n  // Send the put.\n  repo.server_.put(\n    pathToSend.toString(),\n    dataToSend,\n    (status: string) => {\n      repoLog(repo, 'transaction put response', {\n        path: pathToSend.toString(),\n        status\n      });\n\n      let events: Event[] = [];\n      if (status === 'ok') {\n        // Queue up the callbacks and fire them after cleaning up all of our\n        // transaction state, since the callback could trigger more\n        // transactions or sets.\n        const callbacks = [];\n        for (let i = 0; i < queue.length; i++) {\n          queue[i].status = TransactionStatus.COMPLETED;\n          events = events.concat(\n            syncTreeAckUserWrite(repo.serverSyncTree_, queue[i].currentWriteId)\n          );\n          if (queue[i].onComplete) {\n            // We never unset the output snapshot, and given that this\n            // transaction is complete, it should be set\n            callbacks.push(() =>\n              queue[i].onComplete(\n                null,\n                true,\n                queue[i].currentOutputSnapshotResolved\n              )\n            );\n          }\n          queue[i].unwatcher();\n        }\n\n        // Now remove the completed transactions.\n        repoPruneCompletedTransactionsBelowNode(\n          repo,\n          treeSubTree(repo.transactionQueueTree_, path)\n        );\n        // There may be pending transactions that we can now send.\n        repoSendReadyTransactions(repo, repo.transactionQueueTree_);\n\n        eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, events);\n\n        // Finally, trigger onComplete callbacks.\n        for (let i = 0; i < callbacks.length; i++) {\n          exceptionGuard(callbacks[i]);\n        }\n      } else {\n        // transactions are no longer sent.  Update their status appropriately.\n        if (status === 'datastale') {\n          for (let i = 0; i < queue.length; i++) {\n            if (queue[i].status === TransactionStatus.SENT_NEEDS_ABORT) {\n              queue[i].status = TransactionStatus.NEEDS_ABORT;\n            } else {\n              queue[i].status = TransactionStatus.RUN;\n            }\n          }\n        } else {\n          warn(\n            'transaction at ' + pathToSend.toString() + ' failed: ' + status\n          );\n          for (let i = 0; i < queue.length; i++) {\n            queue[i].status = TransactionStatus.NEEDS_ABORT;\n            queue[i].abortReason = status;\n          }\n        }\n\n        repoRerunTransactions(repo, path);\n      }\n    },\n    latestHash\n  );\n}\n\n/**\n * Finds all transactions dependent on the data at changedPath and reruns them.\n *\n * Should be called any time cached data changes.\n *\n * Return the highest path that was affected by rerunning transactions. This\n * is the path at which events need to be raised for.\n *\n * @param changedPath - The path in mergedData that changed.\n * @returns The rootmost path that was affected by rerunning transactions.\n */\nfunction repoRerunTransactions(repo: Repo, changedPath: Path): Path {\n  const rootMostTransactionNode = repoGetAncestorTransactionNode(\n    repo,\n    changedPath\n  );\n  const path = treeGetPath(rootMostTransactionNode);\n\n  const queue = repoBuildTransactionQueue(repo, rootMostTransactionNode);\n  repoRerunTransactionQueue(repo, queue, path);\n\n  return path;\n}\n\n/**\n * Does all the work of rerunning transactions (as well as cleans up aborted\n * transactions and whatnot).\n *\n * @param queue - The queue of transactions to run.\n * @param path - The path the queue is for.\n */\nfunction repoRerunTransactionQueue(\n  repo: Repo,\n  queue: Transaction[],\n  path: Path\n): void {\n  if (queue.length === 0) {\n    return; // Nothing to do!\n  }\n\n  // Queue up the callbacks and fire them after cleaning up all of our\n  // transaction state, since the callback could trigger more transactions or\n  // sets.\n  const callbacks = [];\n  let events: Event[] = [];\n  // Ignore all of the sets we're going to re-run.\n  const txnsToRerun = queue.filter(q => {\n    return q.status === TransactionStatus.RUN;\n  });\n  const setsToIgnore = txnsToRerun.map(q => {\n    return q.currentWriteId;\n  });\n  for (let i = 0; i < queue.length; i++) {\n    const transaction = queue[i];\n    const relativePath = newRelativePath(path, transaction.path);\n    let abortTransaction = false,\n      abortReason;\n    assert(\n      relativePath !== null,\n      'rerunTransactionsUnderNode_: relativePath should not be null.'\n    );\n\n    if (transaction.status === TransactionStatus.NEEDS_ABORT) {\n      abortTransaction = true;\n      abortReason = transaction.abortReason;\n      events = events.concat(\n        syncTreeAckUserWrite(\n          repo.serverSyncTree_,\n          transaction.currentWriteId,\n          true\n        )\n      );\n    } else if (transaction.status === TransactionStatus.RUN) {\n      if (transaction.retryCount >= MAX_TRANSACTION_RETRIES) {\n        abortTransaction = true;\n        abortReason = 'maxretry';\n        events = events.concat(\n          syncTreeAckUserWrite(\n            repo.serverSyncTree_,\n            transaction.currentWriteId,\n            true\n          )\n        );\n      } else {\n        // This code reruns a transaction\n        const currentNode = repoGetLatestState(\n          repo,\n          transaction.path,\n          setsToIgnore\n        );\n        transaction.currentInputSnapshot = currentNode;\n        const newData = queue[i].update(currentNode.val());\n        if (newData !== undefined) {\n          validateFirebaseData(\n            'transaction failed: Data returned ',\n            newData,\n            transaction.path\n          );\n          let newDataNode = nodeFromJSON(newData);\n          const hasExplicitPriority =\n            typeof newData === 'object' &&\n            newData != null &&\n            contains(newData, '.priority');\n          if (!hasExplicitPriority) {\n            // Keep the old priority if there wasn't a priority explicitly specified.\n            newDataNode = newDataNode.updatePriority(currentNode.getPriority());\n          }\n\n          const oldWriteId = transaction.currentWriteId;\n          const serverValues = repoGenerateServerValues(repo);\n          const newNodeResolved = resolveDeferredValueSnapshot(\n            newDataNode,\n            currentNode,\n            serverValues\n          );\n\n          transaction.currentOutputSnapshotRaw = newDataNode;\n          transaction.currentOutputSnapshotResolved = newNodeResolved;\n          transaction.currentWriteId = repoGetNextWriteId(repo);\n          // Mutates setsToIgnore in place\n          setsToIgnore.splice(setsToIgnore.indexOf(oldWriteId), 1);\n          events = events.concat(\n            syncTreeApplyUserOverwrite(\n              repo.serverSyncTree_,\n              transaction.path,\n              newNodeResolved,\n              transaction.currentWriteId,\n              transaction.applyLocally\n            )\n          );\n          events = events.concat(\n            syncTreeAckUserWrite(repo.serverSyncTree_, oldWriteId, true)\n          );\n        } else {\n          abortTransaction = true;\n          abortReason = 'nodata';\n          events = events.concat(\n            syncTreeAckUserWrite(\n              repo.serverSyncTree_,\n              transaction.currentWriteId,\n              true\n            )\n          );\n        }\n      }\n    }\n    eventQueueRaiseEventsForChangedPath(repo.eventQueue_, path, events);\n    events = [];\n    if (abortTransaction) {\n      // Abort.\n      queue[i].status = TransactionStatus.COMPLETED;\n\n      // Removing a listener can trigger pruning which can muck with\n      // mergedData/visibleData (as it prunes data). So defer the unwatcher\n      // until we're done.\n      (function (unwatcher) {\n        setTimeout(unwatcher, Math.floor(0));\n      })(queue[i].unwatcher);\n\n      if (queue[i].onComplete) {\n        if (abortReason === 'nodata') {\n          callbacks.push(() =>\n            queue[i].onComplete(null, false, queue[i].currentInputSnapshot)\n          );\n        } else {\n          callbacks.push(() =>\n            queue[i].onComplete(new Error(abortReason), false, null)\n          );\n        }\n      }\n    }\n  }\n\n  // Clean up completed transactions.\n  repoPruneCompletedTransactionsBelowNode(repo, repo.transactionQueueTree_);\n\n  // Now fire callbacks, now that we're in a good, known state.\n  for (let i = 0; i < callbacks.length; i++) {\n    exceptionGuard(callbacks[i]);\n  }\n\n  // Try to send the transaction result to the server.\n  repoSendReadyTransactions(repo, repo.transactionQueueTree_);\n}\n\n/**\n * Returns the rootmost ancestor node of the specified path that has a pending\n * transaction on it, or just returns the node for the given path if there are\n * no pending transactions on any ancestor.\n *\n * @param path - The location to start at.\n * @returns The rootmost node with a transaction.\n */\nfunction repoGetAncestorTransactionNode(\n  repo: Repo,\n  path: Path\n): Tree<Transaction[]> {\n  let front;\n\n  // Start at the root and walk deeper into the tree towards path until we\n  // find a node with pending transactions.\n  let transactionNode = repo.transactionQueueTree_;\n  front = pathGetFront(path);\n  while (front !== null && treeGetValue(transactionNode) === undefined) {\n    transactionNode = treeSubTree(transactionNode, front);\n    path = pathPopFront(path);\n    front = pathGetFront(path);\n  }\n\n  return transactionNode;\n}\n\n/**\n * Builds the queue of all transactions at or below the specified\n * transactionNode.\n *\n * @param transactionNode\n * @returns The generated queue.\n */\nfunction repoBuildTransactionQueue(\n  repo: Repo,\n  transactionNode: Tree<Transaction[]>\n): Transaction[] {\n  // Walk any child transaction queues and aggregate them into a single queue.\n  const transactionQueue: Transaction[] = [];\n  repoAggregateTransactionQueuesForNode(\n    repo,\n    transactionNode,\n    transactionQueue\n  );\n\n  // Sort them by the order the transactions were created.\n  transactionQueue.sort((a, b) => a.order - b.order);\n\n  return transactionQueue;\n}\n\nfunction repoAggregateTransactionQueuesForNode(\n  repo: Repo,\n  node: Tree<Transaction[]>,\n  queue: Transaction[]\n): void {\n  const nodeQueue = treeGetValue(node);\n  if (nodeQueue) {\n    for (let i = 0; i < nodeQueue.length; i++) {\n      queue.push(nodeQueue[i]);\n    }\n  }\n\n  treeForEachChild(node, child => {\n    repoAggregateTransactionQueuesForNode(repo, child, queue);\n  });\n}\n\n/**\n * Remove COMPLETED transactions at or below this node in the transactionQueueTree_.\n */\nfunction repoPruneCompletedTransactionsBelowNode(\n  repo: Repo,\n  node: Tree<Transaction[]>\n): void {\n  const queue = treeGetValue(node);\n  if (queue) {\n    let to = 0;\n    for (let from = 0; from < queue.length; from++) {\n      if (queue[from].status !== TransactionStatus.COMPLETED) {\n        queue[to] = queue[from];\n        to++;\n      }\n    }\n    queue.length = to;\n    treeSetValue(node, queue.length > 0 ? queue : undefined);\n  }\n\n  treeForEachChild(node, childNode => {\n    repoPruneCompletedTransactionsBelowNode(repo, childNode);\n  });\n}\n\n/**\n * Aborts all transactions on ancestors or descendants of the specified path.\n * Called when doing a set() or update() since we consider them incompatible\n * with transactions.\n *\n * @param path - Path for which we want to abort related transactions.\n */\nfunction repoAbortTransactions(repo: Repo, path: Path): Path {\n  const affectedPath = treeGetPath(repoGetAncestorTransactionNode(repo, path));\n\n  const transactionNode = treeSubTree(repo.transactionQueueTree_, path);\n\n  treeForEachAncestor(transactionNode, (node: Tree<Transaction[]>) => {\n    repoAbortTransactionsOnNode(repo, node);\n  });\n\n  repoAbortTransactionsOnNode(repo, transactionNode);\n\n  treeForEachDescendant(transactionNode, (node: Tree<Transaction[]>) => {\n    repoAbortTransactionsOnNode(repo, node);\n  });\n\n  return affectedPath;\n}\n\n/**\n * Abort transactions stored in this transaction queue node.\n *\n * @param node - Node to abort transactions for.\n */\nfunction repoAbortTransactionsOnNode(\n  repo: Repo,\n  node: Tree<Transaction[]>\n): void {\n  const queue = treeGetValue(node);\n  if (queue) {\n    // Queue up the callbacks and fire them after cleaning up all of our\n    // transaction state, since the callback could trigger more transactions\n    // or sets.\n    const callbacks = [];\n\n    // Go through queue.  Any already-sent transactions must be marked for\n    // abort, while the unsent ones can be immediately aborted and removed.\n    let events: Event[] = [];\n    let lastSent = -1;\n    for (let i = 0; i < queue.length; i++) {\n      if (queue[i].status === TransactionStatus.SENT_NEEDS_ABORT) {\n        // Already marked.  No action needed.\n      } else if (queue[i].status === TransactionStatus.SENT) {\n        assert(\n          lastSent === i - 1,\n          'All SENT items should be at beginning of queue.'\n        );\n        lastSent = i;\n        // Mark transaction for abort when it comes back.\n        queue[i].status = TransactionStatus.SENT_NEEDS_ABORT;\n        queue[i].abortReason = 'set';\n      } else {\n        assert(\n          queue[i].status === TransactionStatus.RUN,\n          'Unexpected transaction status in abort'\n        );\n        // We can abort it immediately.\n        queue[i].unwatcher();\n        events = events.concat(\n          syncTreeAckUserWrite(\n            repo.serverSyncTree_,\n            queue[i].currentWriteId,\n            true\n          )\n        );\n        if (queue[i].onComplete) {\n          callbacks.push(\n            queue[i].onComplete.bind(null, new Error('set'), false, null)\n          );\n        }\n      }\n    }\n    if (lastSent === -1) {\n      // We're not waiting for any sent transactions.  We can clear the queue.\n      treeSetValue(node, undefined);\n    } else {\n      // Remove the transactions we aborted.\n      queue.length = lastSent + 1;\n    }\n\n    // Now fire the callbacks.\n    eventQueueRaiseEventsForChangedPath(\n      repo.eventQueue_,\n      treeGetPath(node),\n      events\n    );\n    for (let i = 0; i < callbacks.length; i++) {\n      exceptionGuard(callbacks[i]);\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { RepoInfo } from '../../RepoInfo';\nimport { Path } from '../Path';\nimport { warnIfPageIsSecure, warn, fatal } from '../util';\n\nfunction decodePath(pathString: string): string {\n  let pathStringDecoded = '';\n  const pieces = pathString.split('/');\n  for (let i = 0; i < pieces.length; i++) {\n    if (pieces[i].length > 0) {\n      let piece = pieces[i];\n      try {\n        piece = decodeURIComponent(piece.replace(/\\+/g, ' '));\n      } catch (e) {}\n      pathStringDecoded += '/' + piece;\n    }\n  }\n  return pathStringDecoded;\n}\n\n/**\n * @returns key value hash\n */\nfunction decodeQuery(queryString: string): { [key: string]: string } {\n  const results = {};\n  if (queryString.charAt(0) === '?') {\n    queryString = queryString.substring(1);\n  }\n  for (const segment of queryString.split('&')) {\n    if (segment.length === 0) {\n      continue;\n    }\n    const kv = segment.split('=');\n    if (kv.length === 2) {\n      results[decodeURIComponent(kv[0])] = decodeURIComponent(kv[1]);\n    } else {\n      warn(`Invalid query segment '${segment}' in query '${queryString}'`);\n    }\n  }\n  return results;\n}\n\nexport const parseRepoInfo = function (\n  dataURL: string,\n  nodeAdmin: boolean\n): { repoInfo: RepoInfo; path: Path } {\n  const parsedUrl = parseDatabaseURL(dataURL),\n    namespace = parsedUrl.namespace;\n\n  if (parsedUrl.domain === 'firebase.com') {\n    fatal(\n      parsedUrl.host +\n        ' is no longer supported. ' +\n        'Please use <YOUR FIREBASE>.firebaseio.com instead'\n    );\n  }\n\n  // Catch common error of uninitialized namespace value.\n  if (\n    (!namespace || namespace === 'undefined') &&\n    parsedUrl.domain !== 'localhost'\n  ) {\n    fatal(\n      'Cannot parse Firebase url. Please use https://<YOUR FIREBASE>.firebaseio.com'\n    );\n  }\n\n  if (!parsedUrl.secure) {\n    warnIfPageIsSecure();\n  }\n\n  const webSocketOnly = parsedUrl.scheme === 'ws' || parsedUrl.scheme === 'wss';\n\n  return {\n    repoInfo: new RepoInfo(\n      parsedUrl.host,\n      parsedUrl.secure,\n      namespace,\n      webSocketOnly,\n      nodeAdmin,\n      /*persistenceKey=*/ '',\n      /*includeNamespaceInQueryParams=*/ namespace !== parsedUrl.subdomain\n    ),\n    path: new Path(parsedUrl.pathString)\n  };\n};\n\nexport const parseDatabaseURL = function (dataURL: string): {\n  host: string;\n  port: number;\n  domain: string;\n  subdomain: string;\n  secure: boolean;\n  scheme: string;\n  pathString: string;\n  namespace: string;\n} {\n  // Default to empty strings in the event of a malformed string.\n  let host = '',\n    domain = '',\n    subdomain = '',\n    pathString = '',\n    namespace = '';\n\n  // Always default to SSL, unless otherwise specified.\n  let secure = true,\n    scheme = 'https',\n    port = 443;\n\n  // Don't do any validation here. The caller is responsible for validating the result of parsing.\n  if (typeof dataURL === 'string') {\n    // Parse scheme.\n    let colonInd = dataURL.indexOf('//');\n    if (colonInd >= 0) {\n      scheme = dataURL.substring(0, colonInd - 1);\n      dataURL = dataURL.substring(colonInd + 2);\n    }\n\n    // Parse host, path, and query string.\n    let slashInd = dataURL.indexOf('/');\n    if (slashInd === -1) {\n      slashInd = dataURL.length;\n    }\n    let questionMarkInd = dataURL.indexOf('?');\n    if (questionMarkInd === -1) {\n      questionMarkInd = dataURL.length;\n    }\n    host = dataURL.substring(0, Math.min(slashInd, questionMarkInd));\n    if (slashInd < questionMarkInd) {\n      // For pathString, questionMarkInd will always come after slashInd\n      pathString = decodePath(dataURL.substring(slashInd, questionMarkInd));\n    }\n    const queryParams = decodeQuery(\n      dataURL.substring(Math.min(dataURL.length, questionMarkInd))\n    );\n\n    // If we have a port, use scheme for determining if it's secure.\n    colonInd = host.indexOf(':');\n    if (colonInd >= 0) {\n      secure = scheme === 'https' || scheme === 'wss';\n      port = parseInt(host.substring(colonInd + 1), 10);\n    } else {\n      colonInd = host.length;\n    }\n\n    const hostWithoutPort = host.slice(0, colonInd);\n    if (hostWithoutPort.toLowerCase() === 'localhost') {\n      domain = 'localhost';\n    } else if (hostWithoutPort.split('.').length <= 2) {\n      domain = hostWithoutPort;\n    } else {\n      // Interpret the subdomain of a 3 or more component URL as the namespace name.\n      const dotInd = host.indexOf('.');\n      subdomain = host.substring(0, dotInd).toLowerCase();\n      domain = host.substring(dotInd + 1);\n      // Normalize namespaces to lowercase to share storage / connection.\n      namespace = subdomain;\n    }\n    // Always treat the value of the `ns` as the namespace name if it is present.\n    if ('ns' in queryParams) {\n      namespace = queryParams['ns'];\n    }\n  }\n\n  return {\n    host,\n    port,\n    domain,\n    subdomain,\n    secure,\n    scheme,\n    pathString,\n    namespace\n  };\n};\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { stringify } from '@firebase/util';\n\nimport { DataSnapshot as ExpDataSnapshot } from '../../api/Reference_impl';\nimport { Path } from '../util/Path';\n\nimport { EventRegistration } from './EventRegistration';\n\n/**\n * Encapsulates the data needed to raise an event\n * @interface\n */\nexport interface Event {\n  getPath(): Path;\n\n  getEventType(): string;\n\n  getEventRunner(): () => void;\n\n  toString(): string;\n}\n\n/**\n * One of the following strings: \"value\", \"child_added\", \"child_changed\",\n * \"child_removed\", or \"child_moved.\"\n */\nexport type EventType =\n  | 'value'\n  | 'child_added'\n  | 'child_changed'\n  | 'child_moved'\n  | 'child_removed';\n\n/**\n * Encapsulates the data needed to raise an event\n */\nexport class DataEvent implements Event {\n  /**\n   * @param eventType - One of: value, child_added, child_changed, child_moved, child_removed\n   * @param eventRegistration - The function to call to with the event data. User provided\n   * @param snapshot - The data backing the event\n   * @param prevName - Optional, the name of the previous child for child_* events.\n   */\n  constructor(\n    public eventType: EventType,\n    public eventRegistration: EventRegistration,\n    public snapshot: ExpDataSnapshot,\n    public prevName?: string | null\n  ) {}\n  getPath(): Path {\n    const ref = this.snapshot.ref;\n    if (this.eventType === 'value') {\n      return ref._path;\n    } else {\n      return ref.parent._path;\n    }\n  }\n  getEventType(): string {\n    return this.eventType;\n  }\n  getEventRunner(): () => void {\n    return this.eventRegistration.getEventRunner(this);\n  }\n  toString(): string {\n    return (\n      this.getPath().toString() +\n      ':' +\n      this.eventType +\n      ':' +\n      stringify(this.snapshot.exportVal())\n    );\n  }\n}\n\nexport class CancelEvent implements Event {\n  constructor(\n    public eventRegistration: EventRegistration,\n    public error: Error,\n    public path: Path\n  ) {}\n  getPath(): Path {\n    return this.path;\n  }\n  getEventType(): string {\n    return 'cancel';\n  }\n  getEventRunner(): () => void {\n    return this.eventRegistration.getEventRunner(this);\n  }\n  toString(): string {\n    return this.path.toString() + ':cancel';\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport { DataSnapshot } from '../../api/Reference_impl';\nimport { Repo } from '../Repo';\nimport { Path } from '../util/Path';\n\nimport { Change } from './Change';\nimport { CancelEvent, Event } from './Event';\nimport { QueryParams } from './QueryParams';\n\n/**\n * A user callback. Callbacks issues from the Legacy SDK maintain references\n * to the original user-issued callbacks, which allows equality\n * comparison by reference even though this callbacks are wrapped before\n * they can be passed to the firebase@exp SDK.\n *\n * @internal\n */\nexport interface UserCallback {\n  (dataSnapshot: DataSnapshot, previousChildName?: string | null): unknown;\n  userCallback?: unknown;\n  context?: object | null;\n}\n\n/**\n * A wrapper class that converts events from the database@exp SDK to the legacy\n * Database SDK. Events are not converted directly as event registration relies\n * on reference comparison of the original user callback (see `matches()`) and\n * relies on equality of the legacy SDK's `context` object.\n */\nexport class CallbackContext {\n  constructor(\n    private readonly snapshotCallback: UserCallback,\n    private readonly cancelCallback?: (error: Error) => unknown\n  ) {}\n\n  onValue(\n    expDataSnapshot: DataSnapshot,\n    previousChildName?: string | null\n  ): void {\n    this.snapshotCallback.call(null, expDataSnapshot, previousChildName);\n  }\n\n  onCancel(error: Error): void {\n    assert(\n      this.hasCancelCallback,\n      'Raising a cancel event on a listener with no cancel callback'\n    );\n    return this.cancelCallback.call(null, error);\n  }\n\n  get hasCancelCallback(): boolean {\n    return !!this.cancelCallback;\n  }\n\n  matches(other: CallbackContext): boolean {\n    return (\n      this.snapshotCallback === other.snapshotCallback ||\n      (this.snapshotCallback.userCallback !== undefined &&\n        this.snapshotCallback.userCallback ===\n          other.snapshotCallback.userCallback &&\n        this.snapshotCallback.context === other.snapshotCallback.context)\n    );\n  }\n}\n\nexport interface QueryContext {\n  readonly _queryIdentifier: string;\n  readonly _queryObject: object;\n  readonly _repo: Repo;\n  readonly _path: Path;\n  readonly _queryParams: QueryParams;\n}\n\n/**\n * An EventRegistration is basically an event type ('value', 'child_added', etc.) and a callback\n * to be notified of that type of event.\n *\n * That said, it can also contain a cancel callback to be notified if the event is canceled.  And\n * currently, this code is organized around the idea that you would register multiple child_ callbacks\n * together, as a single EventRegistration.  Though currently we don't do that.\n */\nexport interface EventRegistration {\n  /**\n   * True if this container has a callback to trigger for this event type\n   */\n  respondsTo(eventType: string): boolean;\n\n  createEvent(change: Change, query: QueryContext): Event;\n\n  /**\n   * Given event data, return a function to trigger the user's callback\n   */\n  getEventRunner(eventData: Event): () => void;\n\n  createCancelEvent(error: Error, path: Path): CancelEvent | null;\n\n  matches(other: EventRegistration): boolean;\n\n  /**\n   * False basically means this is a \"dummy\" callback container being used as a sentinel\n   * to remove all callback containers of a particular type.  (e.g. if the user does\n   * ref.off('value') without specifying a specific callback).\n   *\n   * (TODO: Rework this, since it's hacky)\n   *\n   */\n  hasAnyCallback(): boolean;\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, getModularInstance, Deferred } from '@firebase/util';\n\nimport {\n  Repo,\n  repoAddEventCallbackForQuery,\n  repoGetValue,\n  repoRemoveEventCallbackForQuery,\n  repoServerTime,\n  repoSetWithPriority,\n  repoUpdate\n} from '../core/Repo';\nimport { ChildrenNode } from '../core/snap/ChildrenNode';\nimport { Index } from '../core/snap/indexes/Index';\nimport { KEY_INDEX } from '../core/snap/indexes/KeyIndex';\nimport { PathIndex } from '../core/snap/indexes/PathIndex';\nimport { PRIORITY_INDEX } from '../core/snap/indexes/PriorityIndex';\nimport { VALUE_INDEX } from '../core/snap/indexes/ValueIndex';\nimport { Node } from '../core/snap/Node';\nimport { syncPointSetReferenceConstructor } from '../core/SyncPoint';\nimport { syncTreeSetReferenceConstructor } from '../core/SyncTree';\nimport { parseRepoInfo } from '../core/util/libs/parser';\nimport { nextPushId } from '../core/util/NextPushId';\nimport {\n  Path,\n  pathEquals,\n  pathGetBack,\n  pathGetFront,\n  pathChild,\n  pathParent,\n  pathToUrlEncodedString,\n  pathIsEmpty\n} from '../core/util/Path';\nimport {\n  fatal,\n  MAX_NAME,\n  MIN_NAME,\n  ObjectToUniqueKey\n} from '../core/util/util';\nimport {\n  isValidPriority,\n  validateFirebaseDataArg,\n  validateFirebaseMergeDataArg,\n  validateKey,\n  validatePathString,\n  validatePriority,\n  validateRootPathString,\n  validateUrl,\n  validateWritablePath\n} from '../core/util/validation';\nimport { Change } from '../core/view/Change';\nimport { CancelEvent, DataEvent, EventType } from '../core/view/Event';\nimport {\n  CallbackContext,\n  EventRegistration,\n  QueryContext,\n  UserCallback\n} from '../core/view/EventRegistration';\nimport {\n  QueryParams,\n  queryParamsEndAt,\n  queryParamsEndBefore,\n  queryParamsGetQueryObject,\n  queryParamsLimitToFirst,\n  queryParamsLimitToLast,\n  queryParamsOrderBy,\n  queryParamsStartAfter,\n  queryParamsStartAt\n} from '../core/view/QueryParams';\n\nimport { Database } from './Database';\nimport { OnDisconnect } from './OnDisconnect';\nimport {\n  ListenOptions,\n  Query as Query,\n  DatabaseReference,\n  Unsubscribe,\n  ThenableReference\n} from './Reference';\n\n/**\n * @internal\n */\nexport class QueryImpl implements Query, QueryContext {\n  /**\n   * @hideconstructor\n   */\n  constructor(\n    readonly _repo: Repo,\n    readonly _path: Path,\n    readonly _queryParams: QueryParams,\n    readonly _orderByCalled: boolean\n  ) {}\n\n  get key(): string | null {\n    if (pathIsEmpty(this._path)) {\n      return null;\n    } else {\n      return pathGetBack(this._path);\n    }\n  }\n\n  get ref(): DatabaseReference {\n    return new ReferenceImpl(this._repo, this._path);\n  }\n\n  get _queryIdentifier(): string {\n    const obj = queryParamsGetQueryObject(this._queryParams);\n    const id = ObjectToUniqueKey(obj);\n    return id === '{}' ? 'default' : id;\n  }\n\n  /**\n   * An object representation of the query parameters used by this Query.\n   */\n  get _queryObject(): object {\n    return queryParamsGetQueryObject(this._queryParams);\n  }\n\n  isEqual(other: QueryImpl | null): boolean {\n    other = getModularInstance(other);\n    if (!(other instanceof QueryImpl)) {\n      return false;\n    }\n\n    const sameRepo = this._repo === other._repo;\n    const samePath = pathEquals(this._path, other._path);\n    const sameQueryIdentifier =\n      this._queryIdentifier === other._queryIdentifier;\n\n    return sameRepo && samePath && sameQueryIdentifier;\n  }\n\n  toJSON(): string {\n    return this.toString();\n  }\n\n  toString(): string {\n    return this._repo.toString() + pathToUrlEncodedString(this._path);\n  }\n}\n\n/**\n * Validates that no other order by call has been made\n */\nfunction validateNoPreviousOrderByCall(query: QueryImpl, fnName: string) {\n  if (query._orderByCalled === true) {\n    throw new Error(fnName + \": You can't combine multiple orderBy calls.\");\n  }\n}\n\n/**\n * Validates start/end values for queries.\n */\nfunction validateQueryEndpoints(params: QueryParams) {\n  let startNode = null;\n  let endNode = null;\n  if (params.hasStart()) {\n    startNode = params.getIndexStartValue();\n  }\n  if (params.hasEnd()) {\n    endNode = params.getIndexEndValue();\n  }\n\n  if (params.getIndex() === KEY_INDEX) {\n    const tooManyArgsError =\n      'Query: When ordering by key, you may only pass one argument to ' +\n      'startAt(), endAt(), or equalTo().';\n    const wrongArgTypeError =\n      'Query: When ordering by key, the argument passed to startAt(), startAfter(), ' +\n      'endAt(), endBefore(), or equalTo() must be a string.';\n    if (params.hasStart()) {\n      const startName = params.getIndexStartName();\n      if (startName !== MIN_NAME) {\n        throw new Error(tooManyArgsError);\n      } else if (typeof startNode !== 'string') {\n        throw new Error(wrongArgTypeError);\n      }\n    }\n    if (params.hasEnd()) {\n      const endName = params.getIndexEndName();\n      if (endName !== MAX_NAME) {\n        throw new Error(tooManyArgsError);\n      } else if (typeof endNode !== 'string') {\n        throw new Error(wrongArgTypeError);\n      }\n    }\n  } else if (params.getIndex() === PRIORITY_INDEX) {\n    if (\n      (startNode != null && !isValidPriority(startNode)) ||\n      (endNode != null && !isValidPriority(endNode))\n    ) {\n      throw new Error(\n        'Query: When ordering by priority, the first argument passed to startAt(), ' +\n          'startAfter() endAt(), endBefore(), or equalTo() must be a valid priority value ' +\n          '(null, a number, or a string).'\n      );\n    }\n  } else {\n    assert(\n      params.getIndex() instanceof PathIndex ||\n        params.getIndex() === VALUE_INDEX,\n      'unknown index type.'\n    );\n    if (\n      (startNode != null && typeof startNode === 'object') ||\n      (endNode != null && typeof endNode === 'object')\n    ) {\n      throw new Error(\n        'Query: First argument passed to startAt(), startAfter(), endAt(), endBefore(), or ' +\n          'equalTo() cannot be an object.'\n      );\n    }\n  }\n}\n\n/**\n * Validates that limit* has been called with the correct combination of parameters\n */\nfunction validateLimit(params: QueryParams) {\n  if (\n    params.hasStart() &&\n    params.hasEnd() &&\n    params.hasLimit() &&\n    !params.hasAnchoredLimit()\n  ) {\n    throw new Error(\n      \"Query: Can't combine startAt(), startAfter(), endAt(), endBefore(), and limit(). Use \" +\n        'limitToFirst() or limitToLast() instead.'\n    );\n  }\n}\n/**\n * @internal\n */\nexport class ReferenceImpl extends QueryImpl implements DatabaseReference {\n  /** @hideconstructor */\n  constructor(repo: Repo, path: Path) {\n    super(repo, path, new QueryParams(), false);\n  }\n\n  get parent(): ReferenceImpl | null {\n    const parentPath = pathParent(this._path);\n    return parentPath === null\n      ? null\n      : new ReferenceImpl(this._repo, parentPath);\n  }\n\n  get root(): ReferenceImpl {\n    let ref: ReferenceImpl = this;\n    while (ref.parent !== null) {\n      ref = ref.parent;\n    }\n    return ref;\n  }\n}\n\n/**\n * A `DataSnapshot` contains data from a Database location.\n *\n * Any time you read data from the Database, you receive the data as a\n * `DataSnapshot`. A `DataSnapshot` is passed to the event callbacks you attach\n * with `on()` or `once()`. You can extract the contents of the snapshot as a\n * JavaScript object by calling the `val()` method. Alternatively, you can\n * traverse into the snapshot by calling `child()` to return child snapshots\n * (which you could then call `val()` on).\n *\n * A `DataSnapshot` is an efficiently generated, immutable copy of the data at\n * a Database location. It cannot be modified and will never change (to modify\n * data, you always call the `set()` method on a `Reference` directly).\n */\nexport class DataSnapshot {\n  /**\n   * @param _node - A SnapshotNode to wrap.\n   * @param ref - The location this snapshot came from.\n   * @param _index - The iteration order for this snapshot\n   * @hideconstructor\n   */\n  constructor(\n    readonly _node: Node,\n    /**\n     * The location of this DataSnapshot.\n     */\n    readonly ref: DatabaseReference,\n    readonly _index: Index\n  ) {}\n\n  /**\n   * Gets the priority value of the data in this `DataSnapshot`.\n   *\n   * Applications need not use priority but can order collections by\n   * ordinary properties (see\n   * {@link https://firebase.google.com/docs/database/web/lists-of-data#sorting_and_filtering_data |Sorting and filtering data}\n   * ).\n   */\n  get priority(): string | number | null {\n    // typecast here because we never return deferred values or internal priorities (MAX_PRIORITY)\n    return this._node.getPriority().val() as string | number | null;\n  }\n\n  /**\n   * The key (last part of the path) of the location of this `DataSnapshot`.\n   *\n   * The last token in a Database location is considered its key. For example,\n   * \"ada\" is the key for the /users/ada/ node. Accessing the key on any\n   * `DataSnapshot` will return the key for the location that generated it.\n   * However, accessing the key on the root URL of a Database will return\n   * `null`.\n   */\n  get key(): string | null {\n    return this.ref.key;\n  }\n\n  /** Returns the number of child properties of this `DataSnapshot`. */\n  get size(): number {\n    return this._node.numChildren();\n  }\n\n  /**\n   * Gets another `DataSnapshot` for the location at the specified relative path.\n   *\n   * Passing a relative path to the `child()` method of a DataSnapshot returns\n   * another `DataSnapshot` for the location at the specified relative path. The\n   * relative path can either be a simple child name (for example, \"ada\") or a\n   * deeper, slash-separated path (for example, \"ada/name/first\"). If the child\n   * location has no data, an empty `DataSnapshot` (that is, a `DataSnapshot`\n   * whose value is `null`) is returned.\n   *\n   * @param path - A relative path to the location of child data.\n   */\n  child(path: string): DataSnapshot {\n    const childPath = new Path(path);\n    const childRef = child(this.ref, path);\n    return new DataSnapshot(\n      this._node.getChild(childPath),\n      childRef,\n      PRIORITY_INDEX\n    );\n  }\n  /**\n   * Returns true if this `DataSnapshot` contains any data. It is slightly more\n   * efficient than using `snapshot.val() !== null`.\n   */\n  exists(): boolean {\n    return !this._node.isEmpty();\n  }\n\n  /**\n   * Exports the entire contents of the DataSnapshot as a JavaScript object.\n   *\n   * The `exportVal()` method is similar to `val()`, except priority information\n   * is included (if available), making it suitable for backing up your data.\n   *\n   * @returns The DataSnapshot's contents as a JavaScript value (Object,\n   *   Array, string, number, boolean, or `null`).\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  exportVal(): any {\n    return this._node.val(true);\n  }\n\n  /**\n   * Enumerates the top-level children in the `DataSnapshot`.\n   *\n   * Because of the way JavaScript objects work, the ordering of data in the\n   * JavaScript object returned by `val()` is not guaranteed to match the\n   * ordering on the server nor the ordering of `onChildAdded()` events. That is\n   * where `forEach()` comes in handy. It guarantees the children of a\n   * `DataSnapshot` will be iterated in their query order.\n   *\n   * If no explicit `orderBy*()` method is used, results are returned\n   * ordered by key (unless priorities are used, in which case, results are\n   * returned by priority).\n   *\n   * @param action - A function that will be called for each child DataSnapshot.\n   * The callback can return true to cancel further enumeration.\n   * @returns true if enumeration was canceled due to your callback returning\n   * true.\n   */\n  forEach(action: (child: DataSnapshot) => boolean | void): boolean {\n    if (this._node.isLeafNode()) {\n      return false;\n    }\n\n    const childrenNode = this._node as ChildrenNode;\n    // Sanitize the return value to a boolean. ChildrenNode.forEachChild has a weird return type...\n    return !!childrenNode.forEachChild(this._index, (key, node) => {\n      return action(\n        new DataSnapshot(node, child(this.ref, key), PRIORITY_INDEX)\n      );\n    });\n  }\n\n  /**\n   * Returns true if the specified child path has (non-null) data.\n   *\n   * @param path - A relative path to the location of a potential child.\n   * @returns `true` if data exists at the specified child path; else\n   *  `false`.\n   */\n  hasChild(path: string): boolean {\n    const childPath = new Path(path);\n    return !this._node.getChild(childPath).isEmpty();\n  }\n\n  /**\n   * Returns whether or not the `DataSnapshot` has any non-`null` child\n   * properties.\n   *\n   * You can use `hasChildren()` to determine if a `DataSnapshot` has any\n   * children. If it does, you can enumerate them using `forEach()`. If it\n   * doesn't, then either this snapshot contains a primitive value (which can be\n   * retrieved with `val()`) or it is empty (in which case, `val()` will return\n   * `null`).\n   *\n   * @returns true if this snapshot has any children; else false.\n   */\n  hasChildren(): boolean {\n    if (this._node.isLeafNode()) {\n      return false;\n    } else {\n      return !this._node.isEmpty();\n    }\n  }\n\n  /**\n   * Returns a JSON-serializable representation of this object.\n   */\n  toJSON(): object | null {\n    return this.exportVal();\n  }\n\n  /**\n   * Extracts a JavaScript value from a `DataSnapshot`.\n   *\n   * Depending on the data in a `DataSnapshot`, the `val()` method may return a\n   * scalar type (string, number, or boolean), an array, or an object. It may\n   * also return null, indicating that the `DataSnapshot` is empty (contains no\n   * data).\n   *\n   * @returns The DataSnapshot's contents as a JavaScript value (Object,\n   *   Array, string, number, boolean, or `null`).\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  val(): any {\n    return this._node.val();\n  }\n}\n\n/**\n *\n * Returns a `Reference` representing the location in the Database\n * corresponding to the provided path. If no path is provided, the `Reference`\n * will point to the root of the Database.\n *\n * @param db - The database instance to obtain a reference for.\n * @param path - Optional path representing the location the returned\n *   `Reference` will point. If not provided, the returned `Reference` will\n *   point to the root of the Database.\n * @returns If a path is provided, a `Reference`\n *   pointing to the provided path. Otherwise, a `Reference` pointing to the\n *   root of the Database.\n */\nexport function ref(db: Database, path?: string): DatabaseReference {\n  db = getModularInstance(db);\n  db._checkNotDeleted('ref');\n  return path !== undefined ? child(db._root, path) : db._root;\n}\n\n/**\n * Returns a `Reference` representing the location in the Database\n * corresponding to the provided Firebase URL.\n *\n * An exception is thrown if the URL is not a valid Firebase Database URL or it\n * has a different domain than the current `Database` instance.\n *\n * Note that all query parameters (`orderBy`, `limitToLast`, etc.) are ignored\n * and are not applied to the returned `Reference`.\n *\n * @param db - The database instance to obtain a reference for.\n * @param url - The Firebase URL at which the returned `Reference` will\n *   point.\n * @returns A `Reference` pointing to the provided\n *   Firebase URL.\n */\nexport function refFromURL(db: Database, url: string): DatabaseReference {\n  db = getModularInstance(db);\n  db._checkNotDeleted('refFromURL');\n  const parsedURL = parseRepoInfo(url, db._repo.repoInfo_.nodeAdmin);\n  validateUrl('refFromURL', parsedURL);\n\n  const repoInfo = parsedURL.repoInfo;\n  if (\n    !db._repo.repoInfo_.isCustomHost() &&\n    repoInfo.host !== db._repo.repoInfo_.host\n  ) {\n    fatal(\n      'refFromURL' +\n        ': Host name does not match the current database: ' +\n        '(found ' +\n        repoInfo.host +\n        ' but expected ' +\n        db._repo.repoInfo_.host +\n        ')'\n    );\n  }\n\n  return ref(db, parsedURL.path.toString());\n}\n/**\n * Gets a `Reference` for the location at the specified relative path.\n *\n * The relative path can either be a simple child name (for example, \"ada\") or\n * a deeper slash-separated path (for example, \"ada/name/first\").\n *\n * @param parent - The parent location.\n * @param path - A relative path from this location to the desired child\n *   location.\n * @returns The specified child location.\n */\nexport function child(\n  parent: DatabaseReference,\n  path: string\n): DatabaseReference {\n  parent = getModularInstance(parent);\n  if (pathGetFront(parent._path) === null) {\n    validateRootPathString('child', 'path', path, false);\n  } else {\n    validatePathString('child', 'path', path, false);\n  }\n  return new ReferenceImpl(parent._repo, pathChild(parent._path, path));\n}\n\n/**\n * Returns an `OnDisconnect` object - see\n * {@link https://firebase.google.com/docs/database/web/offline-capabilities | Enabling Offline Capabilities in JavaScript}\n * for more information on how to use it.\n *\n * @param ref - The reference to add OnDisconnect triggers for.\n */\nexport function onDisconnect(ref: DatabaseReference): OnDisconnect {\n  ref = getModularInstance(ref) as ReferenceImpl;\n  return new OnDisconnect(ref._repo, ref._path);\n}\n\nexport interface ThenableReferenceImpl\n  extends ReferenceImpl,\n    Pick<Promise<ReferenceImpl>, 'then' | 'catch'> {}\n\n/**\n * Generates a new child location using a unique key and returns its\n * `Reference`.\n *\n * This is the most common pattern for adding data to a collection of items.\n *\n * If you provide a value to `push()`, the value is written to the\n * generated location. If you don't pass a value, nothing is written to the\n * database and the child remains empty (but you can use the `Reference`\n * elsewhere).\n *\n * The unique keys generated by `push()` are ordered by the current time, so the\n * resulting list of items is chronologically sorted. The keys are also\n * designed to be unguessable (they contain 72 random bits of entropy).\n *\n * See {@link https://firebase.google.com/docs/database/web/lists-of-data#append_to_a_list_of_data | Append to a list of data}.\n * See {@link https://firebase.googleblog.com/2015/02/the-2120-ways-to-ensure-unique_68.html | The 2^120 Ways to Ensure Unique Identifiers}.\n *\n * @param parent - The parent location.\n * @param value - Optional value to be written at the generated location.\n * @returns Combined `Promise` and `Reference`; resolves when write is complete,\n * but can be used immediately as the `Reference` to the child location.\n */\nexport function push(\n  parent: DatabaseReference,\n  value?: unknown\n): ThenableReference {\n  parent = getModularInstance(parent);\n  validateWritablePath('push', parent._path);\n  validateFirebaseDataArg('push', value, parent._path, true);\n  const now = repoServerTime(parent._repo);\n  const name = nextPushId(now);\n\n  // push() returns a ThennableReference whose promise is fulfilled with a\n  // regular Reference. We use child() to create handles to two different\n  // references. The first is turned into a ThennableReference below by adding\n  // then() and catch() methods and is used as the return value of push(). The\n  // second remains a regular Reference and is used as the fulfilled value of\n  // the first ThennableReference.\n  const thennablePushRef: Partial<ThenableReferenceImpl> = child(\n    parent,\n    name\n  ) as ReferenceImpl;\n  const pushRef = child(parent, name) as ReferenceImpl;\n\n  let promise: Promise<ReferenceImpl>;\n  if (value != null) {\n    promise = set(pushRef, value).then(() => pushRef);\n  } else {\n    promise = Promise.resolve(pushRef);\n  }\n\n  thennablePushRef.then = promise.then.bind(promise);\n  thennablePushRef.catch = promise.then.bind(promise, undefined);\n  return thennablePushRef as ThenableReferenceImpl;\n}\n\n/**\n * Removes the data at this Database location.\n *\n * Any data at child locations will also be deleted.\n *\n * The effect of the remove will be visible immediately and the corresponding\n * event 'value' will be triggered. Synchronization of the remove to the\n * Firebase servers will also be started, and the returned Promise will resolve\n * when complete. If provided, the onComplete callback will be called\n * asynchronously after synchronization has finished.\n *\n * @param ref - The location to remove.\n * @returns Resolves when remove on server is complete.\n */\nexport function remove(ref: DatabaseReference): Promise<void> {\n  validateWritablePath('remove', ref._path);\n  return set(ref, null);\n}\n\n/**\n * Writes data to this Database location.\n *\n * This will overwrite any data at this location and all child locations.\n *\n * The effect of the write will be visible immediately, and the corresponding\n * events (\"value\", \"child_added\", etc.) will be triggered. Synchronization of\n * the data to the Firebase servers will also be started, and the returned\n * Promise will resolve when complete. If provided, the `onComplete` callback\n * will be called asynchronously after synchronization has finished.\n *\n * Passing `null` for the new value is equivalent to calling `remove()`; namely,\n * all data at this location and all child locations will be deleted.\n *\n * `set()` will remove any priority stored at this location, so if priority is\n * meant to be preserved, you need to use `setWithPriority()` instead.\n *\n * Note that modifying data with `set()` will cancel any pending transactions\n * at that location, so extreme care should be taken if mixing `set()` and\n * `transaction()` to modify the same data.\n *\n * A single `set()` will generate a single \"value\" event at the location where\n * the `set()` was performed.\n *\n * @param ref - The location to write to.\n * @param value - The value to be written (string, number, boolean, object,\n *   array, or null).\n * @returns Resolves when write to server is complete.\n */\nexport function set(ref: DatabaseReference, value: unknown): Promise<void> {\n  ref = getModularInstance(ref);\n  validateWritablePath('set', ref._path);\n  validateFirebaseDataArg('set', value, ref._path, false);\n  const deferred = new Deferred<void>();\n  repoSetWithPriority(\n    ref._repo,\n    ref._path,\n    value,\n    /*priority=*/ null,\n    deferred.wrapCallback(() => {})\n  );\n  return deferred.promise;\n}\n\n/**\n * Sets a priority for the data at this Database location.\n *\n * Applications need not use priority but can order collections by\n * ordinary properties (see\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sorting_and_filtering_data | Sorting and filtering data}\n * ).\n *\n * @param ref - The location to write to.\n * @param priority - The priority to be written (string, number, or null).\n * @returns Resolves when write to server is complete.\n */\nexport function setPriority(\n  ref: DatabaseReference,\n  priority: string | number | null\n): Promise<void> {\n  ref = getModularInstance(ref);\n  validateWritablePath('setPriority', ref._path);\n  validatePriority('setPriority', priority, false);\n  const deferred = new Deferred<void>();\n  repoSetWithPriority(\n    ref._repo,\n    pathChild(ref._path, '.priority'),\n    priority,\n    null,\n    deferred.wrapCallback(() => {})\n  );\n  return deferred.promise;\n}\n\n/**\n * Writes data the Database location. Like `set()` but also specifies the\n * priority for that data.\n *\n * Applications need not use priority but can order collections by\n * ordinary properties (see\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sorting_and_filtering_data | Sorting and filtering data}\n * ).\n *\n * @param ref - The location to write to.\n * @param value - The value to be written (string, number, boolean, object,\n *   array, or null).\n * @param priority - The priority to be written (string, number, or null).\n * @returns Resolves when write to server is complete.\n */\nexport function setWithPriority(\n  ref: DatabaseReference,\n  value: unknown,\n  priority: string | number | null\n): Promise<void> {\n  validateWritablePath('setWithPriority', ref._path);\n  validateFirebaseDataArg('setWithPriority', value, ref._path, false);\n  validatePriority('setWithPriority', priority, false);\n  if (ref.key === '.length' || ref.key === '.keys') {\n    throw 'setWithPriority failed: ' + ref.key + ' is a read-only object.';\n  }\n\n  const deferred = new Deferred<void>();\n  repoSetWithPriority(\n    ref._repo,\n    ref._path,\n    value,\n    priority,\n    deferred.wrapCallback(() => {})\n  );\n  return deferred.promise;\n}\n\n/**\n * Writes multiple values to the Database at once.\n *\n * The `values` argument contains multiple property-value pairs that will be\n * written to the Database together. Each child property can either be a simple\n * property (for example, \"name\") or a relative path (for example,\n * \"name/first\") from the current location to the data to update.\n *\n * As opposed to the `set()` method, `update()` can be use to selectively update\n * only the referenced properties at the current location (instead of replacing\n * all the child properties at the current location).\n *\n * The effect of the write will be visible immediately, and the corresponding\n * events ('value', 'child_added', etc.) will be triggered. Synchronization of\n * the data to the Firebase servers will also be started, and the returned\n * Promise will resolve when complete. If provided, the `onComplete` callback\n * will be called asynchronously after synchronization has finished.\n *\n * A single `update()` will generate a single \"value\" event at the location\n * where the `update()` was performed, regardless of how many children were\n * modified.\n *\n * Note that modifying data with `update()` will cancel any pending\n * transactions at that location, so extreme care should be taken if mixing\n * `update()` and `transaction()` to modify the same data.\n *\n * Passing `null` to `update()` will remove the data at this location.\n *\n * See\n * {@link https://firebase.googleblog.com/2015/09/introducing-multi-location-updates-and_86.html | Introducing multi-location updates and more}.\n *\n * @param ref - The location to write to.\n * @param values - Object containing multiple values.\n * @returns Resolves when update on server is complete.\n */\nexport function update(ref: DatabaseReference, values: object): Promise<void> {\n  validateFirebaseMergeDataArg('update', values, ref._path, false);\n  const deferred = new Deferred<void>();\n  repoUpdate(\n    ref._repo,\n    ref._path,\n    values as Record<string, unknown>,\n    deferred.wrapCallback(() => {})\n  );\n  return deferred.promise;\n}\n\n/**\n * Gets the most up-to-date result for this query.\n *\n * @param query - The query to run.\n * @returns A `Promise` which resolves to the resulting DataSnapshot if a value is\n * available, or rejects if the client is unable to return a value (e.g., if the\n * server is unreachable and there is nothing cached).\n */\nexport function get(query: Query): Promise<DataSnapshot> {\n  query = getModularInstance(query) as QueryImpl;\n  const callbackContext = new CallbackContext(() => {});\n  const container = new ValueEventRegistration(callbackContext);\n  return repoGetValue(query._repo, query, container).then(node => {\n    return new DataSnapshot(\n      node,\n      new ReferenceImpl(query._repo, query._path),\n      query._queryParams.getIndex()\n    );\n  });\n}\n/**\n * Represents registration for 'value' events.\n */\nexport class ValueEventRegistration implements EventRegistration {\n  constructor(private callbackContext: CallbackContext) {}\n\n  respondsTo(eventType: string): boolean {\n    return eventType === 'value';\n  }\n\n  createEvent(change: Change, query: QueryContext): DataEvent {\n    const index = query._queryParams.getIndex();\n    return new DataEvent(\n      'value',\n      this,\n      new DataSnapshot(\n        change.snapshotNode,\n        new ReferenceImpl(query._repo, query._path),\n        index\n      )\n    );\n  }\n\n  getEventRunner(eventData: CancelEvent | DataEvent): () => void {\n    if (eventData.getEventType() === 'cancel') {\n      return () =>\n        this.callbackContext.onCancel((eventData as CancelEvent).error);\n    } else {\n      return () =>\n        this.callbackContext.onValue((eventData as DataEvent).snapshot, null);\n    }\n  }\n\n  createCancelEvent(error: Error, path: Path): CancelEvent | null {\n    if (this.callbackContext.hasCancelCallback) {\n      return new CancelEvent(this, error, path);\n    } else {\n      return null;\n    }\n  }\n\n  matches(other: EventRegistration): boolean {\n    if (!(other instanceof ValueEventRegistration)) {\n      return false;\n    } else if (!other.callbackContext || !this.callbackContext) {\n      // If no callback specified, we consider it to match any callback.\n      return true;\n    } else {\n      return other.callbackContext.matches(this.callbackContext);\n    }\n  }\n\n  hasAnyCallback(): boolean {\n    return this.callbackContext !== null;\n  }\n}\n\n/**\n * Represents the registration of a child_x event.\n */\nexport class ChildEventRegistration implements EventRegistration {\n  constructor(\n    private eventType: string,\n    private callbackContext: CallbackContext | null\n  ) {}\n\n  respondsTo(eventType: string): boolean {\n    let eventToCheck =\n      eventType === 'children_added' ? 'child_added' : eventType;\n    eventToCheck =\n      eventToCheck === 'children_removed' ? 'child_removed' : eventToCheck;\n    return this.eventType === eventToCheck;\n  }\n\n  createCancelEvent(error: Error, path: Path): CancelEvent | null {\n    if (this.callbackContext.hasCancelCallback) {\n      return new CancelEvent(this, error, path);\n    } else {\n      return null;\n    }\n  }\n\n  createEvent(change: Change, query: QueryContext): DataEvent {\n    assert(change.childName != null, 'Child events should have a childName.');\n    const childRef = child(\n      new ReferenceImpl(query._repo, query._path),\n      change.childName\n    );\n    const index = query._queryParams.getIndex();\n    return new DataEvent(\n      change.type as EventType,\n      this,\n      new DataSnapshot(change.snapshotNode, childRef, index),\n      change.prevName\n    );\n  }\n\n  getEventRunner(eventData: CancelEvent | DataEvent): () => void {\n    if (eventData.getEventType() === 'cancel') {\n      return () =>\n        this.callbackContext.onCancel((eventData as CancelEvent).error);\n    } else {\n      return () =>\n        this.callbackContext.onValue(\n          (eventData as DataEvent).snapshot,\n          (eventData as DataEvent).prevName\n        );\n    }\n  }\n\n  matches(other: EventRegistration): boolean {\n    if (other instanceof ChildEventRegistration) {\n      return (\n        this.eventType === other.eventType &&\n        (!this.callbackContext ||\n          !other.callbackContext ||\n          this.callbackContext.matches(other.callbackContext))\n      );\n    }\n\n    return false;\n  }\n\n  hasAnyCallback(): boolean {\n    return !!this.callbackContext;\n  }\n}\n\nfunction addEventListener(\n  query: Query,\n  eventType: EventType,\n  callback: UserCallback,\n  cancelCallbackOrListenOptions?: ((error: Error) => unknown) | ListenOptions,\n  options?: ListenOptions\n) {\n  let cancelCallback: ((error: Error) => unknown) | undefined;\n  if (typeof cancelCallbackOrListenOptions === 'object') {\n    cancelCallback = undefined;\n    options = cancelCallbackOrListenOptions;\n  }\n  if (typeof cancelCallbackOrListenOptions === 'function') {\n    cancelCallback = cancelCallbackOrListenOptions;\n  }\n\n  if (options && options.onlyOnce) {\n    const userCallback = callback;\n    const onceCallback: UserCallback = (dataSnapshot, previousChildName) => {\n      repoRemoveEventCallbackForQuery(query._repo, query, container);\n      userCallback(dataSnapshot, previousChildName);\n    };\n    onceCallback.userCallback = callback.userCallback;\n    onceCallback.context = callback.context;\n    callback = onceCallback;\n  }\n\n  const callbackContext = new CallbackContext(\n    callback,\n    cancelCallback || undefined\n  );\n  const container =\n    eventType === 'value'\n      ? new ValueEventRegistration(callbackContext)\n      : new ChildEventRegistration(eventType, callbackContext);\n  repoAddEventCallbackForQuery(query._repo, query, container);\n  return () => repoRemoveEventCallbackForQuery(query._repo, query, container);\n}\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onValue` event will trigger once with the initial data stored at this\n * location, and then trigger again each time the data changes. The\n * `DataSnapshot` passed to the callback will be for the location at which\n * `on()` was called. It won't trigger until the entire contents has been\n * synchronized. If the location has no data, it will be triggered with an empty\n * `DataSnapshot` (`val()` will return `null`).\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs. The\n * callback will be passed a DataSnapshot.\n * @param cancelCallback - An optional callback that will be notified if your\n * event subscription is ever canceled because your client does not have\n * permission to read this data (or it had permission but has now lost it).\n * This callback will be passed an `Error` object indicating why the failure\n * occurred.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onValue(\n  query: Query,\n  callback: (snapshot: DataSnapshot) => unknown,\n  cancelCallback?: (error: Error) => unknown\n): Unsubscribe;\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onValue` event will trigger once with the initial data stored at this\n * location, and then trigger again each time the data changes. The\n * `DataSnapshot` passed to the callback will be for the location at which\n * `on()` was called. It won't trigger until the entire contents has been\n * synchronized. If the location has no data, it will be triggered with an empty\n * `DataSnapshot` (`val()` will return `null`).\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs. The\n * callback will be passed a DataSnapshot.\n * @param options - An object that can be used to configure `onlyOnce`, which\n * then removes the listener after its first invocation.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onValue(\n  query: Query,\n  callback: (snapshot: DataSnapshot) => unknown,\n  options: ListenOptions\n): Unsubscribe;\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onValue` event will trigger once with the initial data stored at this\n * location, and then trigger again each time the data changes. The\n * `DataSnapshot` passed to the callback will be for the location at which\n * `on()` was called. It won't trigger until the entire contents has been\n * synchronized. If the location has no data, it will be triggered with an empty\n * `DataSnapshot` (`val()` will return `null`).\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs. The\n * callback will be passed a DataSnapshot.\n * @param cancelCallback - An optional callback that will be notified if your\n * event subscription is ever canceled because your client does not have\n * permission to read this data (or it had permission but has now lost it).\n * This callback will be passed an `Error` object indicating why the failure\n * occurred.\n * @param options - An object that can be used to configure `onlyOnce`, which\n * then removes the listener after its first invocation.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onValue(\n  query: Query,\n  callback: (snapshot: DataSnapshot) => unknown,\n  cancelCallback: (error: Error) => unknown,\n  options: ListenOptions\n): Unsubscribe;\n\nexport function onValue(\n  query: Query,\n  callback: (snapshot: DataSnapshot) => unknown,\n  cancelCallbackOrListenOptions?: ((error: Error) => unknown) | ListenOptions,\n  options?: ListenOptions\n): Unsubscribe {\n  return addEventListener(\n    query,\n    'value',\n    callback,\n    cancelCallbackOrListenOptions,\n    options\n  );\n}\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildAdded` event will be triggered once for each initial child at this\n * location, and it will be triggered again every time a new child is added. The\n * `DataSnapshot` passed into the callback will reflect the data for the\n * relevant child. For ordering purposes, it is passed a second argument which\n * is a string containing the key of the previous sibling child by sort order,\n * or `null` if it is the first child.\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param cancelCallback - An optional callback that will be notified if your\n * event subscription is ever canceled because your client does not have\n * permission to read this data (or it had permission but has now lost it).\n * This callback will be passed an `Error` object indicating why the failure\n * occurred.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildAdded(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName?: string | null\n  ) => unknown,\n  cancelCallback?: (error: Error) => unknown\n): Unsubscribe;\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildAdded` event will be triggered once for each initial child at this\n * location, and it will be triggered again every time a new child is added. The\n * `DataSnapshot` passed into the callback will reflect the data for the\n * relevant child. For ordering purposes, it is passed a second argument which\n * is a string containing the key of the previous sibling child by sort order,\n * or `null` if it is the first child.\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param options - An object that can be used to configure `onlyOnce`, which\n * then removes the listener after its first invocation.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildAdded(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName: string | null\n  ) => unknown,\n  options: ListenOptions\n): Unsubscribe;\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildAdded` event will be triggered once for each initial child at this\n * location, and it will be triggered again every time a new child is added. The\n * `DataSnapshot` passed into the callback will reflect the data for the\n * relevant child. For ordering purposes, it is passed a second argument which\n * is a string containing the key of the previous sibling child by sort order,\n * or `null` if it is the first child.\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param cancelCallback - An optional callback that will be notified if your\n * event subscription is ever canceled because your client does not have\n * permission to read this data (or it had permission but has now lost it).\n * This callback will be passed an `Error` object indicating why the failure\n * occurred.\n * @param options - An object that can be used to configure `onlyOnce`, which\n * then removes the listener after its first invocation.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildAdded(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName: string | null\n  ) => unknown,\n  cancelCallback: (error: Error) => unknown,\n  options: ListenOptions\n): Unsubscribe;\n\nexport function onChildAdded(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName: string | null\n  ) => unknown,\n  cancelCallbackOrListenOptions?: ((error: Error) => unknown) | ListenOptions,\n  options?: ListenOptions\n): Unsubscribe {\n  return addEventListener(\n    query,\n    'child_added',\n    callback,\n    cancelCallbackOrListenOptions,\n    options\n  );\n}\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildChanged` event will be triggered when the data stored in a child\n * (or any of its descendants) changes. Note that a single `child_changed` event\n * may represent multiple changes to the child. The `DataSnapshot` passed to the\n * callback will contain the new child contents. For ordering purposes, the\n * callback is also passed a second argument which is a string containing the\n * key of the previous sibling child by sort order, or `null` if it is the first\n * child.\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param cancelCallback - An optional callback that will be notified if your\n * event subscription is ever canceled because your client does not have\n * permission to read this data (or it had permission but has now lost it).\n * This callback will be passed an `Error` object indicating why the failure\n * occurred.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildChanged(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName: string | null\n  ) => unknown,\n  cancelCallback?: (error: Error) => unknown\n): Unsubscribe;\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildChanged` event will be triggered when the data stored in a child\n * (or any of its descendants) changes. Note that a single `child_changed` event\n * may represent multiple changes to the child. The `DataSnapshot` passed to the\n * callback will contain the new child contents. For ordering purposes, the\n * callback is also passed a second argument which is a string containing the\n * key of the previous sibling child by sort order, or `null` if it is the first\n * child.\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param options - An object that can be used to configure `onlyOnce`, which\n * then removes the listener after its first invocation.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildChanged(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName: string | null\n  ) => unknown,\n  options: ListenOptions\n): Unsubscribe;\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildChanged` event will be triggered when the data stored in a child\n * (or any of its descendants) changes. Note that a single `child_changed` event\n * may represent multiple changes to the child. The `DataSnapshot` passed to the\n * callback will contain the new child contents. For ordering purposes, the\n * callback is also passed a second argument which is a string containing the\n * key of the previous sibling child by sort order, or `null` if it is the first\n * child.\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param cancelCallback - An optional callback that will be notified if your\n * event subscription is ever canceled because your client does not have\n * permission to read this data (or it had permission but has now lost it).\n * This callback will be passed an `Error` object indicating why the failure\n * occurred.\n * @param options - An object that can be used to configure `onlyOnce`, which\n * then removes the listener after its first invocation.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildChanged(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName: string | null\n  ) => unknown,\n  cancelCallback: (error: Error) => unknown,\n  options: ListenOptions\n): Unsubscribe;\n\nexport function onChildChanged(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName: string | null\n  ) => unknown,\n  cancelCallbackOrListenOptions?: ((error: Error) => unknown) | ListenOptions,\n  options?: ListenOptions\n): Unsubscribe {\n  return addEventListener(\n    query,\n    'child_changed',\n    callback,\n    cancelCallbackOrListenOptions,\n    options\n  );\n}\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildMoved` event will be triggered when a child's sort order changes\n * such that its position relative to its siblings changes. The `DataSnapshot`\n * passed to the callback will be for the data of the child that has moved. It\n * is also passed a second argument which is a string containing the key of the\n * previous sibling child by sort order, or `null` if it is the first child.\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param cancelCallback - An optional callback that will be notified if your\n * event subscription is ever canceled because your client does not have\n * permission to read this data (or it had permission but has now lost it).\n * This callback will be passed an `Error` object indicating why the failure\n * occurred.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildMoved(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName: string | null\n  ) => unknown,\n  cancelCallback?: (error: Error) => unknown\n): Unsubscribe;\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildMoved` event will be triggered when a child's sort order changes\n * such that its position relative to its siblings changes. The `DataSnapshot`\n * passed to the callback will be for the data of the child that has moved. It\n * is also passed a second argument which is a string containing the key of the\n * previous sibling child by sort order, or `null` if it is the first child.\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param options - An object that can be used to configure `onlyOnce`, which\n * then removes the listener after its first invocation.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildMoved(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName: string | null\n  ) => unknown,\n  options: ListenOptions\n): Unsubscribe;\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildMoved` event will be triggered when a child's sort order changes\n * such that its position relative to its siblings changes. The `DataSnapshot`\n * passed to the callback will be for the data of the child that has moved. It\n * is also passed a second argument which is a string containing the key of the\n * previous sibling child by sort order, or `null` if it is the first child.\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param cancelCallback - An optional callback that will be notified if your\n * event subscription is ever canceled because your client does not have\n * permission to read this data (or it had permission but has now lost it).\n * This callback will be passed an `Error` object indicating why the failure\n * occurred.\n * @param options - An object that can be used to configure `onlyOnce`, which\n * then removes the listener after its first invocation.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildMoved(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName: string | null\n  ) => unknown,\n  cancelCallback: (error: Error) => unknown,\n  options: ListenOptions\n): Unsubscribe;\n\nexport function onChildMoved(\n  query: Query,\n  callback: (\n    snapshot: DataSnapshot,\n    previousChildName: string | null\n  ) => unknown,\n  cancelCallbackOrListenOptions?: ((error: Error) => unknown) | ListenOptions,\n  options?: ListenOptions\n): Unsubscribe {\n  return addEventListener(\n    query,\n    'child_moved',\n    callback,\n    cancelCallbackOrListenOptions,\n    options\n  );\n}\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildRemoved` event will be triggered once every time a child is\n * removed. The `DataSnapshot` passed into the callback will be the old data for\n * the child that was removed. A child will get removed when either:\n *\n * - a client explicitly calls `remove()` on that child or one of its ancestors\n * - a client calls `set(null)` on that child or one of its ancestors\n * - that child has all of its children removed\n * - there is a query in effect which now filters out the child (because it's\n *   sort order changed or the max limit was hit)\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param cancelCallback - An optional callback that will be notified if your\n * event subscription is ever canceled because your client does not have\n * permission to read this data (or it had permission but has now lost it).\n * This callback will be passed an `Error` object indicating why the failure\n * occurred.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildRemoved(\n  query: Query,\n  callback: (snapshot: DataSnapshot) => unknown,\n  cancelCallback?: (error: Error) => unknown\n): Unsubscribe;\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildRemoved` event will be triggered once every time a child is\n * removed. The `DataSnapshot` passed into the callback will be the old data for\n * the child that was removed. A child will get removed when either:\n *\n * - a client explicitly calls `remove()` on that child or one of its ancestors\n * - a client calls `set(null)` on that child or one of its ancestors\n * - that child has all of its children removed\n * - there is a query in effect which now filters out the child (because it's\n *   sort order changed or the max limit was hit)\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param options - An object that can be used to configure `onlyOnce`, which\n * then removes the listener after its first invocation.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildRemoved(\n  query: Query,\n  callback: (snapshot: DataSnapshot) => unknown,\n  options: ListenOptions\n): Unsubscribe;\n\n/**\n * Listens for data changes at a particular location.\n *\n * This is the primary way to read data from a Database. Your callback\n * will be triggered for the initial data and again whenever the data changes.\n * Invoke the returned unsubscribe callback to stop receiving updates. See\n * {@link https://firebase.google.com/docs/database/web/retrieve-data | Retrieve Data on the Web}\n * for more details.\n *\n * An `onChildRemoved` event will be triggered once every time a child is\n * removed. The `DataSnapshot` passed into the callback will be the old data for\n * the child that was removed. A child will get removed when either:\n *\n * - a client explicitly calls `remove()` on that child or one of its ancestors\n * - a client calls `set(null)` on that child or one of its ancestors\n * - that child has all of its children removed\n * - there is a query in effect which now filters out the child (because it's\n *   sort order changed or the max limit was hit)\n *\n * @param query - The query to run.\n * @param callback - A callback that fires when the specified event occurs.\n * The callback will be passed a DataSnapshot and a string containing the key of\n * the previous child, by sort order, or `null` if it is the first child.\n * @param cancelCallback - An optional callback that will be notified if your\n * event subscription is ever canceled because your client does not have\n * permission to read this data (or it had permission but has now lost it).\n * This callback will be passed an `Error` object indicating why the failure\n * occurred.\n * @param options - An object that can be used to configure `onlyOnce`, which\n * then removes the listener after its first invocation.\n * @returns A function that can be invoked to remove the listener.\n */\nexport function onChildRemoved(\n  query: Query,\n  callback: (snapshot: DataSnapshot) => unknown,\n  cancelCallback: (error: Error) => unknown,\n  options: ListenOptions\n): Unsubscribe;\n\nexport function onChildRemoved(\n  query: Query,\n  callback: (snapshot: DataSnapshot) => unknown,\n  cancelCallbackOrListenOptions?: ((error: Error) => unknown) | ListenOptions,\n  options?: ListenOptions\n): Unsubscribe {\n  return addEventListener(\n    query,\n    'child_removed',\n    callback,\n    cancelCallbackOrListenOptions,\n    options\n  );\n}\n\nexport { EventType };\n\n/**\n * Detaches a callback previously attached with the corresponding `on*()` (`onValue`, `onChildAdded`) listener.\n * Note: This is not the recommended way to remove a listener. Instead, please use the returned callback function from\n * the respective `on*` callbacks.\n *\n * Detach a callback previously attached with `on*()`. Calling `off()` on a parent listener\n * will not automatically remove listeners registered on child nodes, `off()`\n * must also be called on any child listeners to remove the callback.\n *\n * If a callback is not specified, all callbacks for the specified eventType\n * will be removed. Similarly, if no eventType is specified, all callbacks\n * for the `Reference` will be removed.\n *\n * Individual listeners can also be removed by invoking their unsubscribe\n * callbacks.\n *\n * @param query - The query that the listener was registered with.\n * @param eventType - One of the following strings: \"value\", \"child_added\",\n * \"child_changed\", \"child_removed\", or \"child_moved.\" If omitted, all callbacks\n * for the `Reference` will be removed.\n * @param callback - The callback function that was passed to `on()` or\n * `undefined` to remove all callbacks.\n */\nexport function off(\n  query: Query,\n  eventType?: EventType,\n  callback?: (\n    snapshot: DataSnapshot,\n    previousChildName?: string | null\n  ) => unknown\n): void {\n  let container: EventRegistration | null = null;\n  const expCallback = callback ? new CallbackContext(callback) : null;\n  if (eventType === 'value') {\n    container = new ValueEventRegistration(expCallback);\n  } else if (eventType) {\n    container = new ChildEventRegistration(eventType, expCallback);\n  }\n  repoRemoveEventCallbackForQuery(query._repo, query, container);\n}\n\n/** Describes the different query constraints available in this SDK. */\nexport type QueryConstraintType =\n  | 'endAt'\n  | 'endBefore'\n  | 'startAt'\n  | 'startAfter'\n  | 'limitToFirst'\n  | 'limitToLast'\n  | 'orderByChild'\n  | 'orderByKey'\n  | 'orderByPriority'\n  | 'orderByValue'\n  | 'equalTo';\n\n/**\n * A `QueryConstraint` is used to narrow the set of documents returned by a\n * Database query. `QueryConstraint`s are created by invoking {@link endAt},\n * {@link endBefore}, {@link startAt}, {@link startAfter}, {@link\n * limitToFirst}, {@link limitToLast}, {@link orderByChild},\n * {@link orderByChild}, {@link orderByKey} , {@link orderByPriority} ,\n * {@link orderByValue}  or {@link equalTo} and\n * can then be passed to {@link query} to create a new query instance that\n * also contains this `QueryConstraint`.\n */\nexport abstract class QueryConstraint {\n  /** The type of this query constraints */\n  abstract readonly type: QueryConstraintType;\n\n  /**\n   * Takes the provided `Query` and returns a copy of the `Query` with this\n   * `QueryConstraint` applied.\n   */\n  abstract _apply<T>(query: QueryImpl): QueryImpl;\n}\n\nclass QueryEndAtConstraint extends QueryConstraint {\n  readonly type: 'endAt';\n\n  constructor(\n    private readonly _value: number | string | boolean | null,\n    private readonly _key?: string\n  ) {\n    super();\n  }\n\n  _apply<T>(query: QueryImpl): QueryImpl {\n    validateFirebaseDataArg('endAt', this._value, query._path, true);\n    const newParams = queryParamsEndAt(\n      query._queryParams,\n      this._value,\n      this._key\n    );\n    validateLimit(newParams);\n    validateQueryEndpoints(newParams);\n    if (query._queryParams.hasEnd()) {\n      throw new Error(\n        'endAt: Starting point was already set (by another call to endAt, ' +\n          'endBefore or equalTo).'\n      );\n    }\n    return new QueryImpl(\n      query._repo,\n      query._path,\n      newParams,\n      query._orderByCalled\n    );\n  }\n}\n\n/**\n * Creates a `QueryConstraint` with the specified ending point.\n *\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\n * allows you to choose arbitrary starting and ending points for your queries.\n *\n * The ending point is inclusive, so children with exactly the specified value\n * will be included in the query. The optional key argument can be used to\n * further limit the range of the query. If it is specified, then children that\n * have exactly the specified value must also have a key name less than or equal\n * to the specified key.\n *\n * You can read more about `endAt()` in\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\n *\n * @param value - The value to end at. The argument type depends on which\n * `orderBy*()` function was used in this query. Specify a value that matches\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\n * value must be a string.\n * @param key - The child key to end at, among the children with the previously\n * specified priority. This argument is only allowed if ordering by child,\n * value, or priority.\n */\nexport function endAt(\n  value: number | string | boolean | null,\n  key?: string\n): QueryConstraint {\n  validateKey('endAt', 'key', key, true);\n  return new QueryEndAtConstraint(value, key);\n}\n\nclass QueryEndBeforeConstraint extends QueryConstraint {\n  readonly type: 'endBefore';\n\n  constructor(\n    private readonly _value: number | string | boolean | null,\n    private readonly _key?: string\n  ) {\n    super();\n  }\n\n  _apply<T>(query: QueryImpl): QueryImpl {\n    validateFirebaseDataArg('endBefore', this._value, query._path, false);\n    const newParams = queryParamsEndBefore(\n      query._queryParams,\n      this._value,\n      this._key\n    );\n    validateLimit(newParams);\n    validateQueryEndpoints(newParams);\n    if (query._queryParams.hasEnd()) {\n      throw new Error(\n        'endBefore: Starting point was already set (by another call to endAt, ' +\n          'endBefore or equalTo).'\n      );\n    }\n    return new QueryImpl(\n      query._repo,\n      query._path,\n      newParams,\n      query._orderByCalled\n    );\n  }\n}\n\n/**\n * Creates a `QueryConstraint` with the specified ending point (exclusive).\n *\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\n * allows you to choose arbitrary starting and ending points for your queries.\n *\n * The ending point is exclusive. If only a value is provided, children\n * with a value less than the specified value will be included in the query.\n * If a key is specified, then children must have a value less than or equal\n * to the specified value and a key name less than the specified key.\n *\n * @param value - The value to end before. The argument type depends on which\n * `orderBy*()` function was used in this query. Specify a value that matches\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\n * value must be a string.\n * @param key - The child key to end before, among the children with the\n * previously specified priority. This argument is only allowed if ordering by\n * child, value, or priority.\n */\nexport function endBefore(\n  value: number | string | boolean | null,\n  key?: string\n): QueryConstraint {\n  validateKey('endBefore', 'key', key, true);\n  return new QueryEndBeforeConstraint(value, key);\n}\n\nclass QueryStartAtConstraint extends QueryConstraint {\n  readonly type: 'startAt';\n\n  constructor(\n    private readonly _value: number | string | boolean | null,\n    private readonly _key?: string\n  ) {\n    super();\n  }\n\n  _apply<T>(query: QueryImpl): QueryImpl {\n    validateFirebaseDataArg('startAt', this._value, query._path, true);\n    const newParams = queryParamsStartAt(\n      query._queryParams,\n      this._value,\n      this._key\n    );\n    validateLimit(newParams);\n    validateQueryEndpoints(newParams);\n    if (query._queryParams.hasStart()) {\n      throw new Error(\n        'startAt: Starting point was already set (by another call to startAt, ' +\n          'startBefore or equalTo).'\n      );\n    }\n    return new QueryImpl(\n      query._repo,\n      query._path,\n      newParams,\n      query._orderByCalled\n    );\n  }\n}\n\n/**\n * Creates a `QueryConstraint` with the specified starting point.\n *\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\n * allows you to choose arbitrary starting and ending points for your queries.\n *\n * The starting point is inclusive, so children with exactly the specified value\n * will be included in the query. The optional key argument can be used to\n * further limit the range of the query. If it is specified, then children that\n * have exactly the specified value must also have a key name greater than or\n * equal to the specified key.\n *\n * You can read more about `startAt()` in\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\n *\n * @param value - The value to start at. The argument type depends on which\n * `orderBy*()` function was used in this query. Specify a value that matches\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\n * value must be a string.\n * @param key - The child key to start at. This argument is only allowed if\n * ordering by child, value, or priority.\n */\nexport function startAt(\n  value: number | string | boolean | null = null,\n  key?: string\n): QueryConstraint {\n  validateKey('startAt', 'key', key, true);\n  return new QueryStartAtConstraint(value, key);\n}\n\nclass QueryStartAfterConstraint extends QueryConstraint {\n  readonly type: 'startAfter';\n\n  constructor(\n    private readonly _value: number | string | boolean | null,\n    private readonly _key?: string\n  ) {\n    super();\n  }\n\n  _apply<T>(query: QueryImpl): QueryImpl {\n    validateFirebaseDataArg('startAfter', this._value, query._path, false);\n    const newParams = queryParamsStartAfter(\n      query._queryParams,\n      this._value,\n      this._key\n    );\n    validateLimit(newParams);\n    validateQueryEndpoints(newParams);\n    if (query._queryParams.hasStart()) {\n      throw new Error(\n        'startAfter: Starting point was already set (by another call to startAt, ' +\n          'startAfter, or equalTo).'\n      );\n    }\n    return new QueryImpl(\n      query._repo,\n      query._path,\n      newParams,\n      query._orderByCalled\n    );\n  }\n}\n\n/**\n * Creates a `QueryConstraint` with the specified starting point (exclusive).\n *\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\n * allows you to choose arbitrary starting and ending points for your queries.\n *\n * The starting point is exclusive. If only a value is provided, children\n * with a value greater than the specified value will be included in the query.\n * If a key is specified, then children must have a value greater than or equal\n * to the specified value and a a key name greater than the specified key.\n *\n * @param value - The value to start after. The argument type depends on which\n * `orderBy*()` function was used in this query. Specify a value that matches\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\n * value must be a string.\n * @param key - The child key to start after. This argument is only allowed if\n * ordering by child, value, or priority.\n */\nexport function startAfter(\n  value: number | string | boolean | null,\n  key?: string\n): QueryConstraint {\n  validateKey('startAfter', 'key', key, true);\n  return new QueryStartAfterConstraint(value, key);\n}\n\nclass QueryLimitToFirstConstraint extends QueryConstraint {\n  readonly type: 'limitToFirst';\n\n  constructor(private readonly _limit: number) {\n    super();\n  }\n\n  _apply<T>(query: QueryImpl): QueryImpl {\n    if (query._queryParams.hasLimit()) {\n      throw new Error(\n        'limitToFirst: Limit was already set (by another call to limitToFirst ' +\n          'or limitToLast).'\n      );\n    }\n    return new QueryImpl(\n      query._repo,\n      query._path,\n      queryParamsLimitToFirst(query._queryParams, this._limit),\n      query._orderByCalled\n    );\n  }\n}\n\n/**\n * Creates a new `QueryConstraint` that if limited to the first specific number\n * of children.\n *\n * The `limitToFirst()` method is used to set a maximum number of children to be\n * synced for a given callback. If we set a limit of 100, we will initially only\n * receive up to 100 `child_added` events. If we have fewer than 100 messages\n * stored in our Database, a `child_added` event will fire for each message.\n * However, if we have over 100 messages, we will only receive a `child_added`\n * event for the first 100 ordered messages. As items change, we will receive\n * `child_removed` events for each item that drops out of the active list so\n * that the total number stays at 100.\n *\n * You can read more about `limitToFirst()` in\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\n *\n * @param limit - The maximum number of nodes to include in this query.\n */\nexport function limitToFirst(limit: number): QueryConstraint {\n  if (typeof limit !== 'number' || Math.floor(limit) !== limit || limit <= 0) {\n    throw new Error('limitToFirst: First argument must be a positive integer.');\n  }\n  return new QueryLimitToFirstConstraint(limit);\n}\n\nclass QueryLimitToLastConstraint extends QueryConstraint {\n  readonly type: 'limitToLast';\n\n  constructor(private readonly _limit: number) {\n    super();\n  }\n\n  _apply<T>(query: QueryImpl): QueryImpl {\n    if (query._queryParams.hasLimit()) {\n      throw new Error(\n        'limitToLast: Limit was already set (by another call to limitToFirst ' +\n          'or limitToLast).'\n      );\n    }\n    return new QueryImpl(\n      query._repo,\n      query._path,\n      queryParamsLimitToLast(query._queryParams, this._limit),\n      query._orderByCalled\n    );\n  }\n}\n\n/**\n * Creates a new `QueryConstraint` that is limited to return only the last\n * specified number of children.\n *\n * The `limitToLast()` method is used to set a maximum number of children to be\n * synced for a given callback. If we set a limit of 100, we will initially only\n * receive up to 100 `child_added` events. If we have fewer than 100 messages\n * stored in our Database, a `child_added` event will fire for each message.\n * However, if we have over 100 messages, we will only receive a `child_added`\n * event for the last 100 ordered messages. As items change, we will receive\n * `child_removed` events for each item that drops out of the active list so\n * that the total number stays at 100.\n *\n * You can read more about `limitToLast()` in\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\n *\n * @param limit - The maximum number of nodes to include in this query.\n */\nexport function limitToLast(limit: number): QueryConstraint {\n  if (typeof limit !== 'number' || Math.floor(limit) !== limit || limit <= 0) {\n    throw new Error('limitToLast: First argument must be a positive integer.');\n  }\n\n  return new QueryLimitToLastConstraint(limit);\n}\n\nclass QueryOrderByChildConstraint extends QueryConstraint {\n  readonly type: 'orderByChild';\n\n  constructor(private readonly _path: string) {\n    super();\n  }\n\n  _apply<T>(query: QueryImpl): QueryImpl {\n    validateNoPreviousOrderByCall(query, 'orderByChild');\n    const parsedPath = new Path(this._path);\n    if (pathIsEmpty(parsedPath)) {\n      throw new Error(\n        'orderByChild: cannot pass in empty path. Use orderByValue() instead.'\n      );\n    }\n    const index = new PathIndex(parsedPath);\n    const newParams = queryParamsOrderBy(query._queryParams, index);\n    validateQueryEndpoints(newParams);\n\n    return new QueryImpl(\n      query._repo,\n      query._path,\n      newParams,\n      /*orderByCalled=*/ true\n    );\n  }\n}\n\n/**\n * Creates a new `QueryConstraint` that orders by the specified child key.\n *\n * Queries can only order by one key at a time. Calling `orderByChild()`\n * multiple times on the same query is an error.\n *\n * Firebase queries allow you to order your data by any child key on the fly.\n * However, if you know in advance what your indexes will be, you can define\n * them via the .indexOn rule in your Security Rules for better performance. See\n * the{@link https://firebase.google.com/docs/database/security/indexing-data}\n * rule for more information.\n *\n * You can read more about `orderByChild()` in\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sort_data | Sort data}.\n *\n * @param path - The path to order by.\n */\nexport function orderByChild(path: string): QueryConstraint {\n  if (path === '$key') {\n    throw new Error(\n      'orderByChild: \"$key\" is invalid.  Use orderByKey() instead.'\n    );\n  } else if (path === '$priority') {\n    throw new Error(\n      'orderByChild: \"$priority\" is invalid.  Use orderByPriority() instead.'\n    );\n  } else if (path === '$value') {\n    throw new Error(\n      'orderByChild: \"$value\" is invalid.  Use orderByValue() instead.'\n    );\n  }\n  validatePathString('orderByChild', 'path', path, false);\n  return new QueryOrderByChildConstraint(path);\n}\n\nclass QueryOrderByKeyConstraint extends QueryConstraint {\n  readonly type: 'orderByKey';\n\n  _apply<T>(query: QueryImpl): QueryImpl {\n    validateNoPreviousOrderByCall(query, 'orderByKey');\n    const newParams = queryParamsOrderBy(query._queryParams, KEY_INDEX);\n    validateQueryEndpoints(newParams);\n    return new QueryImpl(\n      query._repo,\n      query._path,\n      newParams,\n      /*orderByCalled=*/ true\n    );\n  }\n}\n\n/**\n * Creates a new `QueryConstraint` that orders by the key.\n *\n * Sorts the results of a query by their (ascending) key values.\n *\n * You can read more about `orderByKey()` in\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sort_data | Sort data}.\n */\nexport function orderByKey(): QueryConstraint {\n  return new QueryOrderByKeyConstraint();\n}\n\nclass QueryOrderByPriorityConstraint extends QueryConstraint {\n  readonly type: 'orderByPriority';\n\n  _apply<T>(query: QueryImpl): QueryImpl {\n    validateNoPreviousOrderByCall(query, 'orderByPriority');\n    const newParams = queryParamsOrderBy(query._queryParams, PRIORITY_INDEX);\n    validateQueryEndpoints(newParams);\n    return new QueryImpl(\n      query._repo,\n      query._path,\n      newParams,\n      /*orderByCalled=*/ true\n    );\n  }\n}\n\n/**\n * Creates a new `QueryConstraint` that orders by priority.\n *\n * Applications need not use priority but can order collections by\n * ordinary properties (see\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sort_data | Sort data}\n * for alternatives to priority.\n */\nexport function orderByPriority(): QueryConstraint {\n  return new QueryOrderByPriorityConstraint();\n}\n\nclass QueryOrderByValueConstraint extends QueryConstraint {\n  readonly type: 'orderByValue';\n\n  _apply<T>(query: QueryImpl): QueryImpl {\n    validateNoPreviousOrderByCall(query, 'orderByValue');\n    const newParams = queryParamsOrderBy(query._queryParams, VALUE_INDEX);\n    validateQueryEndpoints(newParams);\n    return new QueryImpl(\n      query._repo,\n      query._path,\n      newParams,\n      /*orderByCalled=*/ true\n    );\n  }\n}\n\n/**\n * Creates a new `QueryConstraint` that orders by value.\n *\n * If the children of a query are all scalar values (string, number, or\n * boolean), you can order the results by their (ascending) values.\n *\n * You can read more about `orderByValue()` in\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#sort_data | Sort data}.\n */\nexport function orderByValue(): QueryConstraint {\n  return new QueryOrderByValueConstraint();\n}\n\nclass QueryEqualToValueConstraint extends QueryConstraint {\n  readonly type: 'equalTo';\n\n  constructor(\n    private readonly _value: number | string | boolean | null,\n    private readonly _key?: string\n  ) {\n    super();\n  }\n\n  _apply<T>(query: QueryImpl): QueryImpl {\n    validateFirebaseDataArg('equalTo', this._value, query._path, false);\n    if (query._queryParams.hasStart()) {\n      throw new Error(\n        'equalTo: Starting point was already set (by another call to startAt/startAfter or ' +\n          'equalTo).'\n      );\n    }\n    if (query._queryParams.hasEnd()) {\n      throw new Error(\n        'equalTo: Ending point was already set (by another call to endAt/endBefore or ' +\n          'equalTo).'\n      );\n    }\n    return new QueryEndAtConstraint(this._value, this._key)._apply(\n      new QueryStartAtConstraint(this._value, this._key)._apply(query)\n    );\n  }\n}\n\n/**\n * Creates a `QueryConstraint` that includes children that match the specified\n * value.\n *\n * Using `startAt()`, `startAfter()`, `endBefore()`, `endAt()` and `equalTo()`\n * allows you to choose arbitrary starting and ending points for your queries.\n *\n * The optional key argument can be used to further limit the range of the\n * query. If it is specified, then children that have exactly the specified\n * value must also have exactly the specified key as their key name. This can be\n * used to filter result sets with many matches for the same value.\n *\n * You can read more about `equalTo()` in\n * {@link https://firebase.google.com/docs/database/web/lists-of-data#filtering_data | Filtering data}.\n *\n * @param value - The value to match for. The argument type depends on which\n * `orderBy*()` function was used in this query. Specify a value that matches\n * the `orderBy*()` type. When used in combination with `orderByKey()`, the\n * value must be a string.\n * @param key - The child key to start at, among the children with the\n * previously specified priority. This argument is only allowed if ordering by\n * child, value, or priority.\n */\nexport function equalTo(\n  value: number | string | boolean | null,\n  key?: string\n): QueryConstraint {\n  validateKey('equalTo', 'key', key, true);\n  return new QueryEqualToValueConstraint(value, key);\n}\n\n/**\n * Creates a new immutable instance of `Query` that is extended to also include\n * additional query constraints.\n *\n * @param query - The Query instance to use as a base for the new constraints.\n * @param queryConstraints - The list of `QueryConstraint`s to apply.\n * @throws if any of the provided query constraints cannot be combined with the\n * existing or new constraints.\n */\nexport function query(\n  query: Query,\n  ...queryConstraints: QueryConstraint[]\n): Query {\n  let queryImpl = getModularInstance(query) as QueryImpl;\n  for (const constraint of queryConstraints) {\n    queryImpl = constraint._apply(queryImpl);\n  }\n  return queryImpl;\n}\n\n/**\n * Define reference constructor in various modules\n *\n * We are doing this here to avoid several circular\n * dependency issues\n */\nsyncPointSetReferenceConstructor(ReferenceImpl);\nsyncTreeSetReferenceConstructor(ReferenceImpl);\n","/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Deferred } from '@firebase/util';\n\nimport {\n  Repo,\n  repoOnDisconnectCancel,\n  repoOnDisconnectSet,\n  repoOnDisconnectSetWithPriority,\n  repoOnDisconnectUpdate\n} from '../core/Repo';\nimport { Path } from '../core/util/Path';\nimport {\n  validateFirebaseDataArg,\n  validateFirebaseMergeDataArg,\n  validatePriority,\n  validateWritablePath\n} from '../core/util/validation';\n\n/**\n * The `onDisconnect` class allows you to write or clear data when your client\n * disconnects from the Database server. These updates occur whether your\n * client disconnects cleanly or not, so you can rely on them to clean up data\n * even if a connection is dropped or a client crashes.\n *\n * The `onDisconnect` class is most commonly used to manage presence in\n * applications where it is useful to detect how many clients are connected and\n * when other clients disconnect. See\n * {@link https://firebase.google.com/docs/database/web/offline-capabilities | Enabling Offline Capabilities in JavaScript}\n * for more information.\n *\n * To avoid problems when a connection is dropped before the requests can be\n * transferred to the Database server, these functions should be called before\n * writing any data.\n *\n * Note that `onDisconnect` operations are only triggered once. If you want an\n * operation to occur each time a disconnect occurs, you'll need to re-establish\n * the `onDisconnect` operations each time you reconnect.\n */\nexport class OnDisconnect {\n  /** @hideconstructor */\n  constructor(private _repo: Repo, private _path: Path) {}\n\n  /**\n   * Cancels all previously queued `onDisconnect()` set or update events for this\n   * location and all children.\n   *\n   * If a write has been queued for this location via a `set()` or `update()` at a\n   * parent location, the write at this location will be canceled, though writes\n   * to sibling locations will still occur.\n   *\n   * @returns Resolves when synchronization to the server is complete.\n   */\n  cancel(): Promise<void> {\n    const deferred = new Deferred<void>();\n    repoOnDisconnectCancel(\n      this._repo,\n      this._path,\n      deferred.wrapCallback(() => {})\n    );\n    return deferred.promise;\n  }\n\n  /**\n   * Ensures the data at this location is deleted when the client is disconnected\n   * (due to closing the browser, navigating to a new page, or network issues).\n   *\n   * @returns Resolves when synchronization to the server is complete.\n   */\n  remove(): Promise<void> {\n    validateWritablePath('OnDisconnect.remove', this._path);\n    const deferred = new Deferred<void>();\n    repoOnDisconnectSet(\n      this._repo,\n      this._path,\n      null,\n      deferred.wrapCallback(() => {})\n    );\n    return deferred.promise;\n  }\n\n  /**\n   * Ensures the data at this location is set to the specified value when the\n   * client is disconnected (due to closing the browser, navigating to a new page,\n   * or network issues).\n   *\n   * `set()` is especially useful for implementing \"presence\" systems, where a\n   * value should be changed or cleared when a user disconnects so that they\n   * appear \"offline\" to other users. See\n   * {@link https://firebase.google.com/docs/database/web/offline-capabilities | Enabling Offline Capabilities in JavaScript}\n   * for more information.\n   *\n   * Note that `onDisconnect` operations are only triggered once. If you want an\n   * operation to occur each time a disconnect occurs, you'll need to re-establish\n   * the `onDisconnect` operations each time.\n   *\n   * @param value - The value to be written to this location on disconnect (can\n   * be an object, array, string, number, boolean, or null).\n   * @returns Resolves when synchronization to the Database is complete.\n   */\n  set(value: unknown): Promise<void> {\n    validateWritablePath('OnDisconnect.set', this._path);\n    validateFirebaseDataArg('OnDisconnect.set', value, this._path, false);\n    const deferred = new Deferred<void>();\n    repoOnDisconnectSet(\n      this._repo,\n      this._path,\n      value,\n      deferred.wrapCallback(() => {})\n    );\n    return deferred.promise;\n  }\n\n  /**\n   * Ensures the data at this location is set to the specified value and priority\n   * when the client is disconnected (due to closing the browser, navigating to a\n   * new page, or network issues).\n   *\n   * @param value - The value to be written to this location on disconnect (can\n   * be an object, array, string, number, boolean, or null).\n   * @param priority - The priority to be written (string, number, or null).\n   * @returns Resolves when synchronization to the Database is complete.\n   */\n  setWithPriority(\n    value: unknown,\n    priority: number | string | null\n  ): Promise<void> {\n    validateWritablePath('OnDisconnect.setWithPriority', this._path);\n    validateFirebaseDataArg(\n      'OnDisconnect.setWithPriority',\n      value,\n      this._path,\n      false\n    );\n    validatePriority('OnDisconnect.setWithPriority', priority, false);\n\n    const deferred = new Deferred<void>();\n    repoOnDisconnectSetWithPriority(\n      this._repo,\n      this._path,\n      value,\n      priority,\n      deferred.wrapCallback(() => {})\n    );\n    return deferred.promise;\n  }\n\n  /**\n   * Writes multiple values at this location when the client is disconnected (due\n   * to closing the browser, navigating to a new page, or network issues).\n   *\n   * The `values` argument contains multiple property-value pairs that will be\n   * written to the Database together. Each child property can either be a simple\n   * property (for example, \"name\") or a relative path (for example, \"name/first\")\n   * from the current location to the data to update.\n   *\n   * As opposed to the `set()` method, `update()` can be use to selectively update\n   * only the referenced properties at the current location (instead of replacing\n   * all the child properties at the current location).\n   *\n   * @param values - Object containing multiple values.\n   * @returns Resolves when synchronization to the Database is complete.\n   */\n  update(values: object): Promise<void> {\n    validateWritablePath('OnDisconnect.update', this._path);\n    validateFirebaseMergeDataArg(\n      'OnDisconnect.update',\n      values,\n      this._path,\n      false\n    );\n    const deferred = new Deferred<void>();\n    repoOnDisconnectUpdate(\n      this._repo,\n      this._path,\n      values as Record<string, unknown>,\n      deferred.wrapCallback(() => {})\n    );\n    return deferred.promise;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert } from '@firebase/util';\n\nimport {\n  tryParseInt,\n  MAX_NAME,\n  MIN_NAME,\n  INTEGER_32_MIN,\n  INTEGER_32_MAX\n} from '../util/util';\n\n// Modeled after base64 web-safe chars, but ordered by ASCII.\nconst PUSH_CHARS =\n  '-0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz';\n\nconst MIN_PUSH_CHAR = '-';\n\nconst MAX_PUSH_CHAR = 'z';\n\nconst MAX_KEY_LEN = 786;\n\n/**\n * Fancy ID generator that creates 20-character string identifiers with the\n * following properties:\n *\n * 1. They're based on timestamp so that they sort *after* any existing ids.\n * 2. They contain 72-bits of random data after the timestamp so that IDs won't\n *    collide with other clients' IDs.\n * 3. They sort *lexicographically* (so the timestamp is converted to characters\n *    that will sort properly).\n * 4. They're monotonically increasing. Even if you generate more than one in\n *    the same timestamp, the latter ones will sort after the former ones. We do\n *    this by using the previous random bits but \"incrementing\" them by 1 (only\n *    in the case of a timestamp collision).\n */\nexport const nextPushId = (function () {\n  // Timestamp of last push, used to prevent local collisions if you push twice\n  // in one ms.\n  let lastPushTime = 0;\n\n  // We generate 72-bits of randomness which get turned into 12 characters and\n  // appended to the timestamp to prevent collisions with other clients. We\n  // store the last characters we generated because in the event of a collision,\n  // we'll use those same characters except \"incremented\" by one.\n  const lastRandChars: number[] = [];\n\n  return function (now: number) {\n    const duplicateTime = now === lastPushTime;\n    lastPushTime = now;\n\n    let i;\n    const timeStampChars = new Array(8);\n    for (i = 7; i >= 0; i--) {\n      timeStampChars[i] = PUSH_CHARS.charAt(now % 64);\n      // NOTE: Can't use << here because javascript will convert to int and lose\n      // the upper bits.\n      now = Math.floor(now / 64);\n    }\n    assert(now === 0, 'Cannot push at time == 0');\n\n    let id = timeStampChars.join('');\n\n    if (!duplicateTime) {\n      for (i = 0; i < 12; i++) {\n        lastRandChars[i] = Math.floor(Math.random() * 64);\n      }\n    } else {\n      // If the timestamp hasn't changed since last push, use the same random\n      // number, except incremented by 1.\n      for (i = 11; i >= 0 && lastRandChars[i] === 63; i--) {\n        lastRandChars[i] = 0;\n      }\n      lastRandChars[i]++;\n    }\n    for (i = 0; i < 12; i++) {\n      id += PUSH_CHARS.charAt(lastRandChars[i]);\n    }\n    assert(id.length === 20, 'nextPushId: Length should be 20.');\n\n    return id;\n  };\n})();\n\nexport const successor = function (key: string) {\n  if (key === '' + INTEGER_32_MAX) {\n    // See https://firebase.google.com/docs/database/web/lists-of-data#data-order\n    return MIN_PUSH_CHAR;\n  }\n  const keyAsInt: number = tryParseInt(key);\n  if (keyAsInt != null) {\n    return '' + (keyAsInt + 1);\n  }\n  const next = new Array(key.length);\n\n  for (let i = 0; i < next.length; i++) {\n    next[i] = key.charAt(i);\n  }\n\n  if (next.length < MAX_KEY_LEN) {\n    next.push(MIN_PUSH_CHAR);\n    return next.join('');\n  }\n\n  let i = next.length - 1;\n\n  while (i >= 0 && next[i] === MAX_PUSH_CHAR) {\n    i--;\n  }\n\n  // `successor` was called on the largest possible key, so return the\n  // MAX_NAME, which sorts larger than all keys.\n  if (i === -1) {\n    return MAX_NAME;\n  }\n\n  const source = next[i];\n  const sourcePlusOne = PUSH_CHARS.charAt(PUSH_CHARS.indexOf(source) + 1);\n  next[i] = sourcePlusOne;\n\n  return next.slice(0, i + 1).join('');\n};\n\n// `key` is assumed to be non-empty.\nexport const predecessor = function (key: string) {\n  if (key === '' + INTEGER_32_MIN) {\n    return MIN_NAME;\n  }\n  const keyAsInt: number = tryParseInt(key);\n  if (keyAsInt != null) {\n    return '' + (keyAsInt - 1);\n  }\n  const next = new Array(key.length);\n  for (let i = 0; i < next.length; i++) {\n    next[i] = key.charAt(i);\n  }\n  // If `key` ends in `MIN_PUSH_CHAR`, the largest key lexicographically\n  // smaller than `key`, is `key[0:key.length - 1]`. The next key smaller\n  // than that, `predecessor(predecessor(key))`, is\n  //\n  // `key[0:key.length - 2] + (key[key.length - 1] - 1) + \\\n  //   { MAX_PUSH_CHAR repeated MAX_KEY_LEN - (key.length - 1) times }\n  //\n  // analogous to increment/decrement for base-10 integers.\n  //\n  // This works because lexigographic comparison works character-by-character,\n  // using length as a tie-breaker if one key is a prefix of the other.\n  if (next[next.length - 1] === MIN_PUSH_CHAR) {\n    if (next.length === 1) {\n      // See https://firebase.google.com/docs/database/web/lists-of-data#orderbykey\n      return '' + INTEGER_32_MAX;\n    }\n    delete next[next.length - 1];\n    return next.join('');\n  }\n  // Replace the last character with it's immediate predecessor, and\n  // fill the suffix of the key with MAX_PUSH_CHAR. This is the\n  // lexicographically largest possible key smaller than `key`.\n  next[next.length - 1] = PUSH_CHARS.charAt(\n    PUSH_CHARS.indexOf(next[next.length - 1]) - 1\n  );\n  return next.join('') + MAX_PUSH_CHAR.repeat(MAX_KEY_LEN - next.length);\n};\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// eslint-disable-next-line import/no-extraneous-dependencies\nimport {\n  _FirebaseService,\n  _getProvider,\n  FirebaseApp,\n  getApp\n} from '@firebase/app';\nimport { AppCheckInternalComponentName } from '@firebase/app-check-interop-types';\nimport { FirebaseAuthInternalName } from '@firebase/auth-interop-types';\nimport { Provider } from '@firebase/component';\nimport {\n  getModularInstance,\n  createMockUserToken,\n  EmulatorMockTokenOptions,\n  getDefaultEmulatorHostnameAndPort\n} from '@firebase/util';\n\nimport { AppCheckTokenProvider } from '../core/AppCheckTokenProvider';\nimport {\n  AuthTokenProvider,\n  EmulatorTokenProvider,\n  FirebaseAuthTokenProvider\n} from '../core/AuthTokenProvider';\nimport { Repo, repoInterrupt, repoResume, repoStart } from '../core/Repo';\nimport { RepoInfo } from '../core/RepoInfo';\nimport { parseRepoInfo } from '../core/util/libs/parser';\nimport { newEmptyPath, pathIsEmpty } from '../core/util/Path';\nimport {\n  warn,\n  fatal,\n  log,\n  enableLogging as enableLoggingImpl\n} from '../core/util/util';\nimport { validateUrl } from '../core/util/validation';\nimport { BrowserPollConnection } from '../realtime/BrowserPollConnection';\nimport { TransportManager } from '../realtime/TransportManager';\nimport { WebSocketConnection } from '../realtime/WebSocketConnection';\n\nimport { ReferenceImpl } from './Reference_impl';\n\nexport { EmulatorMockTokenOptions } from '@firebase/util';\n/**\n * This variable is also defined in the firebase Node.js Admin SDK. Before\n * modifying this definition, consult the definition in:\n *\n * https://github.com/firebase/firebase-admin-node\n *\n * and make sure the two are consistent.\n */\nconst FIREBASE_DATABASE_EMULATOR_HOST_VAR = 'FIREBASE_DATABASE_EMULATOR_HOST';\n\n/**\n * Creates and caches `Repo` instances.\n */\nconst repos: {\n  [appName: string]: {\n    [dbUrl: string]: Repo;\n  };\n} = {};\n\n/**\n * If true, any new `Repo` will be created to use `ReadonlyRestClient` (for testing purposes).\n */\nlet useRestClient = false;\n\n/**\n * Update an existing `Repo` in place to point to a new host/port.\n */\nfunction repoManagerApplyEmulatorSettings(\n  repo: Repo,\n  host: string,\n  port: number,\n  tokenProvider?: AuthTokenProvider\n): void {\n  repo.repoInfo_ = new RepoInfo(\n    `${host}:${port}`,\n    /* secure= */ false,\n    repo.repoInfo_.namespace,\n    repo.repoInfo_.webSocketOnly,\n    repo.repoInfo_.nodeAdmin,\n    repo.repoInfo_.persistenceKey,\n    repo.repoInfo_.includeNamespaceInQueryParams\n  );\n\n  if (tokenProvider) {\n    repo.authTokenProvider_ = tokenProvider;\n  }\n}\n\n/**\n * This function should only ever be called to CREATE a new database instance.\n * @internal\n */\nexport function repoManagerDatabaseFromApp(\n  app: FirebaseApp,\n  authProvider: Provider<FirebaseAuthInternalName>,\n  appCheckProvider?: Provider<AppCheckInternalComponentName>,\n  url?: string,\n  nodeAdmin?: boolean\n): Database {\n  let dbUrl: string | undefined = url || app.options.databaseURL;\n  if (dbUrl === undefined) {\n    if (!app.options.projectId) {\n      fatal(\n        \"Can't determine Firebase Database URL. Be sure to include \" +\n          ' a Project ID when calling firebase.initializeApp().'\n      );\n    }\n\n    log('Using default host for project ', app.options.projectId);\n    dbUrl = `${app.options.projectId}-default-rtdb.firebaseio.com`;\n  }\n\n  let parsedUrl = parseRepoInfo(dbUrl, nodeAdmin);\n  let repoInfo = parsedUrl.repoInfo;\n\n  let isEmulator: boolean;\n\n  let dbEmulatorHost: string | undefined = undefined;\n  if (typeof process !== 'undefined' && process.env) {\n    dbEmulatorHost = process.env[FIREBASE_DATABASE_EMULATOR_HOST_VAR];\n  }\n\n  if (dbEmulatorHost) {\n    isEmulator = true;\n    dbUrl = `http://${dbEmulatorHost}?ns=${repoInfo.namespace}`;\n    parsedUrl = parseRepoInfo(dbUrl, nodeAdmin);\n    repoInfo = parsedUrl.repoInfo;\n  } else {\n    isEmulator = !parsedUrl.repoInfo.secure;\n  }\n\n  const authTokenProvider =\n    nodeAdmin && isEmulator\n      ? new EmulatorTokenProvider(EmulatorTokenProvider.OWNER)\n      : new FirebaseAuthTokenProvider(app.name, app.options, authProvider);\n\n  validateUrl('Invalid Firebase Database URL', parsedUrl);\n  if (!pathIsEmpty(parsedUrl.path)) {\n    fatal(\n      'Database URL must point to the root of a Firebase Database ' +\n        '(not including a child path).'\n    );\n  }\n\n  const repo = repoManagerCreateRepo(\n    repoInfo,\n    app,\n    authTokenProvider,\n    new AppCheckTokenProvider(app.name, appCheckProvider)\n  );\n  return new Database(repo, app);\n}\n\n/**\n * Remove the repo and make sure it is disconnected.\n *\n */\nfunction repoManagerDeleteRepo(repo: Repo, appName: string): void {\n  const appRepos = repos[appName];\n  // This should never happen...\n  if (!appRepos || appRepos[repo.key] !== repo) {\n    fatal(`Database ${appName}(${repo.repoInfo_}) has already been deleted.`);\n  }\n  repoInterrupt(repo);\n  delete appRepos[repo.key];\n}\n\n/**\n * Ensures a repo doesn't already exist and then creates one using the\n * provided app.\n *\n * @param repoInfo - The metadata about the Repo\n * @returns The Repo object for the specified server / repoName.\n */\nfunction repoManagerCreateRepo(\n  repoInfo: RepoInfo,\n  app: FirebaseApp,\n  authTokenProvider: AuthTokenProvider,\n  appCheckProvider: AppCheckTokenProvider\n): Repo {\n  let appRepos = repos[app.name];\n\n  if (!appRepos) {\n    appRepos = {};\n    repos[app.name] = appRepos;\n  }\n\n  let repo = appRepos[repoInfo.toURLString()];\n  if (repo) {\n    fatal(\n      'Database initialized multiple times. Please make sure the format of the database URL matches with each database() call.'\n    );\n  }\n  repo = new Repo(repoInfo, useRestClient, authTokenProvider, appCheckProvider);\n  appRepos[repoInfo.toURLString()] = repo;\n\n  return repo;\n}\n\n/**\n * Forces us to use ReadonlyRestClient instead of PersistentConnection for new Repos.\n */\nexport function repoManagerForceRestClient(forceRestClient: boolean): void {\n  useRestClient = forceRestClient;\n}\n\n/**\n * Class representing a Firebase Realtime Database.\n */\nexport class Database implements _FirebaseService {\n  /** Represents a `Database` instance. */\n  readonly 'type' = 'database';\n\n  /** Track if the instance has been used (root or repo accessed) */\n  _instanceStarted: boolean = false;\n\n  /** Backing state for root_ */\n  private _rootInternal?: ReferenceImpl;\n\n  /** @hideconstructor */\n  constructor(\n    public _repoInternal: Repo,\n    /** The {@link @firebase/app#FirebaseApp} associated with this Realtime Database instance. */\n    readonly app: FirebaseApp\n  ) {}\n\n  get _repo(): Repo {\n    if (!this._instanceStarted) {\n      repoStart(\n        this._repoInternal,\n        this.app.options.appId,\n        this.app.options['databaseAuthVariableOverride']\n      );\n      this._instanceStarted = true;\n    }\n    return this._repoInternal;\n  }\n\n  get _root(): ReferenceImpl {\n    if (!this._rootInternal) {\n      this._rootInternal = new ReferenceImpl(this._repo, newEmptyPath());\n    }\n    return this._rootInternal;\n  }\n\n  _delete(): Promise<void> {\n    if (this._rootInternal !== null) {\n      repoManagerDeleteRepo(this._repo, this.app.name);\n      this._repoInternal = null;\n      this._rootInternal = null;\n    }\n    return Promise.resolve();\n  }\n\n  _checkNotDeleted(apiName: string) {\n    if (this._rootInternal === null) {\n      fatal('Cannot call ' + apiName + ' on a deleted database.');\n    }\n  }\n}\n\nfunction checkTransportInit() {\n  if (TransportManager.IS_TRANSPORT_INITIALIZED) {\n    warn(\n      'Transport has already been initialized. Please call this function before calling ref or setting up a listener'\n    );\n  }\n}\n\n/**\n * Force the use of websockets instead of longPolling.\n */\nexport function forceWebSockets() {\n  checkTransportInit();\n  BrowserPollConnection.forceDisallow();\n}\n\n/**\n * Force the use of longPolling instead of websockets. This will be ignored if websocket protocol is used in databaseURL.\n */\nexport function forceLongPolling() {\n  checkTransportInit();\n  WebSocketConnection.forceDisallow();\n  BrowserPollConnection.forceAllow();\n}\n\n/**\n * Returns the instance of the Realtime Database SDK that is associated\n * with the provided {@link @firebase/app#FirebaseApp}. Initializes a new instance with\n * with default settings if no instance exists or if the existing instance uses\n * a custom database URL.\n *\n * @param app - The {@link @firebase/app#FirebaseApp} instance that the returned Realtime\n * Database instance is associated with.\n * @param url - The URL of the Realtime Database instance to connect to. If not\n * provided, the SDK connects to the default instance of the Firebase App.\n * @returns The `Database` instance of the provided app.\n */\nexport function getDatabase(\n  app: FirebaseApp = getApp(),\n  url?: string\n): Database {\n  const db = _getProvider(app, 'database').getImmediate({\n    identifier: url\n  }) as Database;\n  const emulator = getDefaultEmulatorHostnameAndPort('database');\n  if (emulator) {\n    connectDatabaseEmulator(db, ...emulator);\n  }\n  return db;\n}\n\n/**\n * Modify the provided instance to communicate with the Realtime Database\n * emulator.\n *\n * <p>Note: This method must be called before performing any other operation.\n *\n * @param db - The instance to modify.\n * @param host - The emulator host (ex: localhost)\n * @param port - The emulator port (ex: 8080)\n * @param options.mockUserToken - the mock auth token to use for unit testing Security Rules\n */\nexport function connectDatabaseEmulator(\n  db: Database,\n  host: string,\n  port: number,\n  options: {\n    mockUserToken?: EmulatorMockTokenOptions | string;\n  } = {}\n): void {\n  db = getModularInstance(db);\n  db._checkNotDeleted('useEmulator');\n  if (db._instanceStarted) {\n    fatal(\n      'Cannot call useEmulator() after instance has already been initialized.'\n    );\n  }\n\n  const repo = db._repoInternal;\n  let tokenProvider: EmulatorTokenProvider | undefined = undefined;\n  if (repo.repoInfo_.nodeAdmin) {\n    if (options.mockUserToken) {\n      fatal(\n        'mockUserToken is not supported by the Admin SDK. For client access with mock users, please use the \"firebase\" package instead of \"firebase-admin\".'\n      );\n    }\n    tokenProvider = new EmulatorTokenProvider(EmulatorTokenProvider.OWNER);\n  } else if (options.mockUserToken) {\n    const token =\n      typeof options.mockUserToken === 'string'\n        ? options.mockUserToken\n        : createMockUserToken(options.mockUserToken, db.app.options.projectId);\n    tokenProvider = new EmulatorTokenProvider(token);\n  }\n\n  // Modify the repo to apply emulator settings\n  repoManagerApplyEmulatorSettings(repo, host, port, tokenProvider);\n}\n\n/**\n * Disconnects from the server (all Database operations will be completed\n * offline).\n *\n * The client automatically maintains a persistent connection to the Database\n * server, which will remain active indefinitely and reconnect when\n * disconnected. However, the `goOffline()` and `goOnline()` methods may be used\n * to control the client connection in cases where a persistent connection is\n * undesirable.\n *\n * While offline, the client will no longer receive data updates from the\n * Database. However, all Database operations performed locally will continue to\n * immediately fire events, allowing your application to continue behaving\n * normally. Additionally, each operation performed locally will automatically\n * be queued and retried upon reconnection to the Database server.\n *\n * To reconnect to the Database and begin receiving remote events, see\n * `goOnline()`.\n *\n * @param db - The instance to disconnect.\n */\nexport function goOffline(db: Database): void {\n  db = getModularInstance(db);\n  db._checkNotDeleted('goOffline');\n  repoInterrupt(db._repo);\n}\n\n/**\n * Reconnects to the server and synchronizes the offline Database state\n * with the server state.\n *\n * This method should be used after disabling the active connection with\n * `goOffline()`. Once reconnected, the client will transmit the proper data\n * and fire the appropriate events so that your client \"catches up\"\n * automatically.\n *\n * @param db - The instance to reconnect.\n */\nexport function goOnline(db: Database): void {\n  db = getModularInstance(db);\n  db._checkNotDeleted('goOnline');\n  repoResume(db._repo);\n}\n\n/**\n * Logs debugging information to the console.\n *\n * @param enabled - Enables logging if `true`, disables logging if `false`.\n * @param persistent - Remembers the logging state between page refreshes if\n * `true`.\n */\nexport function enableLogging(enabled: boolean, persistent?: boolean);\n\n/**\n * Logs debugging information to the console.\n *\n * @param logger - A custom logger function to control how things get logged.\n */\nexport function enableLogging(logger: (message: string) => unknown);\n\nexport function enableLogging(\n  logger: boolean | ((message: string) => unknown),\n  persistent?: boolean\n): void {\n  enableLoggingImpl(logger, persistent);\n}\n","/**\n * @license\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// eslint-disable-next-line import/no-extraneous-dependencies\nimport {\n  _registerComponent,\n  registerVersion,\n  SDK_VERSION\n} from '@firebase/app';\nimport { Component, ComponentType } from '@firebase/component';\n\nimport { name, version } from '../package.json';\nimport { setSDKVersion } from '../src/core/version';\n\nimport { repoManagerDatabaseFromApp } from './api/Database';\n\nexport function registerDatabase(variant?: string): void {\n  setSDKVersion(SDK_VERSION);\n  _registerComponent(\n    new Component(\n      'database',\n      (container, { instanceIdentifier: url }) => {\n        const app = container.getProvider('app').getImmediate()!;\n        const authProvider = container.getProvider('auth-internal');\n        const appCheckProvider = container.getProvider('app-check-internal');\n        return repoManagerDatabaseFromApp(\n          app,\n          authProvider,\n          appCheckProvider,\n          url\n        );\n      },\n      ComponentType.PUBLIC\n    ).setMultipleInstances(true)\n  );\n  registerVersion(name, version, variant);\n  // BUILD_TARGET will be replaced by values like esm5, esm2017, cjs5, etc during the compilation\n  registerVersion(name, version, '__BUILD_TARGET__');\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nconst SERVER_TIMESTAMP = {\n  '.sv': 'timestamp'\n};\n\n/**\n * Returns a placeholder value for auto-populating the current timestamp (time\n * since the Unix epoch, in milliseconds) as determined by the Firebase\n * servers.\n */\nexport function serverTimestamp(): object {\n  return SERVER_TIMESTAMP;\n}\n\n/**\n * Returns a placeholder value that can be used to atomically increment the\n * current database value by the provided delta.\n *\n * @param delta - the amount to modify the current value atomically.\n * @returns A placeholder value for modifying data atomically server-side.\n */\nexport function increment(delta: number): object {\n  return {\n    '.sv': {\n      'increment': delta\n    }\n  };\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { getModularInstance, Deferred } from '@firebase/util';\n\nimport { repoStartTransaction } from '../core/Repo';\nimport { PRIORITY_INDEX } from '../core/snap/indexes/PriorityIndex';\nimport { Node } from '../core/snap/Node';\nimport { validateWritablePath } from '../core/util/validation';\n\nimport { DatabaseReference } from './Reference';\nimport { DataSnapshot, onValue, ReferenceImpl } from './Reference_impl';\n\n/** An options object to configure transactions. */\nexport interface TransactionOptions {\n  /**\n   * By default, events are raised each time the transaction update function\n   * runs. So if it is run multiple times, you may see intermediate states. You\n   * can set this to false to suppress these intermediate states and instead\n   * wait until the transaction has completed before events are raised.\n   */\n  readonly applyLocally?: boolean;\n}\n\n/**\n * A type for the resolve value of {@link runTransaction}.\n */\nexport class TransactionResult {\n  /** @hideconstructor */\n  constructor(\n    /** Whether the transaction was successfully committed. */\n    readonly committed: boolean,\n    /** The resulting data snapshot. */\n    readonly snapshot: DataSnapshot\n  ) {}\n\n  /** Returns a JSON-serializable representation of this object. */\n  toJSON(): object {\n    return { committed: this.committed, snapshot: this.snapshot.toJSON() };\n  }\n}\n\n/**\n * Atomically modifies the data at this location.\n *\n * Atomically modify the data at this location. Unlike a normal `set()`, which\n * just overwrites the data regardless of its previous value, `runTransaction()` is\n * used to modify the existing value to a new value, ensuring there are no\n * conflicts with other clients writing to the same location at the same time.\n *\n * To accomplish this, you pass `runTransaction()` an update function which is\n * used to transform the current value into a new value. If another client\n * writes to the location before your new value is successfully written, your\n * update function will be called again with the new current value, and the\n * write will be retried. This will happen repeatedly until your write succeeds\n * without conflict or you abort the transaction by not returning a value from\n * your update function.\n *\n * Note: Modifying data with `set()` will cancel any pending transactions at\n * that location, so extreme care should be taken if mixing `set()` and\n * `runTransaction()` to update the same data.\n *\n * Note: When using transactions with Security and Firebase Rules in place, be\n * aware that a client needs `.read` access in addition to `.write` access in\n * order to perform a transaction. This is because the client-side nature of\n * transactions requires the client to read the data in order to transactionally\n * update it.\n *\n * @param ref - The location to atomically modify.\n * @param transactionUpdate - A developer-supplied function which will be passed\n * the current data stored at this location (as a JavaScript object). The\n * function should return the new value it would like written (as a JavaScript\n * object). If `undefined` is returned (i.e. you return with no arguments) the\n * transaction will be aborted and the data at this location will not be\n * modified.\n * @param options - An options object to configure transactions.\n * @returns A `Promise` that can optionally be used instead of the `onComplete`\n * callback to handle success and failure.\n */\nexport function runTransaction(\n  ref: DatabaseReference,\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  transactionUpdate: (currentData: any) => unknown,\n  options?: TransactionOptions\n): Promise<TransactionResult> {\n  ref = getModularInstance(ref);\n\n  validateWritablePath('Reference.transaction', ref._path);\n\n  if (ref.key === '.length' || ref.key === '.keys') {\n    throw (\n      'Reference.transaction failed: ' + ref.key + ' is a read-only object.'\n    );\n  }\n\n  const applyLocally = options?.applyLocally ?? true;\n  const deferred = new Deferred<TransactionResult>();\n\n  const promiseComplete = (\n    error: Error | null,\n    committed: boolean,\n    node: Node | null\n  ) => {\n    let dataSnapshot: DataSnapshot | null = null;\n    if (error) {\n      deferred.reject(error);\n    } else {\n      dataSnapshot = new DataSnapshot(\n        node,\n        new ReferenceImpl(ref._repo, ref._path),\n        PRIORITY_INDEX\n      );\n      deferred.resolve(new TransactionResult(committed, dataSnapshot));\n    }\n  };\n\n  // Add a watch to make sure we get server updates.\n  const unwatcher = onValue(ref, () => {});\n\n  repoStartTransaction(\n    ref._repo,\n    ref._path,\n    transactionUpdate,\n    promiseComplete,\n    unwatcher,\n    applyLocally\n  );\n\n  return deferred.promise;\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { PersistentConnection } from '../core/PersistentConnection';\nimport { RepoInfo } from '../core/RepoInfo';\nimport { Connection } from '../realtime/Connection';\n\nimport { repoManagerForceRestClient } from './Database';\n\nexport const DataConnection = PersistentConnection;\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n(PersistentConnection.prototype as any).simpleListen = function (\n  pathString: string,\n  onComplete: (a: unknown) => void\n) {\n  this.sendRequest('q', { p: pathString }, onComplete);\n};\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n(PersistentConnection.prototype as any).echo = function (\n  data: unknown,\n  onEcho: (a: unknown) => void\n) {\n  this.sendRequest('echo', { d: data }, onEcho);\n};\n\n// RealTimeConnection properties that we use in tests.\nexport const RealTimeConnection = Connection;\n\n/**\n * @internal\n */\nexport const hijackHash = function (newHash: () => string) {\n  const oldPut = PersistentConnection.prototype.put;\n  PersistentConnection.prototype.put = function (\n    pathString,\n    data,\n    onComplete,\n    hash\n  ) {\n    if (hash !== undefined) {\n      hash = newHash();\n    }\n    oldPut.call(this, pathString, data, onComplete, hash);\n  };\n  return function () {\n    PersistentConnection.prototype.put = oldPut;\n  };\n};\n\nexport const ConnectionTarget = RepoInfo;\n\n/**\n * Forces the RepoManager to create Repos that use ReadonlyRestClient instead of PersistentConnection.\n * @internal\n */\nexport const forceRestClient = function (forceRestClient: boolean) {\n  repoManagerForceRestClient(forceRestClient);\n};\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport const PROTOCOL_VERSION = '5';\n\nexport const VERSION_PARAM = 'v';\n\nexport const TRANSPORT_SESSION_PARAM = 's';\n\nexport const REFERER_PARAM = 'r';\n\nexport const FORGE_REF = 'f';\n\n// Matches console.firebase.google.com, firebase-console-*.corp.google.com and\n// firebase.corp.google.com\nexport const FORGE_DOMAIN_RE =\n  /(console\\.firebase|firebase-console-\\w+\\.corp|firebase\\.corp)\\.google\\.com/;\n\nexport const LAST_SESSION_PARAM = 'ls';\n\nexport const APPLICATION_ID_PARAM = 'p';\n\nexport const APP_CHECK_TOKEN_PARAM = 'ac';\n\nexport const WEBSOCKET = 'websocket';\n\nexport const LONG_POLLING = 'long_polling';\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Path } from '../util/Path';\n\nimport { Index } from './indexes/Index';\n\n/**\n * Node is an interface defining the common functionality for nodes in\n * a DataSnapshot.\n *\n * @interface\n */\nexport interface Node {\n  /**\n   * Whether this node is a leaf node.\n   * @returns Whether this is a leaf node.\n   */\n  isLeafNode(): boolean;\n\n  /**\n   * Gets the priority of the node.\n   * @returns The priority of the node.\n   */\n  getPriority(): Node;\n\n  /**\n   * Returns a duplicate node with the new priority.\n   * @param newPriorityNode - New priority to set for the node.\n   * @returns Node with new priority.\n   */\n  updatePriority(newPriorityNode: Node): Node;\n\n  /**\n   * Returns the specified immediate child, or null if it doesn't exist.\n   * @param childName - The name of the child to retrieve.\n   * @returns The retrieved child, or an empty node.\n   */\n  getImmediateChild(childName: string): Node;\n\n  /**\n   * Returns a child by path, or null if it doesn't exist.\n   * @param path - The path of the child to retrieve.\n   * @returns The retrieved child or an empty node.\n   */\n  getChild(path: Path): Node;\n\n  /**\n   * Returns the name of the child immediately prior to the specified childNode, or null.\n   * @param childName - The name of the child to find the predecessor of.\n   * @param childNode - The node to find the predecessor of.\n   * @param index - The index to use to determine the predecessor\n   * @returns The name of the predecessor child, or null if childNode is the first child.\n   */\n  getPredecessorChildName(\n    childName: string,\n    childNode: Node,\n    index: Index\n  ): string | null;\n\n  /**\n   * Returns a duplicate node, with the specified immediate child updated.\n   * Any value in the node will be removed.\n   * @param childName - The name of the child to update.\n   * @param newChildNode - The new child node\n   * @returns The updated node.\n   */\n  updateImmediateChild(childName: string, newChildNode: Node): Node;\n\n  /**\n   * Returns a duplicate node, with the specified child updated.  Any value will\n   * be removed.\n   * @param path - The path of the child to update.\n   * @param newChildNode - The new child node, which may be an empty node\n   * @returns The updated node.\n   */\n  updateChild(path: Path, newChildNode: Node): Node;\n\n  /**\n   * True if the immediate child specified exists\n   */\n  hasChild(childName: string): boolean;\n\n  /**\n   * @returns True if this node has no value or children.\n   */\n  isEmpty(): boolean;\n\n  /**\n   * @returns The number of children of this node.\n   */\n  numChildren(): number;\n\n  /**\n   * Calls action for each child.\n   * @param action - Action to be called for\n   * each child.  It's passed the child name and the child node.\n   * @returns The first truthy value return by action, or the last falsey one\n   */\n  forEachChild(index: Index, action: (a: string, b: Node) => void): unknown;\n\n  /**\n   * @param exportFormat - True for export format (also wire protocol format).\n   * @returns Value of this node as JSON.\n   */\n  val(exportFormat?: boolean): unknown;\n\n  /**\n   * @returns hash representing the node contents.\n   */\n  hash(): string;\n\n  /**\n   * @param other - Another node\n   * @returns -1 for less than, 0 for equal, 1 for greater than other\n   */\n  compareTo(other: Node): number;\n\n  /**\n   * @returns Whether or not this snapshot equals other\n   */\n  equals(other: Node): boolean;\n\n  /**\n   * @returns This node, with the specified index now available\n   */\n  withIndex(indexDefinition: Index): Node;\n\n  isIndexed(indexDefinition: Index): boolean;\n}\n\nexport class NamedNode {\n  constructor(public name: string, public node: Node) {}\n\n  static Wrap(name: string, node: Node) {\n    return new NamedNode(name, node);\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { deepCopy, contains } from '@firebase/util';\n\n/**\n * Tracks a collection of stats.\n */\nexport class StatsCollection {\n  private counters_: { [k: string]: number } = {};\n\n  incrementCounter(name: string, amount: number = 1) {\n    if (!contains(this.counters_, name)) {\n      this.counters_[name] = 0;\n    }\n\n    this.counters_[name] += amount;\n  }\n\n  get() {\n    return deepCopy(this.counters_);\n  }\n}\n","import FilmotekaApi from '../api-service/filmoteka-api';\nimport { modalInfoCreat } from './modal-creat-element';\nimport { Notify } from 'notiflix';\n\nconst infoFilmApi = new FilmotekaApi();\nlet ID_FILMS = '';\n\nconst backdrop = document.querySelector('.backdrop');\nconst modalWrap = document.querySelector('.modal__wrap');\nconst modalJsCard = document.querySelector('.card__list');\n\nlet slideTrack = '';\ndocument.querySelector('.slide-track')\n  ? (slideTrack = document.querySelector('.slide-track'))\n  : (slideTrack = modalWrap);\n\nslideTrack.addEventListener('click', openModal);\nmodalJsCard.addEventListener('click', openModal);\n\nconst e = document.getElementsByClassName('slide-track');\n\nconst langTrailer = {\n  ua: 'uk-UA',\n  en: 'en-US',\n};\n\nasync function modalFunction(id) {\n  await infoFilmApi\n    .fetchInfoFilm(id)\n    .then(creatRender)\n    .catch(error =>\n      Notify.failure('An error occurred. Try again!', {\n        position: 'center-center',\n      })\n    );\n}\n\nasync function openModal(e) {\n  if (e.target.nodeName !== 'IMG') {\n    return;\n  }\n  modalWrap.innerHTML = '';\n  backdrop.classList.add('is-open');\n  document.body.classList.add('no-scroll');\n\n  ID_FILMS = e.target.dataset.id;\n  modalFunction(ID_FILMS);\n}\n\nasync function creatRender(e) {\n  const trailerKey = await creatTrailerFilm(ID_FILMS);\n  const res = modalInfoCreat(e, ID_FILMS, trailerKey);\n  modalWrap.insertAdjacentHTML('beforeend', res);\n}\n\nasync function creatTrailerFilm(id) {\n  const enTrailerUa = infoFilmApi.fetchTrailreFilm(id, langTrailer.ua);\n  const enTrailerEn = infoFilmApi.fetchTrailreFilm(id, langTrailer.en);\n  const dataTrailerLang = await Promise.all([\n    enTrailerUa.catch(e =>\n      Notify.failure('Error loading trailer. Please try again', {\n        position: 'center-center',\n      })\n    ),\n    enTrailerEn.catch(e =>\n      Notify.failure('Error loading trailer. Please try again', {\n        position: 'center-center',\n      })\n    ),\n  ]);\n  const spaceArray = dataTrailerLang.map(e => e.results).join('').length;\n\n  if (!spaceArray) return;\n\n  const dataLang = [];\n  dataTrailerLang.forEach(({ results }) => {\n    if (results.length) dataLang.push(results);\n  });\n\n  const dataUa = dataLang.find(e => e[0].iso_639_1 === 'uk');\n  return dataUa ? dataUa[0].key : dataLang[0][0].key;\n}\n","export function modalInfoCreat(results, id, keyPlayer = false) {\n  let URL_POSTEER = 'https://image.tmdb.org/t/p/';\n  const imgResize = {\n    tabMob: 'w342',\n    desk: 'w500',\n  };\n\n  const {\n    title,\n    vote_average,\n    vote_count,\n    popularity,\n    original_title,\n    genres,\n    overview,\n    poster_path,\n  } = results;\n\n  const location = window.location.host;\n  const player = !keyPlayer\n    ? ''\n    : `  <iframe\n  class=\"modal__iframe\"\nwidth=\"100%\"\nheight=\"175px\"\nsrc=\"https://www.youtube.com/embed/${keyPlayer}?origin=${location}\"\ntitle=\"GO-IT  #4\"\nframeborder=\"0\"\nallowfullscreen\n></iframe> `;\n\n  return `<picture>\n  <source srcset=\"${\n    URL_POSTEER + imgResize.desk + poster_path\n  }\" media=\"(min-width: 1280px)\" />\n  <source srcset=\"${\n    URL_POSTEER + imgResize.tabMob + poster_path\n  }\" media=\"(min-width: 768px)\" />\n  <source srcset=\"${\n    URL_POSTEER + imgResize.tabMob + poster_path\n  }\" media=\"(max-width: 767px)\" />\n  <img class=\"modal__picture\" \n   onerror=\"this.onerror=null;this.src='https://ik.imagekit.io/tc8jxffbcvf/default-movie-portrait_EmJUj9Tda5wa.jpg?tr=fo-auto,di-';\"\n    src=\"${\n      URL_POSTEER + imgResize.desk + poster_path\n    }\" alt=\"${title}\" loading=\"lazy\"/>\n  </picture>\n  <div class=\"modal__info\">\n  <h2 class=\"modal__title\">${title}</h2>\n  <table class=\"modal__statistic\">\n  <tbody>\n      <tr>\n          <td class=\"modal__type\">Vote / Votes</td>\n          <td class=\"modal__value\"><span class=\"modal__value--accent\">${vote_average.toFixed(\n            1\n          )}</span> / \n              <span class=\"modal__value--highlight\">${Math.round(\n                vote_count\n              )}</span></td>\n      </tr>\n      <tr>\n          <td class=\"modal__type\">Popularity</td>\n          <td class=\"modal__value\">${Math.round(popularity)}</td>\n      </tr>\n      <tr>\n          <td class=\"modal__type\">Original Title</td>\n          <td class=\"modal__value modal__value--uppercase\">${original_title}</td>\n      </tr>\n      <tr>\n          <td class=\"modal__type\">Genre</td>\n          <td class=\"modal__value\">${genres.map(e => ` ${e.name}`)}</td>\n      </tr>\n  </tbody>\n  </table>\n  <p class=\"modal__about\">About</p>\n  <p class=\"modal__description\">${overview}</p>\n  \n  <div id=\"player\" class=\"modal__player\">\n${player}\n  </div>\n  \n  <ul class=\"modal__buttons\">\n            <li><button type=\"button\" class=\"modal__button js-btn-watched\" data-id=\"${id}\">Add to watched</button></li>\n            <li><button type=\"button\" class=\"modal__button js-btn-queue\" data-id=\"${id}\">Add to queue</button></li>\n          </ul>\n  `;\n}\n","const openModalBtn = document.querySelector('[data-modal-open]');\nconst backdropFooter = document.querySelector('.backdrop__footer');\nconst closeModalBtn = document.querySelector('[data-modal-close-footer]');\nconst modal = document.querySelector('[data-modal-footer]');\nwindow.addEventListener('keydown', closeFooterModalEsc);\nconst bodyFooter = document.querySelector('body');\n\nopenModalBtn.addEventListener('click', onFooterModal);\ncloseModalBtn.addEventListener('click', closeFooterModal);\n\n function onFooterModal(e) {\n  backdropFooter.classList.remove('is-hidden');\n  bodyFooter.style.overflow = 'hidden';\n}\n\nfunction closeFooterModal(e) {\n  backdropFooter.classList.add('is-hidden');\n  bodyFooter.style.overflow = 'visible';\n}\n\nfunction closeFooterModalEsc(e) {\n  if (e.code === 'Escape') {\n    closeFooterModal();\n  }\n}\n","const bodyRef = document.querySelector('body');\nconst toggleRef = document.querySelector('#theme-switch-toggle');\nconst footerDarktheme = document.querySelector('.footer');\nconst LOCALSTORAGE_THEME_KEY = 'theme';\n\nexport { setThemeFromLocalStorage };\n\nfunction setThemeFromLocalStorage() {\n  if (localStorage.getItem(LOCALSTORAGE_THEME_KEY)) {\n    bodyRef.classList.add('dark-theme');\n    toggleRef.checked = true;\n  } else {\n    toggleRef.checked = false;\n  }\n}\n\ntoggleRef.addEventListener('change', event => {\n  if (!bodyRef.classList.contains('dark-theme')) {\n    bodyRef.classList.add('dark-theme');\n    localStorage.setItem(LOCALSTORAGE_THEME_KEY, 'dark-theme');\n  } else {\n    bodyRef.classList.remove('dark-theme');\n    localStorage.removeItem(LOCALSTORAGE_THEME_KEY);\n  }\n});\n\nsetThemeFromLocalStorage();\n"],"names":["$380398118d2742cb$var$API_KEY","$380398118d2742cb$var$BASE_URL","$380398118d2742cb$export$2e2bcd8739ae039","globalFetch","url","fetch","then","response","json","date","this","incrementPage","results","fetchGenres","data","genres","fetchInTrendFilmWithGenres","fetchTrendFilm","genresList","map","movie","release_date","split","genre_ids","id","filter","el","flat","fetchSearchFilmWithGenres","fetchSearchFilm","page","searchQuery","fetchSearchTotalFilm","fetchInfoFilm","movie_id","fetchTrailreFilm","lang","decrementPage","resetPage","query","newQuery","pageNum","newPage","constructor","$78b18610706cb935$var$handlebars","parcelRequire","default","PrintVisitor","$iss1K","print","module","exports","$2b9d1486578e295b$var$_create","$2b9d1486578e295b$var$_handlebarsRuntime2","create","$2b9d1486578e295b$var$create","hb","compile","input","options","$g3b5c","precompile","AST","$2b9d1486578e295b$var$_handlebarsCompilerAst2","Compiler","JavaScriptCompiler","$2b9d1486578e295b$var$_handlebarsCompilerJavascriptCompiler2","Parser","$bZTyu","parser","parse","parseWithoutProcessing","$2b9d1486578e295b$var$inst","$2b9d1486578e295b$var$_handlebarsNoConflict2","Visitor","$2b9d1486578e295b$var$_handlebarsCompilerVisitor2","$68265d4fe4aafbd2$var$base","$68265d4fe4aafbd2$var$_interopRequireWildcard","$68265d4fe4aafbd2$var$Utils","$68265d4fe4aafbd2$var$runtime","$68265d4fe4aafbd2$var$create","HandlebarsEnvironment","extend","SafeString","$68265d4fe4aafbd2$var$_handlebarsSafeString2","Exception","$68265d4fe4aafbd2$var$_handlebarsException2","Utils","escapeExpression","VM","template","spec","$68265d4fe4aafbd2$var$inst","$68265d4fe4aafbd2$var$_handlebarsNoConflict2","$6fd5c235c879d47d$export$52b3fe9f41f5650c","$6fd5c235c879d47d$export$af88d00dbe7f521","$6fd5c235c879d47d$var$objectType","$6fd5c235c879d47d$var$HandlebarsEnvironment","helpers","partials","decorators","$2ATA1","registerDefaultHelpers","$boziC","registerDefaultDecorators","prototype","logger","$6fd5c235c879d47d$var$_logger2","log","registerHelper","name","fn","$9rsBU","toString","call","$6fd5c235c879d47d$var$_exception2","unregisterHelper","registerPartial","partial","unregisterPartial","registerDecorator","unregisterDecorator","resetLoggedPropertyAccesses","$5J1pr","resetLoggedProperties","$6fd5c235c879d47d$var$log","createFrame","$6dfcd4184265dc45$export$f6e2535fb5126e54","array","value","i","len","length","string","toHTML","$6dfcd4184265dc45$var$possible","test","replace","$6dfcd4184265dc45$var$badChars","$6dfcd4184265dc45$var$escapeChar","$6dfcd4184265dc45$var$isArray","object","frame","$6dfcd4184265dc45$var$extend","_parent","params","ids","path","contextPath","$6dfcd4184265dc45$var$escape","chr","obj","arguments","key","Object","hasOwnProperty","$6dfcd4184265dc45$var$toString","$6dfcd4184265dc45$var$isFunction","Array","isArray","$f6d87e2b3bc79407$var$errorProps","$f6d87e2b3bc79407$var$Exception","message","node","loc","line","undefined","endLineNumber","column","endColumn","start","end","tmp","Error","idx","captureStackTrace","lineNumber","defineProperty","enumerable","nop","instance","$1e3a0e9b859c0984$var$_helpersBlockHelperMissing2","$1e3a0e9b859c0984$var$_helpersEach2","$1e3a0e9b859c0984$var$_helpersHelperMissing2","$1e3a0e9b859c0984$var$_helpersIf2","$1e3a0e9b859c0984$var$_helpersLog2","$1e3a0e9b859c0984$var$_helpersLookup2","$1e3a0e9b859c0984$var$_helpersWith2","helperName","keepHelper","hooks","context","inverse","each","appendContextPath","$d9ee9539ed2d4c85$var$_exception2","priorKey","ret","execIteration","field","index","last","first","blockParams","isFunction","j","$parcel$global","Symbol","iterator","newContext","it","next","done","push","keys","forEach","$cf06054d8f5e3a77$var$_exception2","conditional","$ca4fc185ba638cf7$var$_exception2","hash","includeZero","isEmpty","args","level","apply","lookupProperty","$0058e56600b24c43$var$_exception2","$84bd515462f01c84$var$_decoratorsInline2","props","container","original","$65b7cc69ddcf0758$var$logger","methodMap","lookupLevel","levelMap","indexOf","toLowerCase","parseInt","console","method","_len","_key","runtimeOptions","defaultMethodWhiteList","defaultPropertyWhiteList","properties","whitelist","$13oGa","createNewLookupObject","allowedProtoProperties","defaultValue","allowProtoPropertiesByDefault","methods","allowedProtoMethods","allowProtoMethodsByDefault","result","protoAccessControl","propertyName","$42b23f94c0751b89$var$checkWhiteList","$42b23f94c0751b89$var$loggedProperties","$42b23f94c0751b89$var$logger","$42b23f94c0751b89$var$_interopRequireWildcard","protoAccessControlForType","$42b23f94c0751b89$var$logUnexpecedPropertyAccessOnce","sources","concat","$f1db34ae30910d17$var$SafeString","compilerInfo","compilerRevision","currentRevision","$9Biib","COMPILER_REVISION","LAST_COMPATIBLE_COMPILER_REVISION","runtimeVersions","REVISION_CHANGES","compilerVersions","$01e88af6ae1a68f2$var$_exception2","templateSpec","env","main","decorator","main_d","checkRevision","compiler","templateWasPrecompiledWithCompilerV7","strict","parent","resultIsAllowed","lookup","depths","lambda","current","$01e88af6ae1a68f2$var$Utils","invokePartial","resolvePartial","extendedOptions","compilerOptions","indent","lines","l","join","programs","program","declaredBlockParams","programWrapper","$01e88af6ae1a68f2$var$wrapProgram","depth","mergeIfNeeded","param","common","nullContext","seal","noop","_setup","useData","$01e88af6ae1a68f2$var$initData","useBlockParams","useDepths","$01e88af6ae1a68f2$var$executeDecorators","isTop","mergedHelpers","helper","$3MEsI","wrapHelper","$01e88af6ae1a68f2$var$passLookupPropertyOption","$01e88af6ae1a68f2$var$wrapHelpersToPassLookupProperty","usePartial","useDecorators","createProtoAccessControl","keepHelperInHelpers","allowCallsToHelperMissing","moveHelperToHooks","_child","currentPartialBlock","partialBlock","$01e88af6ae1a68f2$var$noop","Function","$01e88af6ae1a68f2$var$_interopRequireWildcard","prog","currentDepths","root","transformOptionsFn","Handlebars","window","$Handlebars","noConflict","$4c0cfe046184d6b5$var$AST","helperExpression","type","scopedId","simpleId","parts","$8bc07c592aefdc7c$export$8f49e4af10703ce3","ast","$8bc07c592aefdc7c$var$parseWithoutProcessing","$8bc07c592aefdc7c$var$_whitespaceControl2","accept","$8bc07c592aefdc7c$var$Helpers","$8bc07c592aefdc7c$var$_interopRequireWildcard","$8bc07c592aefdc7c$var$_parser2","$8bc07c592aefdc7c$var$yy","yy","locInfo","SourceLocation","srcName","$755615af2e3bc56c$var$handlebars","trace","symbols_","error","EOF","program_repetition0","statement","mustache","block","rawBlock","content","COMMENT","CONTENT","openRawBlock","rawBlock_repetition0","END_RAW_BLOCK","OPEN_RAW_BLOCK","openRawBlock_repetition0","openRawBlock_option0","CLOSE_RAW_BLOCK","openBlock","block_option0","closeBlock","openInverse","block_option1","OPEN_BLOCK","openBlock_repetition0","openBlock_option0","openBlock_option1","CLOSE","OPEN_INVERSE","openInverse_repetition0","openInverse_option0","openInverse_option1","openInverseChain","OPEN_INVERSE_CHAIN","openInverseChain_repetition0","openInverseChain_option0","openInverseChain_option1","inverseAndProgram","INVERSE","inverseChain","inverseChain_option0","OPEN_ENDBLOCK","OPEN","mustache_repetition0","mustache_option0","OPEN_UNESCAPED","mustache_repetition1","mustache_option1","CLOSE_UNESCAPED","OPEN_PARTIAL","partialName","partial_repetition0","partial_option0","openPartialBlock","OPEN_PARTIAL_BLOCK","openPartialBlock_repetition0","openPartialBlock_option0","sexpr","OPEN_SEXPR","sexpr_repetition0","sexpr_option0","CLOSE_SEXPR","hash_repetition_plus0","hashSegment","ID","EQUALS","OPEN_BLOCK_PARAMS","blockParams_repetition_plus0","CLOSE_BLOCK_PARAMS","dataName","STRING","NUMBER","BOOLEAN","UNDEFINED","NULL","DATA","pathSegments","SEP","$accept","$end","terminals_","productions_","performAction","yytext","yyleng","yylineno","yystate","$$","_$","$0","$","prepareProgram","stripComment","strip","stripFlags","prepareRawBlock","prepareBlock","open","chained","chain","prepareMustache","preparePartialBlock","pairs","Number","preparePath","part","separator","table","defaultActions","parseError","str","self","stack","vstack","lstack","recovering","lexer","setInput","yylloc","yyloc","ranges","symbol","preErrorSymbol","state","action","r","p","newState","expected","token","yyval","lex","errStr","showPosition","text","match","first_line","last_line","first_column","last_column","range","slice","_input","_more","_less","matched","conditionStack","offset","ch","unput","substr","oldLines","more","less","n","pastInput","past","upcomingInput","pre","c","tempMatch","rules","_currentRules","flex","matches","begin","condition","popState","pop","conditions","topState","pushState","yy_","$avoiding_name_collisions","YY_START","substring","mu","inclusive","emu","com","raw","INITIAL","$035832b1e5cae68a$var$WhitespaceControl","$035832b1e5cae68a$var$isPrevWhitespace","body","isRoot","prev","sibling","$035832b1e5cae68a$var$isNextWhitespace","$035832b1e5cae68a$var$omitRight","multiple","rightStripped","$035832b1e5cae68a$var$omitLeft","leftStripped","$035832b1e5cae68a$var$_visitor2","Program","doStandalone","ignoreStandalone","isRootSeen","_isPrevWhitespace","_isNextWhitespace","openStandalone","closeStandalone","inlineStandalone","close","exec","BlockStatement","DecoratorBlock","PartialBlockStatement","firstInverse","lastInverse","openStrip","closeStrip","inverseStrip","Decorator","MustacheStatement","PartialStatement","CommentStatement","$be363f2af0aa9422$var$Visitor","parents","$be363f2af0aa9422$var$visitSubExpression","acceptRequired","acceptArray","acceptKey","$be363f2af0aa9422$var$visitBlock","$be363f2af0aa9422$var$visitPartial","mutating","$be363f2af0aa9422$var$_exception2","splice","unshift","shift","ContentStatement","SubExpression","PathExpression","StringLiteral","NumberLiteral","BooleanLiteral","UndefinedLiteral","NullLiteral","Hash","HashPair","pair","source","charAt","comment","dig","isLiteral","$e8b7f063dfc6a59f$var$_exception2","escapeFlag","escaped","contents","$e8b7f063dfc6a59f$var$validateClose","inverted","statements","firstLoc","lastLoc","errorNode","$baf585f8b4c7235e$var$_exception2","compat","environment","compiled","compileInput","execOptions","setupOptions","$baf585f8b4c7235e$var$slice","$baf585f8b4c7235e$var$Compiler","$baf585f8b4c7235e$var$argEquals","a","b","$baf585f8b4c7235e$var$transformLiteralToPath","literal","equals","other","opcodes","opcode","otherOpcode","children","guid","sourceNode","stringParams","trackIds","knownHelpers","helperMissing","blockHelperMissing","if","unless","with","compileProgram","bodyLength","isSimple","classifySexpr","helperSexpr","simpleSexpr","ambiguousSexpr","setupFullMustacheParams","explicitPartialContext","isDynamic","preventIndent","noEscape","isBlock","knownHelpersOnly","falsy","$baf585f8b4c7235e$var$_ast2","addDepth","scoped","blockParamId","blockParamIndex","number","bool","pushParam","isBlockParam","isHelper","isEligible","_name","pushParams","val","blockParamChild","omitEmpty","$b1f0070f58a24a18$var$Literal","$b1f0070f58a24a18$var$JavaScriptCompiler","nameLookup","internalNameLookup","depthedLookup","aliasable","JSON","stringify","revision","appendToBuffer","location","explicit","wrap","initializeBuffer","quotedString","lookupPropertyFunctionIsUsed","asObject","isChild","environments","preamble","stackSlot","stackVars","aliases","registers","list","hashes","compileStack","inlineStack","compileChildren","currentLocation","pushSource","$b1f0070f58a24a18$var$_exception2","prepend","lookupPropertyFunctionVarDeclaration","merge","createFunctionContext","_context","objectLiteral","toStringWithSourceMap","file","destName","lastContext","$b1f0070f58a24a18$var$_codeGen2","varDeclarations","locals","aliasCount","alias","_this","referenceCount","mergeSource","appendOnly","forceBuffer","appendFirst","sourceSeen","bufferStart","bufferEnd","add","trim","blockValue","contextName","setupHelperArgs","blockName","popStack","functionCall","ambiguousBlockValue","flushInline","topStack","lastHelper","appendContent","pendingContent","pendingLocation","append","isInline","replaceStack","local","appendEscaped","getContext","pushContext","pushStackLiteral","lookupOnContext","resolvePath","lookupBlockParam","lookupData","assumeObjects","requireTerminal","$b1f0070f58a24a18$var$strictLookup","_this2","resolvePossibleLambda","pushStringParam","pushString","emptyHash","pushHash","values","types","contexts","popHash","pushLiteral","pushProgram","programExpression","paramSize","foundDecorator","invokeHelper","nonHelper","setupHelper","possibleFunctionCalls","functionLookupCode","itemsSeparatedBy","callParams","items","invokeKnownHelper","invokeAmbiguous","helperCall","useRegister","paramsInit","setupParams","assignToHash","pushId","child","existing","matchExistingProgram","programParams","expr","item","callback","prefix","createdStack","usedLiteral","top","incrStack","topStackName","entry","wrapped","inline","blockHelper","objectArgs","hashIds","hashTypes","hashContexts","generateArray","reservedWords","compilerWords","RESERVED_WORDS","isValidJavaScriptVariableName","$abc8921b9d3598e9$var$SourceNode","define","amd","$abc8921b9d3598e9$var$SourceMap","SourceNode","err","$abc8921b9d3598e9$var$castChunk","chunk","codeGen","$abc8921b9d3598e9$var$CodeGen","srcFile","chunks","src","code","empty","iter","generateList","entries","$72c16d7307a9ebfa$export$4d99f7c30e854ff","$72c16d7307a9ebfa$export$194e92554d04abdd","$72c16d7307a9ebfa$export$7e987e8f375d24c2","SourceMapGenerator","SourceMapConsumer","$d3ef831f06b78aca$export$4d99f7c30e854ff","ArraySet","MappingList","$d3ef831f06b78aca$var$SourceMapGenerator","aArgs","_file","$dQK2c","getArg","_sourceRoot","_skipValidation","_sources","$d3ef831f06b78aca$require$ArraySet","_names","_mappings","$d3ef831f06b78aca$require$MappingList","_sourcesContents","_version","fromSourceMap","aSourceMapConsumer","sourceRoot","generator","eachMapping","mapping","newMapping","generated","generatedLine","generatedColumn","relative","originalLine","originalColumn","addMapping","sourceFile","sourceRelative","has","sourceContentFor","setSourceContent","_validateMapping","String","aSourceFile","aSourceContent","toSetString","applySourceMap","aSourceMapPath","newSources","newNames","unsortedForEach","originalPositionFor","aGenerated","aOriginal","aSource","aName","_serializeMappings","nameIdx","sourceIdx","previousGeneratedColumn","previousGeneratedLine","previousOriginalColumn","previousOriginalLine","previousName","previousSource","mappings","toArray","compareByGeneratedPositionsInflated","$duvZU","encode","_generateSourcesContent","aSources","aSourceRoot","toJSON","version","names","sourcesContent","$9d26e5c3bd14e034$export$c564cdbbe6da493","$9d26e5c3bd14e034$export$2f872c0f2117be69","aValue","digit","encoded","vlq","$9d26e5c3bd14e034$var$toVLQSigned","$9d26e5c3bd14e034$var$VLQ_BASE","$iJ1ZV","aStr","aIndex","aOutParam","continuation","shifted","strLen","decode","charCodeAt","rest","$da1dfab4e991a06c$export$c564cdbbe6da493","$da1dfab4e991a06c$export$2f872c0f2117be69","$da1dfab4e991a06c$var$intToCharMap","TypeError","charCode","$a153d7326fb5205c$export$6e45e70adce70bb2","$a153d7326fb5205c$export$d6e833647f7f5f17","$a153d7326fb5205c$export$a3295358bff77e","$a153d7326fb5205c$export$f7e2c8231c57a8bd","$a153d7326fb5205c$export$e434c7255acda994","$a153d7326fb5205c$export$f0e7d1106eeabbe6","$a153d7326fb5205c$export$be0fa1163fa7a4c","$a153d7326fb5205c$export$1fc47c3d4c3302a1","$a153d7326fb5205c$export$273077902de92ff2","$a153d7326fb5205c$export$b7acf533941302f6","$a153d7326fb5205c$export$f9c43907549d61f1","$a153d7326fb5205c$export$b49e2de2ad542732","$a153d7326fb5205c$export$659a1aa8f1cdc036","aDefaultValue","$a153d7326fb5205c$var$urlRegexp","$a153d7326fb5205c$var$dataUrlRegexp","$a153d7326fb5205c$var$urlParse","aUrl","scheme","auth","host","port","$a153d7326fb5205c$var$urlGenerate","aParsedUrl","$a153d7326fb5205c$var$normalize","aPath","isAbsolute","up","$a153d7326fb5205c$var$join","aRoot","aPathUrl","aRootUrl","joined","lastIndexOf","$a153d7326fb5205c$var$supportsNullProto","$a153d7326fb5205c$var$identity","s","$a153d7326fb5205c$var$isProtoString","$a153d7326fb5205c$var$strcmp","aStr1","aStr2","mappingA","mappingB","onlyCompareOriginal","cmp","onlyCompareGenerated","sourceURL","sourceMapURL","parsed","$fee9d890a9e1b4a0$export$605bbf5ea7b60ba3","$fee9d890a9e1b4a0$var$has","$fee9d890a9e1b4a0$var$hasNativeMap","Map","$fee9d890a9e1b4a0$var$ArraySet","_array","_set","fromArray","aArray","aAllowDuplicates","set","size","getOwnPropertyNames","sStr","isDuplicate","get","at","aIdx","$1eea65f92da48f53$export$e82e0908843dd951","$1eea65f92da48f53$var$MappingList","_sorted","_last","aCallback","aThisArg","aMapping","lineA","lineB","columnA","columnB","sort","$f6d918b92cc3e1c1$export$194e92554d04abdd","quickSort","$f6d918b92cc3e1c1$var$SourceMapConsumer","aSourceMap","aSourceMapURL","sourceMap","parseSourceMapInput","sections","$f6d918b92cc3e1c1$var$IndexedSourceMapConsumer","$f6d918b92cc3e1c1$var$BasicSourceMapConsumer","normalize","$f6d918b92cc3e1c1$require$ArraySet","_absoluteSources","computeSourceURL","_sourceMapURL","$f6d918b92cc3e1c1$var$Mapping","lastOffset","_sections","offsetLine","offsetColumn","generatedOffset","consumer","__generatedMappings","configurable","_parseMappings","__originalMappings","_charIsMappingSeparator","GENERATED_ORDER","ORIGINAL_ORDER","GREATEST_LOWER_BOUND","LEAST_UPPER_BOUND","aContext","aOrder","_generatedMappings","_originalMappings","allGeneratedPositionsFor","needle","_findSourceIndex","_findMapping","compareByOriginalPositions","$bTtvB","lastColumn","relativeSource","smc","generatedMappings","destGeneratedMappings","destOriginalMappings","srcMapping","destMapping","$f6d918b92cc3e1c1$require$quickSort","segment","cachedSegments","temp","originalMappings","compareByGeneratedPositionsDeflated","aNeedle","aMappings","aLineName","aColumnName","aComparator","aBias","search","computeColumnSpans","nextMapping","lastGeneratedColumn","Infinity","hasContentsOfAllSources","some","sc","nullOnMissing","urlParse","fileUriAbsPath","generatedPositionFor","sectionIndex","section","bias","every","generatedPosition","sectionMappings","adjustedMapping","$8a8bb89a19cdf772$export$4ecd616dce182dff","$8a8bb89a19cdf772$export$b99fbecff261243","$8a8bb89a19cdf772$export$d76128d007d19019","$8a8bb89a19cdf772$var$recursiveSearch","aLow","aHigh","aHaystack","aCompare","mid","Math","floor","$52b4eda08e5a05e8$export$866270269b9544a5","$52b4eda08e5a05e8$var$swap","ary","x","y","$52b4eda08e5a05e8$var$doQuickSort","comparator","low","high","round","random","pivot","q","$0a6eda489c23d00d$export$7e987e8f375d24c2","$0a6eda489c23d00d$var$REGEX_NEWLINE","$0a6eda489c23d00d$var$isSourceNode","$0a6eda489c23d00d$var$SourceNode","aLine","aColumn","aChunks","sourceContents","fromStringWithSourceMap","aGeneratedCode","aRelativePath","remainingLines","remainingLinesIndex","shiftNextLine","getNextLine","lastGeneratedLine","lastMapping","nextLine","addMappingWithCode","aChunk","walk","aFn","aSep","newChildren","replaceRight","aPattern","aReplacement","lastChild","walkSourceContents","fromSetString","$0a6eda489c23d00d$require$SourceMapGenerator","sourceMappingActive","lastOriginalSource","lastOriginalLine","lastOriginalColumn","lastOriginalName","sourceContent","$d7009521decccf33$var$PrintVisitor","padding","$d7009521decccf33$var$_visitor2","pad","out","paramStrings","joinedPairs","$5fa27e01ce71271d$export$2e2bcd8739ae039","$parcel$interopDefault","depth0","stack1","alias1","alias2","alias3","alias4","$5Lk9D","$0649b09f8ef56721$var$infoFilmApi","$4Oa0t","$0649b09f8ef56721$var$refs","backdrop","document","querySelector","closeBtn","modalWrap","$0649b09f8ef56721$var$closeModal","classList","remove","removeEventListener","innerHTML","async","$0649b09f8ef56721$var$checkFilmFromUser","filmId","user","currentUser","uid","films","filmsUser","film","href","$0649b09f8ef56721$var$write","addEventListener","e","target","dataset","contains","$1DACH","getWatchedByUserId","$eWCmQ","Notify","info","writeWatched","getQueueByUserId","writeQueue","$8NPS8","$1315d790abc2fb09$export$9aa04ae0de98dd2","userId","db","getDatabase","ref","catch","failure","$1315d790abc2fb09$export$c2c6d46fc428855f","$1315d790abc2fb09$export$9a877dd145d5f667","orderByChild","equalTo","$1315d790abc2fb09$export$af0956a7e1ef0c41","$668b2310913a4fe8$var$SDK_VERSION","$668b2310913a4fe8$var$DOMStorageWrapper","domStorage_","removeItem","prefixedName_","storedVal","getItem","prefix_","$668b2310913a4fe8$var$MemoryStorage","cache_","$ffjl9","isInMemoryStorage","$668b2310913a4fe8$var$createStoragefor","domStorageName","domStorage","setItem","$668b2310913a4fe8$var$PersistentStorage","$668b2310913a4fe8$var$SessionStorage","$668b2310913a4fe8$var$sha1","utf8Bytes","stringToByteArray","sha1","Sha1","update","digest","base64","encodeByteArray","sha1Bytes","varArgs","arg","$668b2310913a4fe8$var$buildLogMessage_","$668b2310913a4fe8$var$logger","$668b2310913a4fe8$var$enableLogging$1","logger_","persistent","assert","$668b2310913a4fe8$var$logClient","logLevel","$7vF8m","LogLevel","VERBOSE","bind","$668b2310913a4fe8$var$log","$668b2310913a4fe8$var$firstLog_","$668b2310913a4fe8$var$logWrapper","$668b2310913a4fe8$var$error","$668b2310913a4fe8$var$fatal","warn","$668b2310913a4fe8$var$isInvalidJSONNumber","POSITIVE_INFINITY","NEGATIVE_INFINITY","$668b2310913a4fe8$var$MIN_NAME","$668b2310913a4fe8$var$MAX_NAME","$668b2310913a4fe8$var$nameCompare","bAsInt","aAsInt","$668b2310913a4fe8$var$requireKey","$668b2310913a4fe8$var$ObjectToUniqueKey","k","$668b2310913a4fe8$var$splitStringBySize","segsize","dataSegs","$668b2310913a4fe8$var$each","v","f","ln","abs","min","LN2","pow","bits","reverse","hexByteString","hexByte","$668b2310913a4fe8$var$INTEGER_REGEXP_","RegExp","$668b2310913a4fe8$var$tryParseInt","intVal","$668b2310913a4fe8$var$exceptionGuard","setTimeout","$668b2310913a4fe8$var$warn","$668b2310913a4fe8$var$setTimeoutNonBlocking","time","timeout","Deno","unrefTimer","appCheck","getToken","forceRefresh","Promise","resolve","reject","listener","_a","appCheckProvider","addTokenListener","notifyForInvalidToken","appName_","getImmediate","optional","auth_","firebaseOptions_","errorMessage","authProvider_","onInit","$668b2310913a4fe8$var$EmulatorTokenProvider","accessToken","removeTokenChangeListener","OWNER","$668b2310913a4fe8$var$LONG_POLLING","$668b2310913a4fe8$var$RepoInfo","internalHost","newHost","isCacheableHost","_host","toURLString","persistenceKey","protocol","secure","includeNamespaceInQueryParams","namespace","webSocketOnly","nodeAdmin","_domain","$668b2310913a4fe8$var$repoInfoConnectionURL","repoInfo","connURL","$668b2310913a4fe8$var$WEBSOCKET","counters_","amount","deepCopy","hashString","$668b2310913a4fe8$var$collections","$668b2310913a4fe8$var$StatsCollection","responseNum","closeAfterResponse","onClose","requestNum","pendingResponses","currentResponseNum","toProcess","onMessage_","curSegmentNum","onDisconnect","$668b2310913a4fe8$var$PacketReceiver","onMessage","isClosed_","connectTimeoutTimer_","log_","onClosed_","isNodeSdk","readyState","wrappedFn","called","attachEvent","scriptTagHolder","$668b2310913a4fe8$var$FirebaseIFrameScriptHolder","command","arg1","arg2","arg3","arg4","incrementIncomingBytes_","clearTimeout","everConnected_","$668b2310913a4fe8$var$FIREBASE_LONGPOLL_START_PARAM","password","sendNewPolls","myPacketOrderer","closeAfter","handleResponse","pN","urlFn","uniqueCallbackIdentifier","urlParams","$668b2310913a4fe8$var$PROTOCOL_VERSION","connectURL","startLongPoll","addDisconnectPingFrame","forceAllow_","$668b2310913a4fe8$var$BrowserPollConnection","forceDisallow_","createElement","Windows","UI","shutdown_","myDisconnFrame","removeChild","onDisconnect_","bytesSent","dataStr","stats_","incrementCounter","base64Encode","base64data","enqueueSegment","pw","style","display","appendChild","bytesReceived","connId","applicationId","appCheckToken","authToken","transportSessionId","lastSessionId","$668b2310913a4fe8$var$statsManagerGetCollection","$668b2310913a4fe8$var$APP_CHECK_TOKEN_PARAM","static","iframe","contentWindow","domain","contentDocument","doc","alive","myIFrame","myID","myPW","newRequest_","outstandingRequests","pendingSegs","currentSerial","theURL","curDataString","d","theSeg","seg","ts","segnum","totalsegs","serial","delete","keepaliveTimeout","doNewRequest","addTag","doNodeLongPoll","loadCB","newScript","onload","onreadystatechange","rstate","onerror","commandCB","onMessageCB","Set","$668b2310913a4fe8$var$LUIDGenerator","createIFrame_","script","iframeContents","$668b2310913a4fe8$var$WebSocketImpl","MozWebSocket","WebSocket","$668b2310913a4fe8$var$WebSocketConnection","hostname","$668b2310913a4fe8$var$FORGE_DOMAIN_RE","headers","$4TNnu","platform","device","proxy","origin","mySock","onopen","onclose","onmessage","m","handleIncomingFrame","isOldAndroid","navigator","userAgent","oldAndroidMatch","oldAndroidRegex","parseFloat","appendFrame_","frames","jsonMess","jsonEval","fullMess","handleNewFrameCount_","frameCount","totalFrames","isNaN","mess","resetKeepAlive","remainingData","extractFrameCount_","sendString_","keepaliveTimer","clearInterval","setInterval","send","responsesRequiredToBeHealthy","healthyTimeout","IS_TRANSPORT_INITIALIZED","globalTransportInitialized_","initTransports_","isWebSocketsAvailable","isSkipPollConnection","previouslyFailed","transports_","transports","transport","$668b2310913a4fe8$var$TransportManager","ALL_TRANSPORTS","initialTransport","upgradeTransport","$668b2310913a4fe8$var$Connection","start_","conn","transportManager_","conn_","nextTransportId_","repoInfo_","applicationId_","appCheckToken_","authToken_","onMessageReceived","connReceiver_","onConnectionLost","disconnReceiver_","tx_","rx_","secondaryConn_","healthyTimeoutMS","healthyTimeout_","isHealthy_","markConnectionHealthy","connectionCount","everConnected","onConnectionLost_","onSecondaryConnectionLost_","state_","onPrimaryMessageReceived_","onSecondaryMessageReceived_","dataMsg","sendData_","msg","onSecondaryControl_","controlData","cmd","upgradeIfSecondaryHealthy_","secondaryResponsesRequired_","parsedData","layer","pendingDataMessages","t","proceedWithUpgrade_","tryCleanupConnection","onControl_","onDataMessage_","onPrimaryResponse_","primaryResponsesRequired_","payload","onHandshake_","onConnectionShutdown_","onReset_","sendPingOnPrimaryIfNecessary_","handshake","timestamp","onConnectionEstablished_","tryStartUpgrade_","startUpgrade_","sessionId","closeConnections_","onReady_","reason","onKill_","$668b2310913a4fe8$var$ServerActions","pathString","onComplete","refreshAuthToken","stats","eventType","listeners_","listeners","validateEventType_","eventData","getInitialEvent","allowedEvents_","find","et","$668b2310913a4fe8$var$EventEmitter","$668b2310913a4fe8$var$OnlineMonitor","online_","trigger","pieceNum_","pieces_","pathOrString","pieceNum","copyTo","$668b2310913a4fe8$var$newEmptyPath","$668b2310913a4fe8$var$Path","$668b2310913a4fe8$var$pathGetFront","pieces","childPathObj","childPieces","$668b2310913a4fe8$var$pathIsEmpty","$668b2310913a4fe8$var$newRelativePath","outerPath","innerPath","outer","inner","$668b2310913a4fe8$var$pathPopFront","$668b2310913a4fe8$var$pathEquals","$668b2310913a4fe8$var$pathGetLength","$668b2310913a4fe8$var$pathContains","$668b2310913a4fe8$var$ValidationPath","errorPrefix_","parts_","$668b2310913a4fe8$var$pathSlice","byteLength_","max","stringLength","$668b2310913a4fe8$var$validationPathCheckValid","validationPath","$668b2310913a4fe8$var$validationPathToErrorString","$668b2310913a4fe8$var$VisibilityMonitor","visible_","hidden","super","visibilityChange","visible","$668b2310913a4fe8$var$RECONNECT_MIN_DELAY","requestNumber_","curReqNum","connected_","realtime_","sendRequest","onResponse","requestCBHash_","initConnection_","deferred","Deferred","outstandingGet","request","_path","_queryObject","outstandingGets_","outstandingGetCount_","sendGet_","promise","listen","currentHashFn","tag","queryId","_queryIdentifier","listens","_queryParams","isDefault","loadsAllData","listenSpec","sendListen_","req","hashFn","status","$668b2310913a4fe8$var$PersistentConnection","warnOnListenWarnings_","removeListen_","warnings","safeGet","indexSpec","getIndex","indexPath","tryAuth","reduceReconnectDelayIfAdminCredential_","credential","isAdmin","maxReconnectDelay_","refreshAppCheckToken","tryAppCheck","authMethod","isValidFormat","requestData","cred","authOverride_","res","invalidAuthTokenCount_","onAuthRevoked_","invalidAppCheckTokenCount_","onAppCheckRevoked_","unlisten","sendUnlisten_","queryObj","onDisconnectPut","sendOnDisconnect_","onDisconnectRequestQueue_","onDisconnectCancel","putInternal","outstandingPuts_","outstandingPutCount_","setMaxNode","MAX_NODE","sendPut_","queued","reportStats","errorReason","reqNum","onDataPush_","onDataUpdate_","onListenRevoked_","onSecurityDebugPacket_","lastConnectionEstablishedTime_","Date","getTime","handleTimestamp_","firstConnection_","sendConnectStats_","restoreState_","onConnectStatus_","establishConnectionTimer_","establishConnection_","scheduleConnect_","reconnectDelay_","online","onRealtimeDisconnect_","cancelSentTransactions_","timeSinceLastConnectAttempt","lastConnectionAttemptTime_","reconnectDelay","shouldReconnect_","onDataMessage","onReady","nextConnectionId_","connection","closeFn","canceled","sendRequestFn","nodeFromJSON","forceTokenRefresh_","all","authTokenProvider_","appCheckTokenProvider_","interrupt","interruptReasons_","delta","onServerInfoUpdate_","put","normalizedPathString","statusCode","explanation","securityDebugCallback_","queries","i1","clientName","isMobileCordova","isReactNative","getInstance","currentlyOnline","nextPersistentConnectionId_","on","onVisible_","onOnline_","$668b2310913a4fe8$var$NamedNode","$668b2310913a4fe8$var$Index","compare","indexedValueChanged","oldNode","newNode","newWrapped","oldWrapped","MIN","__EMPTY_NODE","$668b2310913a4fe8$var$__EMPTY_NODE","assertionError","minPost","indexValue","$668b2310913a4fe8$var$KeyIndex","nodeStack_","resultGenerator_","isReverse_","left","right","startKey","$668b2310913a4fe8$var$LLRBNode","copy","color","count","inorderTraversal","reverseTraversal","min_","minKey","maxKey","insert","fixUp_","removeMin_","$668b2310913a4fe8$var$SortedMap","EMPTY_NODE","isRed_","moveRedLeft_","smallest","rotateRight_","moveRedRight_","rotateLeft_","colorFlip_","nl","RED","nr","checkMaxDepth_","blackDepth","check_","BLACK","comparator_","root_","rightParent","getIterator","resultGenerator","$668b2310913a4fe8$var$SortedMapIterator","$668b2310913a4fe8$var$NAME_ONLY_COMPARATOR","$668b2310913a4fe8$var$MAX_NODE$2","priority","$668b2310913a4fe8$var$validatePriorityNode","priorityNode","isLeafNode","getPriority","$668b2310913a4fe8$var$__childrenNodeConstructor","$668b2310913a4fe8$var$LeafNode","__childrenNodeConstructor","priorityNode_","updatePriority","newPriorityNode","value_","getImmediateChild","childName","getChild","getPredecessorChildName","childNode","updateImmediateChild","newChildNode","updateChild","front","numChildren","forEachChild","exportFormat","getValue","lazyHash_","toHash","$668b2310913a4fe8$var$priorityHashText","$668b2310913a4fe8$var$doubleToIEEE754String","compareTo","compareToLeafNode_","otherLeaf","otherLeafType","thisLeafType","otherIndex","VALUE_TYPE_ORDER","thisIndex","withIndex","isIndexed","aPriority","bPriority","indexCmp","$668b2310913a4fe8$var$MAX_NODE$1","$668b2310913a4fe8$var$nodeFromJSON$1","bits_","current_","num","$668b2310913a4fe8$var$LOG_2","mask","childList","keyFn","mapSortFn","namedNode","middle","buildBalancedTree","buildPennant","chunkSize","childTree","attachPennant","pennant","base12","isOne","nextBitIsOne","buildFrom12Array","$668b2310913a4fe8$var$Base12Num","Default","$668b2310913a4fe8$var$fallbackObject","$668b2310913a4fe8$var$PRIORITY_INDEX","$668b2310913a4fe8$var$_defaultIndexMap","$668b2310913a4fe8$var$IndexMap","indexKey","sortedMap","indexes_","indexDefinition","indexSet_","existingChildren","$668b2310913a4fe8$var$KEY_INDEX","sawIndexedValue","Wrap","newIndex","getNext","isDefinedOn","$668b2310913a4fe8$var$buildChildSet","getCompare","indexName","newIndexSet","assign","newIndexes","indexedChildren","existingSnap","removeFromIndexes","$668b2310913a4fe8$var$ChildrenNode","$668b2310913a4fe8$var$EMPTY_NODE","$668b2310913a4fe8$var$NAME_COMPARATOR","children_","indexMap_","hasChild","newIndexMap","addToIndexes","newPriority","newImmediateChild","numKeys","allIntegerKeys","INTEGER_REGEXP_","childHash","resolveIndex_","predecessor","getPredecessorKey","getFirstChild","getFirstChildName","getLastChild","getLastChildName","wrappedNode","getIteratorFrom","startPost","peek","getReverseIteratorFrom","maxPost","endPost","$668b2310913a4fe8$var$MAX_NODE","hasIndex","addIndex","otherChildrenNode","thisIter","otherIter","thisCurrent","otherCurrent","defineProperties","$668b2310913a4fe8$var$nodeFromJSON","childData","childrenHavePriority","childSet","sortedChildSet","$668b2310913a4fe8$var$PathIndex","extractChild","snap","indexPath_","aChild","bChild","valueNode","MAX","makePost","$668b2310913a4fe8$var$changeValue","snapshotNode","$668b2310913a4fe8$var$changeChildAdded","$668b2310913a4fe8$var$changeChildRemoved","$668b2310913a4fe8$var$changeChildChanged","oldSnap","newChild","affectedPath","optChangeAccumulator","index_","oldChild","trackChildChange","newSnap","$668b2310913a4fe8$var$RangedFilter","getStartPost","isWithinStart","startIsInclusive_","updateFullNode","filtered","indexedFilter_","filtersNodes","getIndexedFilter","hasStart","startName","getIndexStartName","getIndexStartValue","hasEnd","endName","getIndexEndName","getIndexEndValue","$668b2310913a4fe8$var$IndexedFilter","startPost_","getStartPost_","endPost_","getEndPost_","startAfterSet_","endIsInclusive_","endBeforeSet_","$668b2310913a4fe8$var$LimitedFilter","rangedFilter_","limit_","fullLimitUpdateChild_","reverse_","getEndPost","hasNext","withinDirectionalStart","withinDirectionalEnd","iterator1","getReverseIterator","count1","next1","childKey","childSnap","changeAccumulator","oldEventCache","newChildNamedNode","windowBoundary","inRange","oldChildSnap","nextChild","getChildAfterChild","compareNext","newEventCache","withinEndPost","withinStartPost","compareRes","getLimit","isViewFromLeft","startSet_","viewFrom_","indexStartValue_","startNameSet_","indexStartName_","endSet_","indexEndValue_","endNameSet_","indexEndName_","hasLimit","limitSet_","hasAnchoredLimit","$668b2310913a4fe8$export$7ba287e361c94330","$668b2310913a4fe8$var$queryParamsStartAt","queryParams","newParams","$668b2310913a4fe8$var$queryParamsEndAt","$668b2310913a4fe8$var$queryParamsToRestQueryStringParameters","qs","orderBy","$668b2310913a4fe8$var$VALUE_INDEX","startParam","endParam","viewFrom","$668b2310913a4fe8$var$ReadonlyRestClient","listenId","getListenId_","thisListen","listens_","queryStringParameters","restRequest_","referenceConstructor","querystring","xhr","XMLHttpRequest","responseText","rootNode_","newSnapshotNode","$668b2310913a4fe8$var$newSparseSnapshotTree","$668b2310913a4fe8$var$sparseSnapshotTreeRemember","sparseSnapshotTree","clear","$668b2310913a4fe8$var$sparseSnapshotTreeForEachTree","prefixPath","func","tree","$668b2310913a4fe8$var$StatsListener","newStats","collection_","last_","stat","statsListener_","statsToReport_","haveStatsToReport","server_","reportedStats","reportStats_","collection","$668b2310913a4fe8$var$OperationType","OperationType","$668b2310913a4fe8$var$newOperationSourceServerTaggedQuery","fromUser","tagged","$668b2310913a4fe8$var$AckUserWrite","affectedTree","subtree","revert","ACK_USER_WRITE","fromServer","$668b2310913a4fe8$var$ListenComplete","LISTEN_COMPLETE","$668b2310913a4fe8$var$Overwrite","$668b2310913a4fe8$var$Merge","operationForChild","isFullyInitialized","fullyInitialized_","isFiltered","filtered_","isCompleteForPath","isCompleteForChild","node_","$668b2310913a4fe8$var$EventGenerator","query_","$668b2310913a4fe8$var$eventGeneratorGenerateEventsForType","eventGenerator","events","changes","registrations","eventCache","filteredChanges","change","aWrapped","bWrapped","$668b2310913a4fe8$var$eventGeneratorCompareChanges","materializedChange","prevName","$668b2310913a4fe8$var$eventGeneratorMaterializeSingleChange","registration","respondsTo","createEvent","$668b2310913a4fe8$var$newViewCache","serverCache","viewCache","eventSnap","complete","$668b2310913a4fe8$var$CacheNode","$668b2310913a4fe8$var$viewCacheUpdateServerSnap","serverSnap","$668b2310913a4fe8$var$viewCacheGetCompleteEventSnap","getNode","$668b2310913a4fe8$var$viewCacheGetCompleteServerSnap","$668b2310913a4fe8$var$emptyChildrenSingleton","$668b2310913a4fe8$var$ImmutableTree","childPath","findRootMostMatchingPathAndValue","relativePath","predicate","childExistingPathAndValue","$668b2310913a4fe8$var$pathChild","findRootMostValueAndPath","toSet","setTree","newTree","fold","fold_","pathSoFar","accum","findOnPath","findOnPath_","pathToFollow","foreachOnPath_","currentRelativePath","foreach","foreach_","$668b2310913a4fe8$var$stringCompare","$668b2310913a4fe8$var$EmptyChildren","$668b2310913a4fe8$var$CompoundWrite","writeTree_","rootmost","rootMostPath","compoundWrite","newWriteTree","$668b2310913a4fe8$var$compoundWriteAddWrites","updates","$668b2310913a4fe8$var$compoundWriteAddWrite","newWrite","$668b2310913a4fe8$var$compoundWriteRemoveWrite","$668b2310913a4fe8$var$compoundWriteHasCompleteWrite","$668b2310913a4fe8$var$compoundWriteGetCompleteNode","$668b2310913a4fe8$var$compoundWriteChildCompoundWrite","shadowingNode","$668b2310913a4fe8$var$compoundWriteIsEmpty","$668b2310913a4fe8$var$compoundWriteApply","writeTree","priorityWrite","$668b2310913a4fe8$var$applySubtreeWrite","$668b2310913a4fe8$var$writeTreeChildWrites","$668b2310913a4fe8$var$newWriteTreeRef","$668b2310913a4fe8$var$writeTreeRemoveWrite","writeId","allWrites","findIndex","writeToRemove","removedWriteWasVisible","removedWriteOverlapsWithOtherWrites","currentWrite","$668b2310913a4fe8$var$writeTreeRecordContainsPath_","visibleWrites","$668b2310913a4fe8$var$writeTreeLayerTree_","$668b2310913a4fe8$var$writeTreeDefaultFilter_","lastWriteId","$668b2310913a4fe8$var$writeTreeResetTree_","writeRecord","write","writes","treeRoot","writePath","deepNode","$668b2310913a4fe8$var$writeTreeCalcCompleteEventCache","treePath","completeServerCache","writeIdsToExclude","includeHiddenWrites","subMerge","$668b2310913a4fe8$var$writeTreeRefCalcCompleteEventCache","writeTreeRef","$668b2310913a4fe8$var$writeTreeRefCalcCompleteEventChildren","completeServerChildren","completeChildren","topLevelSet","$668b2310913a4fe8$var$writeTreeCalcCompleteEventChildren","$668b2310913a4fe8$var$writeTreeRefCalcEventCacheAfterServerOverwrite","existingEventSnap","existingServerSnap","childMerge","$668b2310913a4fe8$var$writeTreeCalcEventCacheAfterServerOverwrite","$668b2310913a4fe8$var$writeTreeRefShadowingWrite","completeServerData","toIterate","nodes","existingServerCache","oldChange","changeMap","oldType","$668b2310913a4fe8$var$NO_COMPLETE_CHILD_SOURCE","getCompleteChild","$668b2310913a4fe8$var$WriteTreeCompleteChildSource","viewCache_","serverNode","optCompleteServerCache_","$668b2310913a4fe8$var$writeTreeRefCalcCompleteChild","writes_","$668b2310913a4fe8$var$writeTreeRefCalcIndexedSlice","accumulator","$668b2310913a4fe8$var$ChildChangeAccumulator","newViewCache","filterServerNode","operation","OVERWRITE","overwrite","$668b2310913a4fe8$var$viewProcessorApplyUserOverwrite","viewProcessor","oldViewCache","writesCache","completeCache","$668b2310913a4fe8$var$viewProcessorApplyServerOverwrite","MERGE","changedChildren","curViewCache","$668b2310913a4fe8$var$viewProcessorCacheHasChild","$668b2310913a4fe8$var$viewProcessorApplyUserMerge","$668b2310913a4fe8$var$viewProcessorApplyServerMerge","ackUserWrite","serverChildren","$668b2310913a4fe8$var$viewProcessorRevertUserWrite","ackPath","changedChildren1","mergePath","serverCachePath","$668b2310913a4fe8$var$viewProcessorAckUserWrite","oldServerNode","$668b2310913a4fe8$var$viewProcessorGenerateEventCacheAfterServerEvent","$668b2310913a4fe8$var$viewProcessorListenComplete","getChanges","isLeafOrEmpty","oldCompleteSnap","$668b2310913a4fe8$var$viewProcessorMaybeAddValueEvent","changePath","completeEventChildren","completeNode","oldEventNode","oldEventSnap","updatedPriority","childChangePath","eventChildUpdate","newEventChild","$668b2310913a4fe8$var$viewCacheUpdateEventSnap","changedSnap","serverFilter","newServerCache","oldServerSnap","newServerNode","$668b2310913a4fe8$var$pathGetBack","$668b2310913a4fe8$var$pathParent","$668b2310913a4fe8$var$viewProcessorApplyMerge","viewMergeTree","childMergeTree","isUnknownDeepMerge","$668b2310913a4fe8$var$View","initialViewCache","eventRegistrations_","indexFilter","processor_","$668b2310913a4fe8$var$newViewProcessor","initialServerCache","initialEventCache","eventGenerator_","$668b2310913a4fe8$var$viewGetCompleteServerCache","view","cache","$668b2310913a4fe8$var$viewIsEmpty","$668b2310913a4fe8$var$viewRemoveEventRegistration","eventRegistration","cancelError","cancelEvents","maybeEvent","createCancelEvent","remaining","hasAnyCallback","$668b2310913a4fe8$var$viewApplyOperation","$668b2310913a4fe8$var$viewProcessorApplyOperation","$668b2310913a4fe8$var$viewGenerateEventsForChanges_","eventRegistrations","moves","$668b2310913a4fe8$var$eventGeneratorGenerateEventsForChanges","$668b2310913a4fe8$var$referenceConstructor$1","$668b2310913a4fe8$var$referenceConstructor","$668b2310913a4fe8$var$SyncPoint","views","$668b2310913a4fe8$var$syncPointApplyOperation","syncPoint","optCompleteServerCache","view1","$668b2310913a4fe8$var$syncPointGetView","serverCacheComplete","eventCacheComplete","$668b2310913a4fe8$var$syncPointAddEventRegistration","initialChanges","$668b2310913a4fe8$var$viewGetInitialEvents","$668b2310913a4fe8$var$syncPointRemoveEventRegistration","hadCompleteView","$668b2310913a4fe8$var$syncPointHasCompleteView","viewQueryId","removed","_repo","$668b2310913a4fe8$var$syncPointGetQueryViews","$668b2310913a4fe8$var$syncPointGetCompleteServerCache","$668b2310913a4fe8$var$syncPointViewForQuery","$668b2310913a4fe8$var$syncPointGetCompleteView","$668b2310913a4fe8$var$syncPointViewExistsForQuery","$668b2310913a4fe8$var$syncTreeNextQueryTag_","$668b2310913a4fe8$var$SyncTree","listenProvider_","syncPointTree_","pendingWriteTree_","tagToQueryMap","queryToTagMap","$668b2310913a4fe8$var$syncTreeApplyUserOverwrite","syncTree","newData","$668b2310913a4fe8$var$writeTreeAddOverwrite","$668b2310913a4fe8$var$syncTreeApplyOperationToSyncPoints_","$668b2310913a4fe8$var$syncTreeAckUserWrite","record","$668b2310913a4fe8$var$writeTreeGetWrite","$668b2310913a4fe8$var$syncTreeApplyServerOverwrite","$668b2310913a4fe8$var$syncTreeRemoveEventRegistration","skipListenerDedup","maybeSyncPoint","removedAndEvents","removingDefault","covered","parentSyncPoint","newViews","$668b2310913a4fe8$var$syncTreeCollectDistinctViewsForSubTree_","$668b2310913a4fe8$var$syncTreeCreateListenerForView_","startListening","$668b2310913a4fe8$var$syncTreeQueryForListening_","$668b2310913a4fe8$var$syncTreeTagForQuery","defaultTag","stopListening","queryToRemove","tagToRemove","$668b2310913a4fe8$var$syncTreeMakeQueryKey_","$668b2310913a4fe8$var$syncTreeRemoveTags_","$668b2310913a4fe8$var$syncTreeApplyTaggedQueryOverwrite","queryKey","$668b2310913a4fe8$var$syncTreeQueryKeyForTag_","$668b2310913a4fe8$var$syncTreeParseQueryKey_","queryPath","$668b2310913a4fe8$var$syncTreeApplyTaggedOperation_","$668b2310913a4fe8$var$syncTreeAddEventRegistration","skipSetupListener","foundAncestorDefaultView","foreachOnPath","pathToSyncPoint","sp","foreachChild","childSyncPoint","viewAlreadyExists","enableLoggingImpl","SDK_VERSION","$668b2310913a4fe8$var$syncTreeSetupListener_","$668b2310913a4fe8$var$syncTreeCalcCompleteEventCache","$668b2310913a4fe8$var$syncTreeGetServerValue","serverCacheNode","$668b2310913a4fe8$var$viewGetCompleteNode","$668b2310913a4fe8$var$syncTreeApplyOperationHelper_","syncPointTree","$668b2310913a4fe8$var$syncTreeApplyOperationDescendantsHelper_","childOperation","childServerCache","childWritesCache","$668b2310913a4fe8$var$writeTreeRefChild","toUpperCase","creatorFunction","changeTree","fromObject","encodeURIComponent","$7c25cc3caee55b9f$var$infoFilmApi","$7c25cc3caee55b9f$var$ID_FILMS","$7c25cc3caee55b9f$var$backdrop","$7c25cc3caee55b9f$var$modalWrap","$7c25cc3caee55b9f$var$modalJsCard","$7c25cc3caee55b9f$var$slideTrack","$7c25cc3caee55b9f$var$openModal","getElementsByClassName","$7c25cc3caee55b9f$var$langTrailer","nodeName","$7c25cc3caee55b9f$var$creatRender","position","$7c25cc3caee55b9f$var$modalFunction","trailerKey","enTrailerUa","enTrailerEn","dataTrailerLang","spaceArray","dataLang","dataUa","iso_639_1","$7c25cc3caee55b9f$var$creatTrailerFilm","$3Fzed","modalInfoCreat","insertAdjacentHTML","$2ac0870973c2dcd9$export$5c6e77e98c856fad","keyPlayer","URL_POSTEER","imgResize","title","vote_average","vote_count","popularity","original_title","overview","poster_path","player","toFixed","$3d790185f92bc9fb$var$openModalBtn","$3d790185f92bc9fb$var$backdropFooter","$3d790185f92bc9fb$var$closeModalBtn","$3d790185f92bc9fb$var$closeFooterModal","$3d790185f92bc9fb$var$bodyFooter","overflow","$0f17fd79af2696a9$var$bodyRef","$0f17fd79af2696a9$var$toggleRef","$0f17fd79af2696a9$var$LOCALSTORAGE_THEME_KEY","$0f17fd79af2696a9$export$286c04d1f3487629","localStorage","checked","event"],"version":3,"file":"my-library.111ca4e3.js.map"}